using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using AstraFunctionOne.BridgeDesign;
using AstraFunctionOne.BridgeDesign.SteelTruss;
using AstraInterface.DataStructure;
using AstraInterface.Interface;
using AstraInterface.TrussBridge;
using BridgeAnalysisDesign.Composite;
using BridgeAnalysisDesign.PSC_I_Girder;
using BridgeAnalysisDesign.Pier;


namespace BridgeAnalysisDesign.PSC_BoxGirder
{
    public partial class frm_PSC_Box_Girder : Form
    {
        //const string Title = "ANALYSIS OF PSC BOX GIRDER BRIDGE";
        public string Title
        {
            get
            {
                if (iApp.DesignStandard == eDesignStandard.BritishStandard)
                    return "PSC BOX GIRDER BRIDGE WORKING STRESS [BS]";
                return "PSC BOX GIRDER BRIDGE WORKING STRESS [IRC]";
            }
        }

        //CompositAnalysis Deck_Analysis_DL = null;
        //CompositAnalysis Deck_Analysis_LL = null;
        //PostTensionLongGirder LongGirder = null;
        //RccDeckSlab Deck = null;

        PSC_BoxGirderAnalysis Deck_Analysis_DL = null;
        PSC_BoxGirderAnalysis Deck_Analysis_LL = null;

        public PSC_BoxGirderAnalysis Bridge_Analysis
        {
            get
            {
                return Deck_Analysis_LL;
            }
        }

        public List<BridgeMemberAnalysis> All_Analysis { get; set; }


        PostTensionLongGirder LongGirder = null;

        PSC_Box_Section_Data PSC_SECIONS;

        //Chiranjit [2012 10 30]
        RccPier rcc_pier = null;
        Save_FormRecord SaveRec = new Save_FormRecord();
        //Chiranjit [2012 10 31]
        //SupportReactionCollection support_reactions = null;



        //Chiranjit [2012 09 22]
        PSC_Box_Segmental_Girder Segment_Girder = null;
        //Chiranjit [2012 09 28]
        PSC_Box_Forces Box_Forces = null;

        #region View Force
        string DL_Analysis_Rep = "";
        string LL_Analysis_Rep = "";

        SupportReactionTable DL_support_reactions = null;
        SupportReactionTable LL_support_reactions = null;
        string Supports = "";
        public double L { get { return MyList.StringToDouble(txt_Ana_L.Text, 13.0); } set { txt_Ana_L.Text = value.ToString("f3"); } }
        public double B { get { return MyList.StringToDouble(txt_Ana_B.Text, 0.0); } set { txt_Ana_B.Text = value.ToString("f3"); } }

        public void frm_ViewForces(double abut_width, string DL_Analysis_Report_file, string LL_Analysis_Report_file, string supports)
        {
            //iApp = app;
            DL_Analysis_Rep = DL_Analysis_Report_file;
            LL_Analysis_Rep = LL_Analysis_Report_file;
            Supports = supports.Replace(",", " ");
            //B = abut_width;
        }

        //Chiranjit [2013 06 17]
        public double DL_Factor
        {
            get
            {
                return MyList.StringToDouble(txt_Ana_DL_factor.Text, 1.0);
            }
        }
        public double LL_Factor
        {
            get
            {
                return MyList.StringToDouble(txt_Ana_LL_factor.Text, 1.0);
            }
        }

        public string Total_DeadLoad_Reaction
        {
            get
            {
                return txt_dead_kN_m.Text;
            }
            set
            {
                txt_dead_kN_m.Text = value;
            }
        }
        public string Total_LiveLoad_Reaction
        {
            get
            {
                return txt_live_kN_m.Text;
            }
            set
            {
                txt_live_kN_m.Text = value;
            }
        }
        void frm_ViewForces_Load()
        {
            try
            {
                DL_support_reactions = new SupportReactionTable(iApp, DL_Analysis_Rep);
                LL_support_reactions = new SupportReactionTable(iApp, LL_Analysis_Rep);
                Show_and_Save_Data_DeadLoad();
            }
            catch (Exception ex) { }
        }
        void Show_and_Save_Data_DeadLoad()
        {

            dgv_left_end_design_forces.Rows.Clear();
            dgv_right_end_design_forces.Rows.Clear();

            SupportReaction sr = null;
            MyList mlist = new MyList(MyList.RemoveAllSpaces("2 12"), ' ');

            double tot_dead_vert_reac = 0.0;
            double tot_live_vert_reac = 0.0;

            //for (int i = 0; i < mlist.Count; i++)
            //{
            try
            {
                //sr = DL_support_reactions.Get_Data(mlist.GetInt(i));

                List<int> lint = new List<int>();
                lint.Add(2);
                MaxForce mf = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(lint);


                dgv_left_end_design_forces.Rows.Add(mf.NodeNo, Math.Abs(mf.Force).ToString("f3"));
                tot_dead_vert_reac += Math.Abs(mf.Force); ;


                lint.Clear();
                lint.Add(12);
                mf = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(lint);


                dgv_left_end_design_forces.Rows.Add(mf.NodeNo, Math.Abs(mf.Force).ToString("f3"));
                tot_dead_vert_reac += Math.Abs(mf.Force); ;
            }
            catch (Exception ex)
            {
            }

            //}
            mlist = new MyList(MyList.RemoveAllSpaces(Supports), ' ');
            for (int i = 0; i < mlist.Count; i++)
            {
                try
                {
                    sr = LL_support_reactions.Get_Data(mlist.GetInt(i));
                    dgv_right_end_design_forces.Rows.Add(sr.JointNo, Math.Abs(sr.Max_Reaction).ToString("f3"));
                    tot_live_vert_reac += Math.Abs(sr.Max_Reaction);
                }
                catch (Exception ex)
                {
                }
            }
            txt_dead_vert_reac_ton.Text = (tot_dead_vert_reac).ToString("f3");
            txt_live_vert_rec_Ton.Text = (tot_live_vert_reac).ToString("f3");
        }


        private void txt_dead_vert_reac_ton_TextChanged(object sender, EventArgs e)
        {
            TextBox txt = sender as TextBox;

            //if (txt.Name == txt_dead_vert_reac_ton.Name)
            //{
            Text_Changed_Forces();
            //}

        }

        private void Text_Changed_Forces()
        {

            //double DL_Factor = MyList.StringToDouble(txt_Ana_DL_Factor.Text, 1.0);
            //double LL_Factor = MyList.StringToDouble(txt_Ana_LL_Factor.Text, 1.0);

            //lbl_DL_factor.Text = "Factor = " + txt_Ana_DL_Factor.Text;
            //lbl_LL_factor.Text = "Factor = " + txt_Ana_LL_Factor.Text;

            if (B != 0)
            {
                //Chiranjit [2013 06 16]
                //txt_dead_vert_reac_ton_factor.Text = ((MyList.StringToDouble(txt_dead_vert_reac_ton.Text, 0.0) * DL_Factor)).ToString("f3");
                txt_dead_vert_reac_kN.Text = ((MyList.StringToDouble(txt_dead_vert_reac_ton.Text, 0.0) * 10)).ToString("f3");
                txt_dead_kN_m.Text = ((MyList.StringToDouble(txt_dead_vert_reac_kN.Text, 0.0)) / B).ToString("f3");


                //txt_live_vert_rec_Ton_factor.Text = ((MyList.StringToDouble(txt_live_vert_rec_Ton.Text, 0.0) * LL_Factor)).ToString("f3");


                txt_live_vert_rec_kN.Text = ((MyList.StringToDouble(txt_live_vert_rec_Ton.Text, 0.0) * 10)).ToString("f3");
                txt_live_kN_m.Text = ((MyList.StringToDouble(txt_live_vert_rec_kN.Text, 0.0)) / B).ToString("f3");

                txt_final_vert_reac.Text = ((MyList.StringToDouble(txt_dead_vert_reac_ton.Text, 0.0) * DL_Factor) +
                    (MyList.StringToDouble(txt_live_vert_rec_Ton.Text, 0.0) * LL_Factor)).ToString("f3");
                txt_final_vert_rec_kN.Text = (MyList.StringToDouble(txt_final_vert_reac.Text, 0.0) * 10).ToString("f3");
            }

            //txt_abut
            //else if (txt.Name == txt_dead_kN_m.Name)
            //{
            //txt_abut_w5.Text = txt_dead_kN_m.Text;
            txt_pier_2_P2.Text = txt_dead_kN_m.Text;
            //}
            //else if (txt.Name == txt_live_kN_m.Name)
            //{
            //txt_abut_w6.Text = txt_live_kN_m.Text;
            txt_pier_2_P3.Text = txt_live_kN_m.Text;
            //}
            //else if (txt.Name == txt_final_vert_rec_kN.Name)
            //{
            txt_RCC_Pier_W1_supp_reac.Text = txt_final_vert_rec_kN.Text;
            //}
            //else if (txt.Name == txt_max_Mx_kN.Name)
            //{
            txt_RCC_Pier_Mx1.Text = txt_max_Mx_kN.Text;
            //}
            //else if (txt.Name == txt_max_Mz_kN.Name)
            //{
            txt_RCC_Pier_Mz1.Text = txt_max_Mz_kN.Text;


            //txt_Abut_B.Text = txt_RCC_Pier__B.Text = txt_RCC_Pier___B.Text = txt_Ana_B.Text;

            txt_RCC_Pier_L.Text = txt_Ana_L.Text;
        }
        #endregion View Force

        #region frm_Pier_ViewDesign_Forces
        string analysis_rep = "";
        SupportReactionTable support_reactions = null;
        string Left_support = "";
        string Right_support = "";
        public void frm_Pier_ViewDesign_Forces(string Analysis_Report_file, string left_support, string right_support)
        {
            analysis_rep = Analysis_Report_file;
            Left_support = left_support.Replace(",", " ");
            Right_support = right_support.Replace(",", " ");
        }

        private void frm_ViewDesign_Forces_Load()
        {
            support_reactions = new SupportReactionTable(iApp, analysis_rep);
            try
            {
                Show_and_Save_Data();
            }
            catch (Exception ex) { }
        }

        void Show_and_Save_Data()
        {
            if (!File.Exists(analysis_rep)) return;
            string format = "{0,27} {1,10:f3} {2,10:f3} {3,10:f3}";
            List<string> list_arr = new List<string>(File.ReadAllLines(analysis_rep));
            list_arr.Add("");
            list_arr.Add("                   =====================================");
            list_arr.Add("                     DESIGN FORCES FOR RCC PIER DESIGN");
            list_arr.Add("                   =====================================");
            list_arr.Add("");
            list_arr.Add("");
            list_arr.Add(string.Format(""));
            list_arr.Add(string.Format(format, "JOINT", "VERTICAL", "MAXIMUM", "MAXIMUM"));
            list_arr.Add(string.Format(format, "NOS", "REACTIONS", "MX", "MZ"));
            list_arr.Add(string.Format(format, "   ", "  (Ton)   ", "  (Ton-m)", "  (Ton-m)"));
            list_arr.Add("");
            SupportReaction sr = null;

            MyList mlist = new MyList(MyList.RemoveAllSpaces(Left_support), ' ');

            double tot_left_vert_reac = 0.0;
            double tot_right_vert_reac = 0.0;

            double tot_left_Mx = 0.0;
            double tot_left_Mz = 0.0;

            double tot_right_Mx = 0.0;
            double tot_right_Mz = 0.0;


            dgv_left_des_frc.Rows.Clear();
            dgv_right_des_frc.Rows.Clear();
            list_arr.Add("LEFT END");
            list_arr.Add("--------");
            for (int i = 0; i < mlist.Count; i++)
            {
                sr = support_reactions.Get_Data(mlist.GetInt(i));
                dgv_left_des_frc.Rows.Add(sr.JointNo, sr.Max_Reaction, sr.Max_Mx, sr.Max_Mz);

                tot_left_vert_reac += Math.Abs(sr.Max_Reaction); ;
                tot_left_Mx += sr.Max_Mx;
                tot_left_Mz += sr.Max_Mz;
                list_arr.Add(string.Format(format, sr.JointNo, Math.Abs(sr.Max_Reaction), sr.Max_Mx, sr.Max_Mz));
            }

            list_arr.Add("");

            //Chiranjit [2012 07 06]
            //Change unit kN to Ton
            //tot_left_vert_reac /= 10.0;
            //tot_left_Mx /= 10.0;
            //tot_left_Mz /= 10.0;

            txt_left_total_vert_reac.Text = tot_left_vert_reac.ToString("0.000");
            txt_left_total_Mx.Text = tot_left_Mx.ToString("0.000");
            txt_left_total_Mz.Text = tot_left_Mz.ToString("0.000");
            list_arr.Add(string.Format(format, "TOTAL", tot_left_vert_reac, tot_left_Mx, tot_left_Mz));
            list_arr.Add("");

            mlist = new MyList(MyList.RemoveAllSpaces(Right_support), ' ');
            list_arr.Add("RIGHT END");
            list_arr.Add("--------");
            for (int i = 0; i < mlist.Count; i++)
            {
                sr = support_reactions.Get_Data(mlist.GetInt(i));
                dgv_right_des_frc.Rows.Add(sr.JointNo, Math.Abs(sr.Max_Reaction), sr.Max_Mx, sr.Max_Mz);

                tot_right_vert_reac += Math.Abs(sr.Max_Reaction);
                tot_right_Mx += sr.Max_Mx;
                tot_right_Mz += sr.Max_Mz;
                list_arr.Add(string.Format(format, sr.JointNo, Math.Abs(sr.Max_Reaction), sr.Max_Mx, sr.Max_Mz));
            }
            list_arr.Add("");

            //Chiranjit [2012 07 06]
            //Change unit kN to Ton
            //tot_right_vert_reac /= 10.0;
            //tot_right_Mx /= 10.0;
            //tot_right_Mz /= 10.0;
            txt_right_total_vert_reac.Text = tot_right_vert_reac.ToString("0.000");
            txt_right_total_Mx.Text = tot_right_Mx.ToString("0.000");
            txt_right_total_Mz.Text = tot_right_Mz.ToString("0.000");
            list_arr.Add("");


            list_arr.Add(string.Format(format, "TOTAL", tot_right_vert_reac, tot_right_Mx, tot_right_Mz));
            list_arr.Add("");


            //txt_both_ends_total.Text = (tot_left_vert_reac + tot_right_vert_reac).ToString("0.000");
            list_arr.Add("");
            //list_arr.Add("BOTH ENDS TOTAL VERTICAL REACTION = " + txt_both_ends_total.Text + " Ton");


            txt_final_vert_reac.Text = (MyList.StringToDouble(txt_dead_vert_reac_ton.Text, 0.0) * DL_Factor +
                (tot_right_vert_reac + tot_left_vert_reac) * LL_Factor).ToString("0.000");

            txt_final_vert_rec_kN.Text = ((MyList.StringToDouble(txt_final_vert_reac.Text, 0.0)) * 10).ToString("0.000");


            list_arr.Add("");
            list_arr.Add("");
            list_arr.Add("FINAL DESIGN FORCES");
            list_arr.Add("-------------------");
            list_arr.Add("");
            list_arr.Add("TOTAL VERTICAL REACTION = " + txt_final_vert_reac.Text + " Ton" + "    =  " + txt_final_vert_rec_kN.Text + " kN");

            txt_final_Mx.Text = ((tot_left_Mx > tot_right_Mx) ? tot_left_Mx : tot_right_Mx).ToString("0.000");
            txt_max_Mx_kN.Text = (MyList.StringToDouble(txt_final_Mx.Text, 0.0) * 10.0).ToString("f3");


            list_arr.Add("        MAXIMUM  MX     = " + txt_final_Mx.Text + " Ton-M" + "  =  " + txt_max_Mx_kN.Text + " kN-m");
            txt_final_Mz.Text = ((tot_left_Mz > tot_right_Mz) ? tot_left_Mz : tot_right_Mz).ToString("0.000");
            txt_max_Mz_kN.Text = (MyList.StringToDouble(txt_final_Mz.Text, 0.0) * 10.0).ToString("f3");

            list_arr.Add("        MAXIMUM  MZ     = " + txt_final_Mz.Text + " Ton-M" + "  =  " + txt_max_Mz_kN.Text + " kN-m");
            list_arr.Add("");
            list_arr.Add("");
            list_arr.Add("                  ========================================");
            list_arr.Add("                  END OF DESIGN FORCES FOR RCC PIER DESIGN");
            list_arr.Add("                  ========================================");
            list_arr.Add("");





            //File.WriteAllLines(analysis_rep, list_arr.ToArray());

            list_arr.Clear();
            list_arr.Add("W1=" + txt_final_vert_rec_kN.Text);
            list_arr.Add("Mx1=" + txt_max_Mx_kN.Text);
            list_arr.Add("Mz1=" + txt_max_Mz_kN.Text);
            string f_path = Path.Combine(Path.GetDirectoryName(analysis_rep), "Forces.fil");
            File.WriteAllLines(f_path, list_arr.ToArray());
            Environment.SetEnvironmentVariable("PIER", f_path);
        }
        #endregion frm_Pier_ViewDesign_Forces



        RccDeckSlab Deck = null;
        public List<string> Results { get; set; }

        IApplication iApp = null;

        bool IsCreate_Data = true;
        public frm_PSC_Box_Girder(IApplication app)
        {
            InitializeComponent();
            iApp = app;
            user_path = iApp.LastDesignWorkingFolder;
            this.Text = Title + " : " + MyList.Get_Modified_Path(user_path);

            Results = new List<string>();

            Segment_Girder = new PSC_Box_Segmental_Girder(app);

            Box_Forces = new PSC_Box_Forces();
            All_Analysis = new List<BridgeMemberAnalysis>();

        }

        public string Worksheet_Folder
        {
            get
            {
                if (Path.GetFileName(user_path) == Project_Name)
                {
                    if (Directory.Exists(Path.Combine(user_path, "Worksheet_Design")) == false)
                        Directory.CreateDirectory(Path.Combine(user_path, "Worksheet_Design"));
                }
                return Path.Combine(user_path, "Worksheet_Design");
            }
        }
        public string Drawing_Folder
        {
            get
            {
                //if (Directory.Exists(Path.Combine(user_path, "DRAWINGS")) == false)
                //    Directory.CreateDirectory(Path.Combine(user_path, "DRAWINGS"));
                //return Path.Combine(user_path, "DRAWINGS");


                if (Path.GetFileName(user_path) == Project_Name)
                {
                    if (Directory.Exists(Path.Combine(user_path, "DRAWINGS")) == false)
                        Directory.CreateDirectory(Path.Combine(user_path, "DRAWINGS"));
                }
                return Path.Combine(user_path, "DRAWINGS");
            }
        }

        public string user_path
        {
            get
            {
                return iApp.user_path;
            }

            set
            {
                iApp.user_path = value;
            }
        }

        public string Input_File
        {
            get
            {
                if (Directory.Exists(user_path))
                {
                    //return Path.Combine(Path.Combine(user_path, "Live Load Analysis"), "Input_Data_LL.txt");
                    return Path.Combine(user_path, "INPUT_DATA.TXT");
                }
                return "";
                //return "";
            }
        }

        public string Input_File_LL
        {
            get
            {
                if (Directory.Exists(user_path))
                {
                    if (Path.GetFileName(user_path) != "Live Load Analysis")
                        if (!Directory.Exists(Path.Combine(user_path, "Live Load Analysis")))
                            Directory.CreateDirectory(Path.Combine(user_path, "Live Load Analysis"));


                    return Path.Combine(Path.Combine(user_path, "Live Load Analysis"), "Input_Data_LL.txt");
                    //return Path.Combine(user_path, "Input_Data_LL.txt");
                }
                return "";
                //return "";
            }
        }
        public string Input_File_DL
        {
            get
            {
                if (Directory.Exists(user_path))
                {
                    if (Path.GetFileName(user_path) != "Dead Load Analysis")
                        if (!Directory.Exists(Path.Combine(user_path, "Dead Load Analysis")))
                            Directory.CreateDirectory(Path.Combine(user_path, "Dead Load Analysis"));


                    return Path.Combine(Path.Combine(user_path, "Dead Load Analysis"), "Input_Data_DL.txt");
                    //return Path.Combine(user_path, "Input_Data_DL.txt");
                }

                //if (Directory.Exists(user_path))
                //    return Path.Combine(user_path, "Input_Data_DL.txt");
                return "";
            }
        }

        public string Analysis_Report_DL
        {
            get
            {
                if (Directory.Exists(user_path))
                    return Path.Combine(Path.GetDirectoryName(Input_File_DL), "ANALYSIS_REP.TXT");
                //return Path.Combine(Path.GetDirectoryName(Input_File_DL), "ANALYSIS_REP_DL.TXT");
                return "";
            }
        }
        public string Analysis_Report_LL
        {
            get
            {
                if (Directory.Exists(user_path))
                    return Path.Combine(Path.GetDirectoryName(Input_File_LL), "ANALYSIS_REP.TXT");
                //return Path.Combine(Path.GetDirectoryName(Input_File_LL), "ANALYSIS_REP_LL.TXT");
                return "";
            }
        }


        #region Deck Analysis Form Events
        private void Default_Input_Data(object sender, EventArgs e)
        {
            Deck_Analysis_DL.Joints = new JointNodeCollection();
            Deck_Analysis_DL.MemColls = new MemberCollection();
            Button_Enable_Disable();

            dgv_Ana_live_load.Rows.Add("TYPE 1 : IRCCLASSA", -18.8, 0, 2.75, 0.2);
            dgv_Ana_live_load.Rows.Add("TYPE 1 : IRCCLASSA", -18.8, 0, 6.25, 0.2);
            dgv_Ana_live_load.Rows.Add("TYPE 1 : IRCCLASSA", -18.8, 0, 9.75, 0.2);
        }


        private bool Check_Project_Folder()
        {

            if (Path.GetFileName(user_path) != Project_Name)
            {
                MessageBox.Show(this, "New Project is not created. Please create New Project.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            return true;

        }

        private void btn_Ana_create_data_Click(object sender, EventArgs e)
        {
            try
            {
                if (!Check_Project_Folder()) return;

                Show_Section_Result();

                if (Path.GetFileName(user_path) != Project_Name)
                {
                    Create_Project();
                }


                if (!Directory.Exists(user_path))
                {
                    Directory.CreateDirectory(user_path);
                }
                Write_All_Data();
                Analysis_Initialize_InputData();
                Create_Data_LL(Input_File);
                if (iApp.DesignStandard == eDesignStandard.IndianStandard)
                    Create_Data_LL(Input_File_LL);
                else if (iApp.DesignStandard == eDesignStandard.BritishStandard)
                {
                    Create_Data_LL_British(Input_File_LL);
                }
                Create_Data_DL(Input_File_DL);
                MessageBox.Show(this, "Dead Load and Live Load Analysis Input Data files are Created in Working folder.");
                cmb_long_open_file.SelectedIndex = 0;
                Button_Enable_Disable();
            }
            catch (Exception ex) { }
        }


        private void btn_Ana_LL_process_analysis_Click(object sender, EventArgs e)
        {
            string flPath = Deck_Analysis_LL.Input_File;
            string ana_rep_file = "";
            int c = 0;

            Write_All_Data();
            //groupBox25.Visible = true;

            ProcessCollection pcol = new ProcessCollection();

            ProcessData pd = new ProcessData();


            if (iApp.DesignStandard == eDesignStandard.IndianStandard)
            {
                flPath = Deck_Analysis_LL.Input_File;
                pd = new ProcessData();
                pd.Process_File_Name = flPath;
                pd.Process_Text = "PROCESS ANALYSIS FOR " + Path.GetFileNameWithoutExtension(flPath).ToUpper();
                pcol.Add(pd);

                flPath = Deck_Analysis_DL.Input_File;
                pd = new ProcessData();
                pd.Process_File_Name = flPath;
                pd.Process_Text = "PROCESS ANALYSIS FOR " + Path.GetFileNameWithoutExtension(flPath).ToUpper();
                pcol.Add(pd);
            }
            else if (iApp.DesignStandard == eDesignStandard.BritishStandard)
            {
                iApp.Progress_Works.Clear();
                for (int i = 0; i < (all_loads.Count + 1); i++)
                {
                    if (i == 0)
                        flPath = Deck_Analysis_DL.Input_File;
                    else
                        flPath = Get_Live_Load_Analysis_Input_File(i);


                    pd = new ProcessData();
                    pd.Process_File_Name = flPath;
                    pd.Process_Text = "PROCESS ANALYSIS FOR " + Path.GetFileNameWithoutExtension(flPath).ToUpper();
                    pcol.Add(pd);


                    iApp.Progress_Works.Add("Reading Analysis Data from " + Path.GetFileNameWithoutExtension(flPath) + " File");
                    //flPath = Deck_Analysis_DL.Input_File;
                    //pd = new ProcessData();
                    //pd.Process_File_Name = flPath;
                    //pd.Process_Text = "PROCESS ANALYSIS FOR " + Path.GetFileNameWithoutExtension(flPath).ToUpper();
                    //pcol.Add(pd);
                }
            }


            if (!iApp.Show_and_Run_Process_List(pcol))
            {
                Button_Enable_Disable();
                return;
            }


            if (iApp.DesignStandard == eDesignStandard.IndianStandard)
                Show_Member_Forces_Indian(ana_rep_file);
            else
                Show_Member_Forces_British();

            Save_FormRecord.Write_All_Data(this, user_path);


            #region Load BM-SF
            uC_BoxGirder1.txt_BM_DL_Supp.Text = txt_Ana_dead_inner_long_support_moment.Text;
            uC_BoxGirder1.txt_BM_DL_Deff.Text = txt_Ana_dead_inner_long_deff_moment.Text;
            uC_BoxGirder1.txt_BM_DL_L8.Text = txt_Ana_dead_inner_long_L8_moment.Text;
            uC_BoxGirder1.txt_BM_DL_L4.Text = txt_Ana_dead_inner_long_L4_moment.Text;
            uC_BoxGirder1.txt_BM_DL_3L8.Text = txt_Ana_dead_inner_long_3L_8_moment.Text;
            uC_BoxGirder1.txt_BM_DL_Mid.Text = txt_Ana_dead_inner_long_L2_moment.Text;



            uC_BoxGirder1.txt_SF_DL_Supp.Text = txt_Ana_dead_inner_long_support_shear.Text;
            uC_BoxGirder1.txt_SF_DL_Deff.Text = txt_Ana_dead_inner_long_deff_shear.Text;
            uC_BoxGirder1.txt_SF_DL_L8.Text = txt_Ana_dead_inner_long_L8_shear.Text;
            uC_BoxGirder1.txt_SF_DL_L4.Text = txt_Ana_dead_inner_long_L4_shear.Text;
            uC_BoxGirder1.txt_SF_DL_3L8.Text = txt_Ana_dead_inner_long_3L_8_shear.Text;
            uC_BoxGirder1.txt_SF_DL_Mid.Text = txt_Ana_dead_inner_long_L2_shear.Text;


            uC_BoxGirder1.txt_BM_LL_Supp.Text = txt_Ana_live_inner_long_support_moment.Text;
            uC_BoxGirder1.txt_BM_LL_Deff.Text = txt_Ana_live_inner_long_deff_moment.Text;
            uC_BoxGirder1.txt_BM_LL_L8.Text = txt_Ana_live_inner_long_L8_moment.Text;
            uC_BoxGirder1.txt_BM_LL_L4.Text = txt_Ana_live_inner_long_L4_moment.Text;
            uC_BoxGirder1.txt_BM_LL_3L8.Text = txt_Ana_live_inner_long_3L_8_moment.Text;
            uC_BoxGirder1.txt_BM_LL_Mid.Text = txt_Ana_live_inner_long_L2_moment.Text;



            uC_BoxGirder1.txt_SF_LL_Supp.Text = txt_Ana_live_inner_long_support_shear.Text;
            uC_BoxGirder1.txt_SF_LL_Deff.Text = txt_Ana_live_inner_long_deff_shear.Text;
            uC_BoxGirder1.txt_SF_LL_L8.Text = txt_Ana_live_inner_long_L8_shear.Text;
            uC_BoxGirder1.txt_SF_LL_L4.Text = txt_Ana_live_inner_long_L4_shear.Text;
            uC_BoxGirder1.txt_SF_LL_3L8.Text = txt_Ana_live_inner_long_3L_8_shear.Text;
            uC_BoxGirder1.txt_SF_LL_Mid.Text = txt_Ana_live_inner_long_L2_shear.Text;


            #endregion Load BM-SF

        }

        private void Show_Member_Forces_Indian(string ana_rep_file)
        {

            List<string> Work_List = new List<string>();

            //Work_List.Add("Reading Analysis Data from Total Load Analysis Report File (ANALYSIS_REP.TXT)");
            //Work_List.Add("Set Structure Geometry for Total Load Analysis");
            //Work_List.Add("Reading Bending Moment & Shear Force from Total Load Analysis Result");


            Work_List.Add("Reading Analysis Data from Live Load Analysis Report File");
            //Work_List.Add("Set Structure Geometry for Live Load Analysis");
            //Work_List.Add("Reading Bending Moment & Shear Force from Live Load Analysis Result");


            Work_List.Add("Reading Analysis Data from Dead Load Analysis Report File");

            //Work_List.Add("Set Structure Geometry for Dead Load Analysis");
            //Work_List.Add("Reading Bending Moment & Shear Force from Dead Load Analysis Result");

            //Work_List.Add("Reading support reaction forces from Total Load Analysis Report");
            //Work_List.Add("Reading support reaction forces from Live Load Analysis Report");
            //Work_List.Add("Reading support reaction forces from Dead Load Analysis Report");


            iApp.Progress_Works = new ProgressList(Work_List);


            ana_rep_file = File.Exists(Deck_Analysis_LL.Analysis_Report) ? Deck_Analysis_LL.Analysis_Report : Analysis_Report_LL;
            if (File.Exists(ana_rep_file))
            {
                Deck_Analysis_LL.Bridge_Analysis = null;
                Deck_Analysis_LL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, ana_rep_file);
                Show_Moment_Shear_LL();
            }

            ana_rep_file = File.Exists(Deck_Analysis_DL.Analysis_Report) ? Deck_Analysis_DL.Analysis_Report : Analysis_Report_DL;

            if (File.Exists(ana_rep_file))
            {
                Deck_Analysis_DL.Bridge_Analysis = null;
                Deck_Analysis_DL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, ana_rep_file);
                Show_Moment_Shear_DL();
            }

            Show_ReactionForces();



            grb_create_input_data.Enabled = rbtn_Ana_DL_create_analysis_file.Checked;
            grb_Ana_DL_select_analysis.Enabled = !rbtn_Ana_DL_create_analysis_file.Checked;

            grb_create_input_data.Enabled = !rbtn_Ana_DL_select_analysis_file.Checked;
            grb_Ana_DL_select_analysis.Enabled = rbtn_Ana_DL_select_analysis_file.Checked;

            iApp.Save_Form_Record(this, user_path);

            Button_Enable_Disable();


            iApp.Progress_Works.Clear();
        }

        private void Show_Member_Forces_British()
        {

            //List<string> Work_List = new List<string>();
            //Work_List.Add("Reading Analysis Data from Live Load Analysis Report File");
            //Work_List.Add("Reading Analysis Data from Dead Load Analysis Report File");

            //iApp.Progress_Works = new ProgressList(Work_List);


            string ana_rep_file = "";

            All_Analysis.Clear();
            for (int i = 0; i < all_loads.Count + 1; i++)
            {
                if (i == 0)
                    ana_rep_file = Deck_Analysis_DL.Input_File;
                else
                    ana_rep_file = Get_Live_Load_Analysis_Input_File(i);

                ana_rep_file = MyList.Get_Analysis_Report_File(ana_rep_file);

                if (File.Exists(ana_rep_file))
                {
                    All_Analysis.Add(new BridgeMemberAnalysis(iApp, ana_rep_file));
                }
            }
            Deck_Analysis_DL.Bridge_Analysis = All_Analysis[0];
            Show_Moment_Shear_DL();

            Show_Moment_Shear_LL_British();


            Show_ReactionForces();
        }

        void Show_ReactionForces()
        {
            #region Chiranjit [2012 10 31]

            string s1 = "";
            string s2 = "";
            try
            {
                for (int i = 0; i < Deck_Analysis_LL.Bridge_Analysis.Supports.Count; i++)
                {
                    if (i < Deck_Analysis_LL.Bridge_Analysis.Supports.Count / 2)
                    {
                        if (i == Deck_Analysis_LL.Bridge_Analysis.Supports.Count / 2 - 1)
                        {
                            s1 += Deck_Analysis_LL.Bridge_Analysis.Supports[i].NodeNo;
                        }
                        else
                            s1 += Deck_Analysis_LL.Bridge_Analysis.Supports[i].NodeNo + ",";
                    }
                    else
                    {
                        if (i == Deck_Analysis_LL.Bridge_Analysis.Supports.Count - 1)
                        {
                            s2 += Deck_Analysis_LL.Bridge_Analysis.Supports[i].NodeNo;
                        }
                        else
                            s2 += Deck_Analysis_LL.Bridge_Analysis.Supports[i].NodeNo + ",";
                    }
                }
            }
            catch (Exception ex) { }
            //double BB = MyList.StringToDouble(txt_Abut_B.Text, 8.5);
            double BB = B;


            frm_ViewForces(BB, Deck_Analysis_DL.Analysis_Report, Deck_Analysis_LL.Bridge_Analysis.Analysis_File, (s1 + " " + s2));
            frm_ViewForces_Load();

            frm_Pier_ViewDesign_Forces(Deck_Analysis_LL.Bridge_Analysis.Analysis_File, s1, s2);
            frm_ViewDesign_Forces_Load();






            //Chiranjit [2012 11 01]
            txt_ana_DLSR.Text = Total_DeadLoad_Reaction;
            txt_ana_LLSR.Text = Total_LiveLoad_Reaction;

            txt_ana_TSRP.Text = txt_final_vert_rec_kN.Text;
            txt_ana_MSLD.Text = txt_max_Mx_kN.Text;
            txt_ana_MSTD.Text = txt_max_Mz_kN.Text;



            txt_RCC_Pier_W1_supp_reac.Text = txt_final_vert_rec_kN.Text;
            txt_RCC_Pier_Mx1.Text = txt_max_Mx_kN.Text;
            txt_RCC_Pier_Mz1.Text = txt_max_Mz_kN.Text;

            txt_pier_2_P3.Text = Total_LiveLoad_Reaction;

            txt_pier_2_P2.Text = Total_DeadLoad_Reaction;
            #endregion Chiranjit [2012 10 31]

        }


        private void btn_Ana_add_load_Click(object sender, EventArgs e)
        {
            try
            {
                dgv_Ana_live_load.Rows.Add(cmb_Ana_load_type.Text, txt_Ana_X.Text, txt_Ana_DL_Y.Text, txt_Ana_DL_Z.Text, txt_XINCR.Text, txt_Load_Impact.Text);
            }
            catch (Exception ex) { }
        }

        private void Write_Ana_Load_Data(bool IsLiveLoad)
        {

            string file_name = (IsLiveLoad) ? Deck_Analysis_LL.Input_File : Deck_Analysis_DL.Input_File;

            if (!File.Exists(file_name)) return;


            List<string> inp_file_cont = new List<string>(File.ReadAllLines(file_name));
            string kStr = "";
            int indx = -1;
            bool flag = false;
            MyList mlist = null;
            int i = 0;

            bool isMoving_load = false;
            for (i = 0; i < inp_file_cont.Count; i++)
            {
                kStr = MyList.RemoveAllSpaces(inp_file_cont[i].ToUpper());
                mlist = new MyList(kStr, ' ');

                if (kStr.Contains("LOAD GEN"))
                    isMoving_load = true;

                if (mlist.StringList[0].StartsWith("LOAD") && flag == false)
                {
                    if (indx == -1)
                        indx = i;
                    flag = true;
                }
                if (kStr.Contains("ANALYSIS") || kStr.Contains("PRINT"))
                {
                    flag = false;
                }
                if (flag)
                {
                    inp_file_cont.RemoveAt(i);
                    i--;
                }

            }

            List<string> load_lst = new List<string>();

            string s = " DL";
            s += (!IsLiveLoad ? " + SIDL " : "");
            //s += (IsLiveLoad ? " + LL " : "");

            if (!IsLiveLoad)
            {
                load_lst.AddRange(txt_Ana_LL_member_load.Lines);
                if (dgv_Ana_live_load.RowCount != 0)
                {
                    if (!File.Exists(Deck_Analysis_DL.LiveLoad_File))
                    {
                        MessageBox.Show(this, "Load data file \"LL.TXT\" not found in working folder " + user_path);
                    }
                }
            }
            else
            {
                load_lst.Add("LOAD    1   " + s);
                load_lst.Add("MEMBER LOAD");
                load_lst.Add("1 TO 220 UNI GY -0.001");
                Deck_Analysis_LL.Live_Load_List = LoadData.GetLiveLoads(Path.Combine(Path.GetDirectoryName(file_name), "ll.txt"));
                Deck_Analysis_LL.LoadReadFromGrid(dgv_Ana_live_load);
                if (dgv_Ana_live_load.RowCount != 0)
                    load_lst.AddRange(Get_MovingLoad_Data(Deck_Analysis_LL.Live_Load_List));
                //inp_file_cont.InsertRange(indx, );
            }
            inp_file_cont.InsertRange(indx, load_lst);

            inp_file_cont.Remove("");

            File.WriteAllLines(file_name, inp_file_cont.ToArray());
            //MessageBox.Show(this, "Load data is added in file " + file_name, "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }

        private void rbtn_Ana_select_analysis_file_CheckedChanged(object sender, EventArgs e)
        {
            //grb_create_input_data.Enabled = rbtn_create_analysis_file.Checked;
            grb_Ana_DL_select_analysis.Enabled = rbtn_Ana_DL_select_analysis_file.Checked;
            btn_Ana_DL_create_data.Enabled = rbtn_Ana_DL_create_analysis_file.Checked;
            Button_Enable_Disable();
        }
        private void txt_Ana_custom_LL_Xcrmt_TextChanged(object sender, EventArgs e)
        {
        }
        public void Show_ReadMemberLoad_Old(string file_name)
        {

            if (!File.Exists(file_name)) return;


            List<LoadData> lds = LoadData.GetLiveLoads(Path.Combine(Path.GetDirectoryName(file_name), "LL.txt"));


            List<string> list_member_load = new List<string>();
            List<string> inp_file_cont = new List<string>(File.ReadAllLines(file_name));
            string kStr = "";
            int indx = -1;
            bool flag = false;
            MyList mlist = null;
            int i = 0;
            bool mov_flag = false;
            bool isMoving_load = false;
            for (i = 0; i < inp_file_cont.Count; i++)
            {
                kStr = MyList.RemoveAllSpaces(inp_file_cont[i].ToUpper());
                mlist = new MyList(kStr, ' ');

                if (kStr.Contains("LOAD GEN"))
                {
                    isMoving_load = true;
                    if (mlist.Count == 3) txt_LL_load_gen.Text = mlist.StringList[2];
                    dgv_Ana_live_load.Rows.Clear();
                    //continue;
                }

                if (kStr.Contains("DEFINE MOV"))
                {
                    mov_flag = false;
                    //continue;
                }


                if (isMoving_load)
                {
                    try
                    {
                        LoadData ld = LoadData.Parse(kStr);

                        for (int c = 0; c < lds.Count; c++)
                        {
                            if (lds[c].TypeNo == ld.TypeNo)
                            {
                                ld.Code = lds[c].Code;
                                break;
                            }
                        }
                        dgv_Ana_live_load.Rows.Add(ld.TypeNo + " : " + ld.Code,
                            ld.X.ToString("0.000"), ld.Y.ToString("0.000"), ld.Z.ToString("0.000"), ld.XINC.ToString("0.000"));

                    }
                    catch (Exception ex) { }
                }

                if (mlist.StringList[0].StartsWith("LOAD") && flag == false)
                {
                    if (indx == -1)
                        indx = i;
                    flag = true;
                    mov_flag = true;
                    continue;
                }
                if (mlist.StringList[0].StartsWith("MEMBER LOAD") && flag == false)
                {
                    if (indx == -1)
                        indx = i;
                    flag = true;
                    mov_flag = true;
                    continue;
                }
                if (kStr.Contains("ANALYSIS") || kStr.Contains("PRINT"))
                {
                    flag = false;
                    mov_flag = false;
                }
                if (flag)
                {
                    if (mov_flag)
                    {
                        list_member_load.Add(inp_file_cont[i]);
                    }
                    inp_file_cont.RemoveAt(i);
                    i--;
                }
            }
            txt_Ana_LL_member_load.Lines = list_member_load.ToArray();
        }



        public void Show_ReadMemberLoad(string file_name, bool IsDeadLoad)
        {

            if (!File.Exists(file_name)) return;


            List<LoadData> lds = LoadData.GetLiveLoads(Path.Combine(Path.GetDirectoryName(file_name), "LL.txt"));

            List<string> list_member_load = new List<string>();
            List<string> inp_file_cont = new List<string>(File.ReadAllLines(file_name));
            string kStr = "";
            int indx = -1;
            bool flag = false;
            MyList mlist = null;
            int i = 0;
            bool mov_flag = false;
            bool isMoving_load = false;

            Hashtable ht_impact = new Hashtable();
            bool is_def_load = false;
            for (i = 0; i < inp_file_cont.Count; i++)
            {
                kStr = MyList.RemoveAllSpaces(inp_file_cont[i].ToUpper());
                mlist = new MyList(kStr, ' ');

                if (kStr.Contains("LOAD GEN"))
                {
                    is_def_load = false;
                    isMoving_load = true;
                    if (mlist.Count == 3) txt_LL_load_gen.Text = mlist.StringList[2];
                    dgv_Ana_live_load.Rows.Clear();
                    continue;
                }

                if (kStr.Contains("DEFINE MOV"))
                {
                    is_def_load = true;
                    mov_flag = false;
                    //continue;
                }
                if (kStr.StartsWith("PRINT") || kStr.StartsWith("PERFO"))
                {
                    is_def_load = false;
                    mov_flag = false;
                    isMoving_load = false;
                    //continue;
                }
                else if (is_def_load)
                {
                    try
                    {
                        ht_impact.Add(mlist[2], mlist.GetDouble(3));
                    }
                    catch (Exception ex) { }
                }


                if (isMoving_load)
                {
                    try
                    {
                        LoadData ld = LoadData.Parse(kStr);
                        for (int c = 0; c < lds.Count; c++)
                        {
                            if (lds[c].TypeNo == ld.TypeNo)
                            {
                                ld.Code = lds[c].Code;
                                break;
                            }
                        }
                        try
                        {
                            ld.ImpactFactor = (double)ht_impact[ld.Code];
                        }
                        catch (Exception ex) { }
                        dgv_Ana_live_load.Rows.Add(ld.TypeNo + " : " + ld.Code,
                            ld.X.ToString("0.000"), ld.Y.ToString("0.000"), ld.Z.ToString("0.000"), ld.XINC.ToString("0.000"), ld.ImpactFactor.ToString("0.000"));

                    }
                    catch (Exception ex) { }
                }

                if (mlist.StringList[0].StartsWith("LOAD") && flag == false)
                {
                    if (indx == -1)
                        indx = i;
                    flag = true;
                    mov_flag = true;
                    i++;
                    continue;
                }
                if (mlist.StringList[0].StartsWith("MEMBER LOAD") && flag == false)
                {
                    if (indx == -1)
                        indx = i;
                    flag = true;
                    mov_flag = true;
                    continue;
                }
                if (kStr.Contains("ANALYSIS") || kStr.Contains("PRINT"))
                {
                    flag = false;
                    mov_flag = false;
                }
                if (flag)
                {
                    if (mov_flag)
                    {
                        list_member_load.Add(inp_file_cont[i]);
                    }
                    inp_file_cont.RemoveAt(i);
                    i--;
                }
            }
            if (IsDeadLoad)
                txt_Ana_LL_member_load.Lines = list_member_load.ToArray();


        }


        public void Show_LoadGeneration(string file_name)
        {

            if (!File.Exists(file_name)) return;
            List<LoadData> lds = LoadData.GetLiveLoads(Path.Combine(Path.GetDirectoryName(file_name), "LL.txt"));

            //iApp.LiveLoads.Fill_Combo(ref cmb_Ana_load_type);

            List<string> list_member_load = new List<string>();
            List<string> inp_file_cont = new List<string>(File.ReadAllLines(file_name));
            string kStr = "";
            int indx = -1;
            bool flag = false;
            MyList mlist = null;
            int i = 0;
            bool mov_flag = false;
            bool isMoving_load = false;

            Hashtable ht_impact = new Hashtable();
            bool is_def_load = false;
            for (i = 0; i < inp_file_cont.Count; i++)
            {
                kStr = MyList.RemoveAllSpaces(inp_file_cont[i].ToUpper());
                mlist = new MyList(kStr, ' ');

                if (kStr.Contains("LOAD GEN"))
                {
                    isMoving_load = true;
                    is_def_load = false;
                    if (mlist.Count == 3) txt_LL_load_gen.Text = mlist.StringList[2];
                    dgv_Ana_live_load.Rows.Clear();
                    continue;
                }


                if (kStr.Contains("DEFINE MOV"))
                {
                    mov_flag = false;
                    is_def_load = true;

                    //continue;
                }
                if (kStr.StartsWith("PRINT") || kStr.StartsWith("PERFO"))
                {
                    is_def_load = false;
                    mov_flag = false;
                    isMoving_load = false;
                    //continue;
                }
                else if (is_def_load)
                {
                    try
                    {
                        ht_impact.Add(mlist[2], mlist.GetDouble(3));
                    }
                    catch (Exception ex) { }
                }

                if (isMoving_load)
                {
                    try
                    {
                        LoadData ld = LoadData.Parse(kStr);
                        for (int c = 0; c < lds.Count; c++)
                        {
                            if (lds[c].TypeNo == ld.TypeNo)
                            {
                                ld.Code = lds[c].Code;
                                break;
                            }
                        }
                        try
                        {
                            ld.ImpactFactor = (double)ht_impact[ld.Code];
                        }
                        catch (Exception ex) { }
                        dgv_Ana_live_load.Rows.Add(ld.TypeNo + " : " + ld.Code,
                            ld.X.ToString("0.000"), ld.Y.ToString("0.000"), ld.Z.ToString("0.000"), ld.XINC.ToString("0.000"), ld.ImpactFactor.ToString("0.000"));
                    }
                    catch (Exception ex) { }
                }

                if (mlist.StringList[0].StartsWith("LOAD") && flag == false)
                {
                    if (indx == -1)
                        indx = i;
                    flag = true;
                    mov_flag = true;
                    continue;
                }
                if (mlist.StringList[0].StartsWith("MEMBER LOAD") && flag == false)
                {
                    if (indx == -1)
                        indx = i;
                    flag = true;
                    mov_flag = true;
                    continue;
                }
                if (kStr.Contains("ANALYSIS") || kStr.Contains("PRINT"))
                {
                    flag = false;
                    mov_flag = false;
                }
                if (flag)
                {
                    if (mov_flag)
                    {
                        list_member_load.Add(inp_file_cont[i]);
                    }
                    inp_file_cont.RemoveAt(i);
                    i--;
                }
            }
        }
        public string Analysis_Path
        {
            get
            {

                if (Directory.Exists(Path.Combine(iApp.LastDesignWorkingFolder, Title)))
                    return Path.Combine(iApp.LastDesignWorkingFolder, Title);

                return iApp.LastDesignWorkingFolder;

            }
        }

        private void btn_Ana_browse_input_file_Click(object sender, EventArgs e)
        {

            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Filter = "Text File (*.txt)|*.txt";
                ofd.InitialDirectory = Analysis_Path;
                //ofd.InitialDirectory = user_path;
                if (ofd.ShowDialog() != DialogResult.Cancel)
                {
                    IsCreate_Data = false;
                    //Show_ReadMemberLoad(ofd.FileName);

                    string chk_file = Path.Combine(Path.GetDirectoryName(ofd.FileName), "INPUT_DATA.TXT");

                    if (!File.Exists(chk_file)) chk_file = ofd.FileName;
                    //Read_All_Data();
                    Set_Segment_Data();
                    Open_AnalysisFile(chk_file);

                    //Chiranjit [2013 04 26]
                    iApp.Read_Form_Record(this, user_path);

                    Set_Box_Forces();
                    Set_Segment_Data();
                    Segment_Girder.FilePath = user_path;
                    rcc_pier.FilePath = user_path;

                    txt_Ana_analysis_file.Text = chk_file;
                    MessageBox.Show("Data Loaded successfully.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    //Chiranjit [2012 11 01]
                    //Show_ReactionForces();



                    Button_Enable_Disable();

                    //Chiranjit [2012 12 18]

                    //if (File.Exists(Deck_Analysis_DL.Input_File))
                    //{

                    //    Show_ReadMemberLoad(Deck_Analysis_DL.Input_File, true);
                    //}
                    //if (File.Exists(Deck_Analysis_LL.Input_File))
                    //{

                    //    //Show_ReadMemberLoad(Deck_Analysis_LL.Input_File, false);
                    //    Show_LoadGeneration(Deck_Analysis_LL.Input_File);
                    //}
                    //Show_Analysis_Result();
                }
            }



            //Deck_Analysis_LL.Truss_Analysis = new SteelTrussMemberAnalysis(iApp, Deck_Analysis_LL.Input_File);

            //string ll_txt = Deck_Analysis_LL.LiveLoad_File;

            //Deck_Analysis_DL.Live_Load_List = LoadData.GetLiveLoads(ll_txt);

            //if (Deck_Analysis_LL.Live_Load_List == null) return;

            //cmb_Ana_DL_load_type.Items.Clear();
            //for (int i = 0; i < Deck_Analysis_LL.Live_Load_List.Count; i++)
            //{
            //    cmb_Ana_DL_load_type.Items.Add(Deck_Analysis_LL.Live_Load_List[i].TypeNo + " : " + Deck_Analysis_LL.Live_Load_List[i].Code);
            //}
            //if (cmb_Ana_DL_load_type.Items.Count > 0)
            //{
            //    cmb_Ana_DL_load_type.SelectedIndex = cmb_Ana_DL_load_type.Items.Count - 1;
            //    //if (dgv_live_load.RowCount == 0)
            //    //Add_LiveLoad();
            //}




        }

        private void dgv_Ana_SIDL_CellLeave(object sender, DataGridViewCellEventArgs e)
        {
        }

        private void btn_Ana_live_load_remove_Click(object sender, EventArgs e)
        {
            try
            {
                dgv_Ana_live_load.Rows.RemoveAt(dgv_Ana_live_load.CurrentRow.Index);
            }
            catch (Exception ex) { }
        }
        private void btn_Ana_live_load_remove_all_Click(object sender, EventArgs e)
        {
            dgv_Ana_live_load.Rows.Clear();

        }

        private void btn_Ana_View_Moving_Load_Click(object sender, EventArgs e)
        {
            if (File.Exists(Deck_Analysis_DL.Input_File))
                iApp.OpenWork(Deck_Analysis_DL.Input_File, true);
        }

        private void txt_Ana_length_TextChanged(object sender, EventArgs e)
        {
            try
            {
                txt_Ana_X.Text = txt_Ana_L.Text;
                //txt_main_girder_L.Text = txt_Ana_DL_length.Text;
                //txt_S.Text = txt_Ana_DL_length.Text;
            }
            catch (Exception ex) { }
        }

        private void chk_Ana_CheckedChanged(object sender, EventArgs e)
        {
            //grb_Ana_DL_LL.Enabled = chk_Ana_DL_active_LL.Checked;
            //grb_SIDL.Enabled = chk_Ana_DL_active_SIDL.Checked;
        }
        #endregion  Composite Analysis Form Events

        #region Deck Methods

        private void Create_Data_DL(string file_name)
        {

            Deck_Analysis_DL.Input_File = file_name;
            Deck_Analysis_DL.CreateData_DeadLoad();
            Deck_Analysis_DL.WriteData_DeadLoad(Deck_Analysis_DL.Input_File, PSC_SECIONS);
            Write_Ana_Load_Data(false);
            Deck_Analysis_DL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, Deck_Analysis_DL.Input_File);

            string ll_txt = Deck_Analysis_DL.LiveLoad_File;

            Deck_Analysis_DL.Live_Load_List = LoadData.GetLiveLoads(ll_txt);

            if (Deck_Analysis_DL.Live_Load_List == null) return;

            //int prev
            //cmb_Ana_load_type.Items.Clear();
            //for (int i = 0; i < Deck_Analysis_DL.Live_Load_List.Count; i++)
            //{
            //    cmb_Ana_load_type.Items.Add(Deck_Analysis_DL.Live_Load_List[i].TypeNo + " : " + Deck_Analysis_DL.Live_Load_List[i].Code);
            //}
            //if (cmb_Ana_load_type.Items.Count > 0)
            //{
            //    cmb_Ana_load_type.SelectedIndex = cmb_Ana_load_type.Items.Count - 1;
            //    //if (dgv_live_load.RowCount == 0)
            //    //Add_LiveLoad();
            //}
            Button_Enable_Disable();
        }
        private void Create_Data_LL(string file_name)
        {

            Deck_Analysis_LL.Input_File = file_name;
            Deck_Analysis_LL.CreateData();
            Deck_Analysis_LL.WriteData_LiveLoad(Deck_Analysis_LL.Input_File, PSC_SECIONS);
            Write_Ana_Load_Data(true);
            Deck_Analysis_LL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, Deck_Analysis_LL.Input_File);

            string ll_txt = Deck_Analysis_LL.LiveLoad_File;

            Deck_Analysis_DL.Live_Load_List = LoadData.GetLiveLoads(ll_txt);

            if (Deck_Analysis_LL.Live_Load_List == null) return;

            //cmb_Ana_load_type.Items.Clear();
            //for (int i = 0; i < Deck_Analysis_LL.Live_Load_List.Count; i++)
            //{
            //    cmb_Ana_load_type.Items.Add(Deck_Analysis_LL.Live_Load_List[i].TypeNo + " : " + Deck_Analysis_LL.Live_Load_List[i].Code);
            //}
            //if (cmb_Ana_load_type.Items.Count > 0)
            //{
            //    cmb_Ana_load_type.SelectedIndex = cmb_Ana_load_type.Items.Count - 1;
            //    //if (dgv_live_load.RowCount == 0)
            //    //Add_LiveLoad();
            //}
            Button_Enable_Disable();
        }





        void Analysis_Initialize_InputData()
        {
            Deck_Analysis_DL.Length = MyList.StringToDouble(txt_Ana_L.Text, 0.0);
            Deck_Analysis_DL.WidthBridge = MyList.StringToDouble(txt_Ana_B.Text, 0.0);
            Deck_Analysis_DL.WidthCantilever = MyList.StringToDouble(txt_Ana_width_cantilever.Text, 0.0);
            Deck_Analysis_DL.Skew_Angle = MyList.StringToDouble(txt_Ana_skew_angle.Text, 0.0);
            Deck_Analysis_DL.Effective_Depth = MyList.StringToDouble(txt_Ana_DL_eff_depth.Text, 0.0);

            Deck_Analysis_LL.Length = MyList.StringToDouble(txt_Ana_L.Text, 0.0);
            Deck_Analysis_LL.WidthBridge = MyList.StringToDouble(txt_Ana_B.Text, 0.0);
            Deck_Analysis_LL.WidthCantilever = MyList.StringToDouble(txt_Ana_width_cantilever.Text, 0.0);
            Deck_Analysis_LL.Skew_Angle = MyList.StringToDouble(txt_Ana_skew_angle.Text, 0.0);
            Deck_Analysis_LL.Effective_Depth = MyList.StringToDouble(txt_Ana_DL_eff_depth.Text, 0.0);


            Deck_Analysis_LL.Start_Support = Start_Support_Text;
            Deck_Analysis_LL.End_Support = END_Support_Text;

            Deck_Analysis_DL.Start_Support = Start_Support_Text;
            Deck_Analysis_DL.End_Support = END_Support_Text;

        }



        //Chiranjit [2013 04 27]
        void Set_Box_Forces()
        {
            Box_Forces.FRC_LL_Shear[0] = MyList.StringToDouble(txt_Ana_live_inner_long_support_shear.Text, 0.0);
            Box_Forces.FRC_LL_Moment[0] = MyList.StringToDouble(txt_Ana_live_inner_long_support_moment.Text, 0.0);

            Box_Forces.FRC_LL_Shear[1] = MyList.StringToDouble(txt_Ana_live_inner_long_deff_shear.Text, 0.0);
            Box_Forces.FRC_LL_Moment[1] = MyList.StringToDouble(txt_Ana_live_inner_long_deff_moment.Text, 0.0);

            Box_Forces.FRC_LL_Shear[2] = MyList.StringToDouble(txt_Ana_live_inner_long_L8_shear.Text, 0.0);
            Box_Forces.FRC_LL_Moment[2] = MyList.StringToDouble(txt_Ana_live_inner_long_L8_moment.Text, 0.0);

            Box_Forces.FRC_LL_Shear[3] = MyList.StringToDouble(txt_Ana_live_inner_long_L4_shear.Text, 0.0);
            Box_Forces.FRC_LL_Moment[3] = MyList.StringToDouble(txt_Ana_live_inner_long_L4_moment.Text, 0.0);



            Box_Forces.FRC_LL_Shear[4] = MyList.StringToDouble(txt_Ana_live_inner_long_3L_8_shear.Text, 0.0);
            Box_Forces.FRC_LL_Moment[4] = MyList.StringToDouble(txt_Ana_live_inner_long_3L_8_moment.Text, 0.0);


            Box_Forces.FRC_LL_Shear[5] = MyList.StringToDouble(txt_Ana_live_inner_long_L2_shear.Text, 0.0);
            Box_Forces.FRC_LL_Moment[5] = MyList.StringToDouble(txt_Ana_live_inner_long_L2_moment.Text, 0.0);




            Box_Forces.FRC_DL_Shear[0] = MyList.StringToDouble(txt_Ana_dead_inner_long_support_shear.Text, 0.0);
            Box_Forces.FRC_DL_Moment[0] = MyList.StringToDouble(txt_Ana_dead_inner_long_support_moment.Text, 0.0);

            Box_Forces.FRC_DL_Shear[1] = MyList.StringToDouble(txt_Ana_dead_inner_long_deff_shear.Text, 0.0);
            Box_Forces.FRC_DL_Moment[1] = MyList.StringToDouble(txt_Ana_dead_inner_long_deff_moment.Text, 0.0);

            Box_Forces.FRC_DL_Shear[2] = MyList.StringToDouble(txt_Ana_dead_inner_long_L8_shear.Text, 0.0);
            Box_Forces.FRC_DL_Moment[2] = MyList.StringToDouble(txt_Ana_dead_inner_long_L8_moment.Text, 0.0);

            Box_Forces.FRC_DL_Shear[3] = MyList.StringToDouble(txt_Ana_dead_inner_long_L4_shear.Text, 0.0);
            Box_Forces.FRC_DL_Moment[3] = MyList.StringToDouble(txt_Ana_dead_inner_long_L4_moment.Text, 0.0);

            Box_Forces.FRC_DL_Shear[4] = MyList.StringToDouble(txt_Ana_dead_inner_long_3L_8_shear.Text, 0.0);
            Box_Forces.FRC_DL_Moment[4] = MyList.StringToDouble(txt_Ana_dead_inner_long_3L_8_moment.Text, 0.0);

            Box_Forces.FRC_DL_Shear[5] = MyList.StringToDouble(txt_Ana_dead_inner_long_L2_shear.Text, 0.0);
            Box_Forces.FRC_DL_Moment[5] = MyList.StringToDouble(txt_Ana_dead_inner_long_L2_moment.Text, 0.0);


            Box_Forces.FRC_SIDL_Shear[0] = MyList.StringToDouble(txt_Ana_live_outer_long_support_shear.Text, 0.0);
            Box_Forces.FRC_SIDL_Moment[0] = MyList.StringToDouble(txt_Ana_live_outer_long_support_moment.Text, 0.0);

            Box_Forces.FRC_SIDL_Shear[1] = MyList.StringToDouble(txt_Ana_live_outer_long_deff_shear.Text, 0.0);
            Box_Forces.FRC_SIDL_Moment[1] = MyList.StringToDouble(txt_Ana_live_outer_long_deff_moment.Text, 0.0);

            Box_Forces.FRC_SIDL_Shear[2] = MyList.StringToDouble(txt_Ana_live_outer_long_L8_shear.Text, 0.0);
            Box_Forces.FRC_SIDL_Moment[2] = MyList.StringToDouble(txt_Ana_live_outer_long_L8_moment.Text, 0.0);


            Box_Forces.FRC_SIDL_Shear[3] = MyList.StringToDouble(txt_Ana_live_outer_long_L4_shear.Text, 0.0);
            Box_Forces.FRC_SIDL_Moment[3] = MyList.StringToDouble(txt_Ana_live_outer_long_L4_moment.Text, 0.0);


            Box_Forces.FRC_SIDL_Shear[4] = MyList.StringToDouble(txt_Ana_live_outer_long_3L_8_shear.Text, 0.0);
            Box_Forces.FRC_SIDL_Moment[4] = MyList.StringToDouble(txt_Ana_live_outer_long_3L_8_moment.Text, 0.0);

            Box_Forces.FRC_SIDL_Shear[5] = MyList.StringToDouble(txt_Ana_live_outer_long_L2_shear.Text, 0.0);
            Box_Forces.FRC_SIDL_Moment[5] = MyList.StringToDouble(txt_Ana_live_outer_long_L2_moment.Text, 0.0);


            Box_Forces.Set_Absolute();

        }
        void Show_Moment_Shear_LL()
        {

            List<int> _joints = new List<int>();
            int node = 0;
            MaxForce force = new MaxForce();

            MemberCollection mc = new MemberCollection(Deck_Analysis_LL.Bridge_Analysis.Analysis.Members);
            JointNodeCollection jn_col = Deck_Analysis_LL.Bridge_Analysis.Analysis.Joints;


            double L = Deck_Analysis_LL.Bridge_Analysis.Analysis.Length;
            double W = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width;
            double cant_wi = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width_Cantilever;

            //double support = Deck_Analysis_LL.Bridge_Analysis.Supports.Count > 0 ? Deck_Analysis_LL.Bridge_Analysis.Supports[0].X : 0.5;
            double support = Deck_Analysis_LL.Support_Distance;
            support = Deck_Analysis_LL.Support_Distance;


            double eff_d = MyList.StringToDouble(txt_Ana_DL_eff_depth.Text, 0.0);


            double val = L / 2;
            int i = 0;

            List<int> _L2_joints = new List<int>();
            List<int> _L4_joints = new List<int>();
            List<int> _deff_joints = new List<int>();

            List<int> _L8_joints = new List<int>();
            List<int> _3L8_joints = new List<int>();
            List<int> _support_joints = new List<int>();


            for (i = 0; i < Deck_Analysis_LL.Bridge_Analysis.Supports.Count; i++)
            {
                _support_joints.Add(Deck_Analysis_LL.Bridge_Analysis.Supports[i].NodeNo);
                //_support_joints.Add(item.
            }



            List<double> _X_joints = new List<double>();
            List<double> _Z_joints = new List<double>();

            for (i = 0; i < jn_col.Count; i++)
            {
                if (_X_joints.Contains(jn_col[i].X) == false) _X_joints.Add(jn_col[i].X);
                if (_Z_joints.Contains(jn_col[i].Z) == false) _Z_joints.Add(jn_col[i].Z);
            }
            val = -999;


            List<double> _X_min = new List<double>();
            List<double> _X_max = new List<double>();
            double x_max, x_min;
            double vvv = 99999999999999999;
            for (int zc = 0; zc < _Z_joints.Count; zc++)
            {

                x_min = vvv;
                x_max = -vvv;

                for (i = 0; i < jn_col.Count; i++)
                {
                    //if (_X_joints.Contains(jn_col[i].X) == false) _X_joints.Add(jn_col[i].X);
                    //if (_Z_joints.Contains(jn_col[i].Z) == false) _Z_joints.Add(jn_col[i].Z);

                    if (_Z_joints[zc] == jn_col[i].Z)
                    {
                        if (x_min > jn_col[i].X)
                            x_min = jn_col[i].X;
                        if (x_max < jn_col[i].X)
                            x_max = jn_col[i].X;
                    }

                }
                if (x_max != -vvv)
                    _X_max.Add(x_max);
                if (x_min != vvv)
                    _X_min.Add(x_min);
            }

            //val = MyList.StringToDouble(txt_Ana_eff_depth.Text, -999.0);
            eff_d = Deck_Analysis_LL.Bridge_Analysis.Analysis.Effective_Depth;
            if (_X_joints.Contains(eff_d))
            {
                Deck_Analysis_LL.Effective_Depth = eff_d;
            }
            else
            {
                Deck_Analysis_LL.Effective_Depth = _X_joints.Count > 1 ? _X_joints[2] : 0.0;

                eff_d = Deck_Analysis_LL.Effective_Depth;
            }
            //double eff_dep = ;

            //_L_2_joints.Clear();

            cant_wi = _Z_joints.Count > 1 ? _Z_joints[2] : 0.0;
            Deck_Analysis_LL.WidthCantilever = cant_wi;



            //eff_d = _X_joints.Count > 1 ? _X_joints[1] : 2.5;
            //eff_d = (eff_d == support ? _X_joints[2] : 2.5);



            if (_X_joints.Contains(eff_d))
            {
                Deck_Analysis_LL.Effective_Depth = eff_d;
            }
            else
            {
                Deck_Analysis_LL.Effective_Depth = _X_joints.Count > 1 ? _X_joints[2] : 0.0; ;
            }

            //_L_2_joints.Clear();
            for (i = 0; i < jn_col.Count; i++)
            {
                if ((jn_col[i].Z >= cant_wi && jn_col[i].Z <= (W - cant_wi)) == false) continue;
                x_min = _X_min[_Z_joints.IndexOf(jn_col[i].Z)];



                if ((jn_col[i].X.ToString("0.0") == ((L / 2.0) + x_min).ToString("0.0")))
                {
                    _L2_joints.Add(jn_col[i].NodeNo);
                }
                if (jn_col[i].X.ToString("0.0") == ((L / 4.0) + x_min).ToString("0.0"))
                {
                    _L4_joints.Add(jn_col[i].NodeNo);
                }
                if (jn_col[i].X.ToString("0.0") == ((L - (L / 4.0)) + x_min).ToString("0.0"))
                {
                    _L4_joints.Add(jn_col[i].NodeNo);
                }



                if ((jn_col[i].X.ToString("0.0") == (Deck_Analysis_LL.Effective_Depth + x_min).ToString("0.0")))
                {
                    _deff_joints.Add(jn_col[i].NodeNo);
                }
                if ((jn_col[i].X.ToString("0.0") == (L - Deck_Analysis_LL.Effective_Depth + x_min).ToString("0.0")))
                {
                    _deff_joints.Add(jn_col[i].NodeNo);
                }



                if (jn_col[i].X.ToString("0.0") == ((L / 8.0) + x_min).ToString("0.0"))
                {
                    _L8_joints.Add(jn_col[i].NodeNo);
                }
                if (jn_col[i].X.ToString("0.0") == ((L - (L / 8.0)) + x_min).ToString("0.0"))
                {
                    _L8_joints.Add(jn_col[i].NodeNo);
                }


                if ((jn_col[i].X.ToString("0.0") == ((3.0 * L / 8.0) + x_min).ToString("0.0")))
                {
                    _3L8_joints.Add(jn_col[i].NodeNo);
                }
                if ((jn_col[i].X.ToString("0.0") == ((L - (3.0 * L / 8.0)) + x_min).ToString("0.0")))
                {
                    _3L8_joints.Add(jn_col[i].NodeNo);
                }

                //if ((jn_col[i].X.ToString("0.0") == ((support) + x_min).ToString("0.0")))
                //{
                //    _support_joints.Add(jn_col[i].NodeNo);
                //}
                //if ((jn_col[i].X.ToString("0.0") == ((L - (support)) + x_min).ToString("0.0")))
                //{
                //    _support_joints.Add(jn_col[i].NodeNo);
                //}
            }

            //For Support
            //for (node = 12; node <= 22; node++) _joints.Add(node);
            //for (node = 122; node <= 132; node++) _joints.Add(node);

            Results.Clear();
            Results.Add("");
            Results.Add("");
            Results.Add("Analysis Result of Live Loads of PSC Box Girder Bridge");
            Results.Add("");
            Results.Add("");
            if (_support_joints.Count > 0)
            {


                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_support_joints);
                txt_Ana_live_inner_long_support_shear.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("SUPPORT : MAX SHEAR FORCE", _support_joints, "Ton"));
                Box_Forces.FRC_LL_Shear[0] = force;


                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_support_joints);
                txt_Ana_live_inner_long_support_moment.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("SUPPORT : MAX BENDING MOMENT", _support_joints, "Ton-m"));
                Box_Forces.FRC_LL_Moment[0] = force;

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_support_joints);
                Box_Forces.FRC_LL_Torsion[0] = force;

                _joints.Clear();
            }

            //For Deff
            //for (node = 111; node <= 121; node++) _joints.Add(node);
            //for (node = 23; node <= 33; node++) _joints.Add(node);
            if (_deff_joints.Count > 0)
            {

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_deff_joints);
                txt_Ana_live_inner_long_deff_shear.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("Effective Depth : MAX SHEAR FORCE", _deff_joints, "Ton"));
                Box_Forces.FRC_LL_Shear[1] = force;

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_deff_joints);
                txt_Ana_live_inner_long_deff_moment.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("Effective Depth : MAX BENDING MOMENT", _deff_joints, "Ton-m"));
                Box_Forces.FRC_LL_Moment[1] = force;


                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_deff_joints);
                Box_Forces.FRC_LL_Torsion[1] = force;

                _joints.Clear();
            }

            //For L/8
            //for (node = 100; node <= 110; node++) _joints.Add(node);
            //for (node = 34; node <= 44; node++) _joints.Add(node);
            if (_L8_joints.Count > 0)
            {


                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_L8_joints);
                txt_Ana_live_inner_long_L8_shear.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("L/8 : MAX SHEAR FORCE", _L8_joints, "Ton"));
                Box_Forces.FRC_LL_Shear[2] = force;

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_L8_joints);
                txt_Ana_live_inner_long_L8_moment.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("L/8 : MAX BENDING MOMENT", _L8_joints, "Ton-m"));
                Box_Forces.FRC_LL_Moment[2] = force;


                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_L8_joints);
                Box_Forces.FRC_LL_Torsion[2] = force;

                _joints.Clear();
            }



            //For L/4
            //for (node = 89; node <= 99; node++) _joints.Add(node);
            //for (node = 45; node <= 55; node++) _joints.Add(node);
            if (_L4_joints.Count > 0)
            {

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_L4_joints);
                txt_Ana_live_inner_long_L4_shear.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("L/4 : MAX SHEAR FORCE", _L4_joints, "Ton"));
                Box_Forces.FRC_LL_Shear[3] = force;

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_L4_joints);
                txt_Ana_live_inner_long_L4_moment.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("L/4 : MAX BENDING MOMENT", _L4_joints, "Ton-m"));
                Box_Forces.FRC_LL_Moment[3] = force;


                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_L4_joints);
                Box_Forces.FRC_LL_Torsion[3] = force;

                _joints.Clear();
            }

            //For 3L/8
            //for (node = 78; node <= 88; node++) _joints.Add(node);
            //for (node = 56; node <= 66; node++) _joints.Add(node);
            if (_3L8_joints.Count > 0)
            {


                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_3L8_joints);
                txt_Ana_live_inner_long_3L_8_shear.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("3L/8 : MAX SHEAR FORCE", _3L8_joints, "Ton"));
                Box_Forces.FRC_LL_Shear[4] = force;

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_3L8_joints);
                txt_Ana_live_inner_long_3L_8_moment.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("3L/8 : MAX BENDING MOMENT", _3L8_joints, "Ton-m"));
                Box_Forces.FRC_LL_Moment[4] = force;

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_3L8_joints);
                Box_Forces.FRC_LL_Torsion[4] = force;

                _joints.Clear();
            }

            //For L/2
            //for (node = 67; node <= 77; node++) _joints.Add(node);
            if (_L2_joints.Count > 0)
            {

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_L2_joints);
                txt_Ana_live_inner_long_L2_shear.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("L/2 : MAX SHEAR FORCE", _L2_joints, "Ton"));
                Box_Forces.FRC_LL_Shear[5] = force;

                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_L2_joints);
                txt_Ana_live_inner_long_L2_moment.Text = Math.Abs(force).ToString();
                Results.AddRange(force.GetDetails("L/2 : MAX BENDING MOMENT", _L2_joints, "Ton-m"));
                Box_Forces.FRC_LL_Moment[5] = force;


                force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_3L8_joints);
                Box_Forces.FRC_LL_Torsion[5] = force;

                _joints.Clear();
                _joints = null;
            }


            File.WriteAllLines(Result_Report_LL, Results.ToArray());
            //iApp.RunExe(Result_Report_LL);
        }

        void Show_Moment_Shear_LL_British()
        {
            List<int> _joints = new List<int>();
            int node = 0;
            MaxForce force = new MaxForce();


            Deck_Analysis_LL.Bridge_Analysis = All_Analysis[1];
            MemberCollection mc = new MemberCollection(Deck_Analysis_LL.Bridge_Analysis.Analysis.Members);
            JointNodeCollection jn_col = Deck_Analysis_LL.Bridge_Analysis.Analysis.Joints;


            double L = Deck_Analysis_LL.Bridge_Analysis.Analysis.Length;
            double W = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width;
            double cant_wi = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width_Cantilever;

            //double support = Deck_Analysis_LL.Bridge_Analysis.Supports.Count > 0 ? Deck_Analysis_LL.Bridge_Analysis.Supports[0].X : 0.5;
            double support = Deck_Analysis_LL.Support_Distance;
            support = Deck_Analysis_LL.Support_Distance;


            double eff_d = MyList.StringToDouble(txt_Ana_DL_eff_depth.Text, 0.0);


            double val = L / 2;
            int i = 0;

            List<int> _L2_joints = new List<int>();
            List<int> _L4_joints = new List<int>();
            List<int> _deff_joints = new List<int>();

            List<int> _L8_joints = new List<int>();
            List<int> _3L8_joints = new List<int>();
            List<int> _support_joints = new List<int>();


            for (i = 0; i < Deck_Analysis_LL.Bridge_Analysis.Supports.Count; i++)
            {
                _support_joints.Add(Deck_Analysis_LL.Bridge_Analysis.Supports[i].NodeNo);
                //_support_joints.Add(item.
            }



            List<double> _X_joints = new List<double>();
            List<double> _Z_joints = new List<double>();

            for (i = 0; i < jn_col.Count; i++)
            {
                if (_X_joints.Contains(jn_col[i].X) == false) _X_joints.Add(jn_col[i].X);
                if (_Z_joints.Contains(jn_col[i].Z) == false) _Z_joints.Add(jn_col[i].Z);
            }
            val = -999;


            List<double> _X_min = new List<double>();
            List<double> _X_max = new List<double>();
            double x_max, x_min;
            double vvv = 99999999999999999;
            for (int zc = 0; zc < _Z_joints.Count; zc++)
            {

                x_min = vvv;
                x_max = -vvv;

                for (i = 0; i < jn_col.Count; i++)
                {
                    //if (_X_joints.Contains(jn_col[i].X) == false) _X_joints.Add(jn_col[i].X);
                    //if (_Z_joints.Contains(jn_col[i].Z) == false) _Z_joints.Add(jn_col[i].Z);

                    if (_Z_joints[zc] == jn_col[i].Z)
                    {
                        if (x_min > jn_col[i].X)
                            x_min = jn_col[i].X;
                        if (x_max < jn_col[i].X)
                            x_max = jn_col[i].X;
                    }

                }
                if (x_max != -vvv)
                    _X_max.Add(x_max);
                if (x_min != vvv)
                    _X_min.Add(x_min);
            }

            //val = MyList.StringToDouble(txt_Ana_eff_depth.Text, -999.0);
            eff_d = Deck_Analysis_LL.Bridge_Analysis.Analysis.Effective_Depth;
            if (_X_joints.Contains(eff_d))
            {
                Deck_Analysis_LL.Effective_Depth = eff_d;
            }
            else
            {
                Deck_Analysis_LL.Effective_Depth = _X_joints.Count > 1 ? _X_joints[2] : 0.0;

                eff_d = Deck_Analysis_LL.Effective_Depth;
            }
            //double eff_dep = ;

            //_L_2_joints.Clear();

            cant_wi = _Z_joints.Count > 1 ? _Z_joints[2] : 0.0;
            Deck_Analysis_LL.WidthCantilever = cant_wi;



            //eff_d = _X_joints.Count > 1 ? _X_joints[1] : 2.5;
            //eff_d = (eff_d == support ? _X_joints[2] : 2.5);



            if (_X_joints.Contains(eff_d))
            {
                Deck_Analysis_LL.Effective_Depth = eff_d;
            }
            else
            {
                Deck_Analysis_LL.Effective_Depth = _X_joints.Count > 1 ? _X_joints[2] : 0.0; ;
            }

            //_L_2_joints.Clear();
            for (i = 0; i < jn_col.Count; i++)
            {
                if ((jn_col[i].Z >= cant_wi && jn_col[i].Z <= (W - cant_wi)) == false) continue;
                x_min = _X_min[_Z_joints.IndexOf(jn_col[i].Z)];



                if ((jn_col[i].X.ToString("0.0") == ((L / 2.0) + x_min).ToString("0.0")))
                {
                    _L2_joints.Add(jn_col[i].NodeNo);
                }
                if (jn_col[i].X.ToString("0.0") == ((L / 4.0) + x_min).ToString("0.0"))
                {
                    _L4_joints.Add(jn_col[i].NodeNo);
                }
                if (jn_col[i].X.ToString("0.0") == ((L - (L / 4.0)) + x_min).ToString("0.0"))
                {
                    _L4_joints.Add(jn_col[i].NodeNo);
                }



                if ((jn_col[i].X.ToString("0.0") == (Deck_Analysis_LL.Effective_Depth + x_min).ToString("0.0")))
                {
                    _deff_joints.Add(jn_col[i].NodeNo);
                }
                if ((jn_col[i].X.ToString("0.0") == (L - Deck_Analysis_LL.Effective_Depth + x_min).ToString("0.0")))
                {
                    _deff_joints.Add(jn_col[i].NodeNo);
                }



                if (jn_col[i].X.ToString("0.0") == ((L / 8.0) + x_min).ToString("0.0"))
                {
                    _L8_joints.Add(jn_col[i].NodeNo);
                }
                if (jn_col[i].X.ToString("0.0") == ((L - (L / 8.0)) + x_min).ToString("0.0"))
                {
                    _L8_joints.Add(jn_col[i].NodeNo);
                }


                if ((jn_col[i].X.ToString("0.0") == ((3.0 * L / 8.0) + x_min).ToString("0.0")))
                {
                    _3L8_joints.Add(jn_col[i].NodeNo);
                }
                if ((jn_col[i].X.ToString("0.0") == ((L - (3.0 * L / 8.0)) + x_min).ToString("0.0")))
                {
                    _3L8_joints.Add(jn_col[i].NodeNo);
                }

                //if ((jn_col[i].X.ToString("0.0") == ((support) + x_min).ToString("0.0")))
                //{
                //    _support_joints.Add(jn_col[i].NodeNo);
                //}
                //if ((jn_col[i].X.ToString("0.0") == ((L - (support)) + x_min).ToString("0.0")))
                //{
                //    _support_joints.Add(jn_col[i].NodeNo);
                //}
            }

            //For Support
            //for (node = 12; node <= 22; node++) _joints.Add(node);
            //for (node = 122; node <= 132; node++) _joints.Add(node);

            Results.Clear();
            Results.Add("");
            Results.Add("");
            Results.Add("Analysis Result of Live Loads of PSC Box Girder Bridge");
            Results.Add("");
            Results.Add("");
            for (i = 1; i < All_Analysis.Count; i++)
            {
                Results.Add("");
                Results.Add("----------------------------------------------------------------");
                Results.Add(string.Format("STEP {0} : ANALYSIS RESULT OF {1}", i, all_loads[i - 1][0]));
                Results.Add("----------------------------------------------------------------");
                Results.Add("");
                Deck_Analysis_LL.Bridge_Analysis = All_Analysis[i];

                #region Write Data to List

                #region _support_joints

                if (_support_joints.Count > 0)
                {


                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_support_joints);
                    txt_Ana_live_inner_long_support_shear.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("SUPPORT : MAX SHEAR FORCE", _support_joints, "Ton"));
                    Box_Forces.FRC_LL_Shear[0] = force;


                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_support_joints);
                    txt_Ana_live_inner_long_support_moment.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("SUPPORT : MAX BENDING MOMENT", _support_joints, "Ton-m"));
                    Box_Forces.FRC_LL_Moment[0] = force;

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_support_joints);
                    Box_Forces.FRC_LL_Torsion[0] = force;

                    _joints.Clear();
                }
                #endregion _support_joints


                #region _deff_joints

                //For Deff
                //for (node = 111; node <= 121; node++) _joints.Add(node);
                //for (node = 23; node <= 33; node++) _joints.Add(node);
                if (_deff_joints.Count > 0)
                {

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_deff_joints);
                    txt_Ana_live_inner_long_deff_shear.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("Effective Depth : MAX SHEAR FORCE", _deff_joints, "Ton"));
                    Box_Forces.FRC_LL_Shear[1] = force;

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_deff_joints);
                    txt_Ana_live_inner_long_deff_moment.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("Effective Depth : MAX BENDING MOMENT", _deff_joints, "Ton-m"));
                    Box_Forces.FRC_LL_Moment[1] = force;


                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_deff_joints);
                    Box_Forces.FRC_LL_Torsion[1] = force;

                    _joints.Clear();
                }
                #endregion _deff_joints



                #region _L8_joints

                //For L/8
                //for (node = 100; node <= 110; node++) _joints.Add(node);
                //for (node = 34; node <= 44; node++) _joints.Add(node);
                if (_L8_joints.Count > 0)
                {


                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_L8_joints);
                    txt_Ana_live_inner_long_L8_shear.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("L/8 : MAX SHEAR FORCE", _L8_joints, "Ton"));
                    Box_Forces.FRC_LL_Shear[2] = force;

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_L8_joints);
                    txt_Ana_live_inner_long_L8_moment.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("L/8 : MAX BENDING MOMENT", _L8_joints, "Ton-m"));
                    Box_Forces.FRC_LL_Moment[2] = force;


                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_L8_joints);
                    Box_Forces.FRC_LL_Torsion[2] = force;

                    _joints.Clear();
                }

                #endregion _L8_joints


                #region _L4_joints

                //For L/4
                //for (node = 89; node <= 99; node++) _joints.Add(node);
                //for (node = 45; node <= 55; node++) _joints.Add(node);
                if (_L4_joints.Count > 0)
                {

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_L4_joints);
                    txt_Ana_live_inner_long_L4_shear.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("L/4 : MAX SHEAR FORCE", _L4_joints, "Ton"));
                    Box_Forces.FRC_LL_Shear[3] = force;

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_L4_joints);
                    txt_Ana_live_inner_long_L4_moment.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("L/4 : MAX BENDING MOMENT", _L4_joints, "Ton-m"));
                    Box_Forces.FRC_LL_Moment[3] = force;


                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_L4_joints);
                    Box_Forces.FRC_LL_Torsion[3] = force;

                    _joints.Clear();
                }
                #endregion _L4_joints


                #region _3L8_joints
                //For 3L/8
                //for (node = 78; node <= 88; node++) _joints.Add(node);
                //for (node = 56; node <= 66; node++) _joints.Add(node);
                if (_3L8_joints.Count > 0)
                {


                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_3L8_joints);
                    txt_Ana_live_inner_long_3L_8_shear.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("3L/8 : MAX SHEAR FORCE", _3L8_joints, "Ton"));
                    Box_Forces.FRC_LL_Shear[4] = force;

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_3L8_joints);
                    txt_Ana_live_inner_long_3L_8_moment.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("3L/8 : MAX BENDING MOMENT", _3L8_joints, "Ton-m"));
                    Box_Forces.FRC_LL_Moment[4] = force;

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_3L8_joints);
                    Box_Forces.FRC_LL_Torsion[4] = force;

                    _joints.Clear();
                }
                #endregion _3L8_joints

                #region _L2_joints

                //For L/2
                //for (node = 67; node <= 77; node++) _joints.Add(node);
                if (_L2_joints.Count > 0)
                {

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_L2_joints);
                    txt_Ana_live_inner_long_L2_shear.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("L/2 : MAX SHEAR FORCE", _L2_joints, "Ton"));
                    Box_Forces.FRC_LL_Shear[5] = force;

                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_L2_joints);
                    txt_Ana_live_inner_long_L2_moment.Text = Math.Abs(force).ToString();
                    Results.AddRange(force.GetDetails("L/2 : MAX BENDING MOMENT", _L2_joints, "Ton-m"));
                    Box_Forces.FRC_LL_Moment[5] = force;


                    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_Torsion(_3L8_joints);
                    Box_Forces.FRC_LL_Torsion[5] = force;

                    _joints.Clear();
                    //_joints = null;
                }
                #endregion _L2_joints

                #endregion Write Data to List
            }
            File.WriteAllLines(Result_Report_LL, Results.ToArray());
            //iApp.RunExe(Result_Report_LL);
        }

        void Show_Moment_Shear_DL()
        {
            List<int> _joints = new List<int>();
            MaxForce force = new MaxForce();

            //Support
            _joints.Add(2);
            _joints.Add(12);

            Results.Clear();
            Results.Add("");
            Results.Add("");
            Results.Add("Analysis Result of Dead Loads of PSC Box Girder Bridge");
            Results.Add("");
            Results.Add("");
            Results.Add("");
            Results.Add("SELF WEIGHT");
            Results.Add("-----------");
            Results.Add("");
            Results.Add("");
            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 1);
            Results.AddRange(force.GetDetails("SUPPORT : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_dead_inner_long_support_shear.Text = Math.Abs(force).ToString();

            Box_Forces.FRC_DL_Shear[0] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 1);
            Results.AddRange(force.GetDetails("SUPPORT : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_dead_inner_long_support_moment.Text = Math.Abs(force).ToString();

            Box_Forces.FRC_DL_Moment[0] = force;



            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 1);
            Box_Forces.FRC_DL_Torsion[0] = force;


            //Deff
            _joints.Clear();
            _joints.Add(3);
            _joints.Add(11);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 1);
            Results.AddRange(force.GetDetails("Effective Depth : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_dead_inner_long_deff_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Shear[1] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 1);
            Results.AddRange(force.GetDetails("Effective Depth : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_dead_inner_long_deff_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Moment[1] = force;


            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 1);
            Box_Forces.FRC_DL_Torsion[1] = force;


            //L/8
            _joints.Clear();
            _joints.Add(4);
            _joints.Add(10);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 1);
            Results.AddRange(force.GetDetails("L/8 : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_dead_inner_long_L8_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Shear[2] = force;


            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 1);
            Results.AddRange(force.GetDetails("L/8 : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_dead_inner_long_L8_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Moment[2] = force;



            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 1);
            Box_Forces.FRC_DL_Torsion[2] = force;


            //L/4
            _joints.Clear();
            _joints.Add(5);
            _joints.Add(9);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 1);
            Results.AddRange(force.GetDetails("L/4 : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_dead_inner_long_L4_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Shear[3] = force;


            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 1);
            Results.AddRange(force.GetDetails("L/4 : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_dead_inner_long_L4_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Moment[3] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 1);
            Box_Forces.FRC_DL_Torsion[3] = force;



            //3L/8
            _joints.Clear();
            _joints.Add(6);
            _joints.Add(8);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 1);
            Results.AddRange(force.GetDetails("3L/8 : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_dead_inner_long_3L_8_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Shear[4] = force;


            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 1);
            Results.AddRange(force.GetDetails("3L/8 : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_dead_inner_long_3L_8_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Moment[4] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 1);
            Box_Forces.FRC_DL_Torsion[4] = force;



            //L/2
            _joints.Clear();
            _joints.Add(7);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 1);
            Results.AddRange(force.GetDetails("L/2 : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_dead_inner_long_L2_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Shear[5] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 1);
            Results.AddRange(force.GetDetails("L/2 : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_dead_inner_long_L2_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_DL_Moment[5] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 1);
            Box_Forces.FRC_DL_Torsion[5] = force;



            _joints.Clear();


            Results.Add("");
            Results.Add("");
            Results.Add("SUPER IMPOSED DEAD LOAD");
            Results.Add("-----------------------");
            Results.Add("");
            Results.Add("");
            //Support
            _joints.Add(2);
            _joints.Add(12);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 2);
            Results.AddRange(force.GetDetails("SUPPORT : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_live_outer_long_support_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Shear[0] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 2);
            Results.AddRange(force.GetDetails("SUPPORT : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_live_outer_long_support_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Moment[0] = force;



            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 2);
            Box_Forces.FRC_SIDL_Torsion[0] = force;




            //Deff
            _joints.Clear();
            _joints.Add(3);
            _joints.Add(11);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 2);
            Results.AddRange(force.GetDetails("Effective Depth : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_live_outer_long_deff_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Shear[1] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 2);
            Results.AddRange(force.GetDetails("Effective Depth : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_live_outer_long_deff_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Moment[1] = force;



            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 2);
            Box_Forces.FRC_SIDL_Torsion[1] = force;



            //L/8
            _joints.Clear();
            _joints.Add(4);
            _joints.Add(10);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 2);
            Results.AddRange(force.GetDetails("L/8 : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_live_outer_long_L8_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Shear[2] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 2);
            Results.AddRange(force.GetDetails("L/8 : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_live_outer_long_L8_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Moment[2] = force;



            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 2);
            Box_Forces.FRC_SIDL_Torsion[2] = force;




            //L/4
            _joints.Clear();
            _joints.Add(5);
            _joints.Add(9);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 2);
            Results.AddRange(force.GetDetails("L/4 : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_live_outer_long_L4_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Shear[3] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 2);
            Results.AddRange(force.GetDetails("L/4 : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_live_outer_long_L4_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Moment[3] = force;



            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 2);
            Box_Forces.FRC_SIDL_Torsion[3] = force;

            //3L/8
            _joints.Clear();
            _joints.Add(6);
            _joints.Add(8);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 2);
            Results.AddRange(force.GetDetails("3L/8 : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_live_outer_long_3L_8_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Shear[4] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 2);
            Results.AddRange(force.GetDetails("3L/8 : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_live_outer_long_3L_8_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Moment[4] = force;



            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 2);
            Box_Forces.FRC_SIDL_Torsion[4] = force;

            //L/2
            _joints.Clear();
            _joints.Add(7);

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_joints, 2);
            Results.AddRange(force.GetDetails("L/2 : MAX SHEAR FORCE", _joints, "Ton"));
            txt_Ana_live_outer_long_L2_shear.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Shear[5] = force;

            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_joints, 2);
            Results.AddRange(force.GetDetails("L/2 : MAX BENDING MOMENT", _joints, "Ton-m"));
            txt_Ana_live_outer_long_L2_moment.Text = Math.Abs(force).ToString();
            Box_Forces.FRC_SIDL_Moment[5] = force;



            force = Deck_Analysis_DL.Bridge_Analysis.GetJoint_Torsion(_joints, 2);
            Box_Forces.FRC_SIDL_Torsion[5] = force;

            File.WriteAllLines(Result_Report_DL, Results.ToArray());

            //iApp.RunExe(Result_Report_DL);
        }
        #region Show_Moment_Shear_LL_2011_10_26
        //void Show_Moment_Shear_LL_2011_10_26()
        //{

        //    List<int> _joints = new List<int>();
        //    int node = 0;
        //    MaxForce force = 0.0;

        //    //For Support
        //    for (node = 12; node <= 22; node++) _joints.Add(node);
        //    for (node = 122; node <= 132; node++) _joints.Add(node);

        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_joints);
        //    txt_Ana_live_inner_long_support_moment.Text = force.ToString();
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_joints);
        //    txt_Ana_live_inner_long_support_shear.Text = force.ToString();
        //    _joints.Clear();

        //    //For Deff
        //    for (node = 111; node <= 121; node++) _joints.Add(node);
        //    for (node = 23; node <= 33; node++) _joints.Add(node);
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_joints);
        //    txt_Ana_live_inner_long_deff_moment.Text = force.ToString();
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_joints);
        //    txt_Ana_live_inner_long_deff_shear.Text = force.ToString();
        //    _joints.Clear();

        //    //For L/8
        //    for (node = 100; node <= 110; node++) _joints.Add(node);
        //    for (node = 34; node <= 44; node++) _joints.Add(node);
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_joints);
        //    txt_Ana_live_inner_long_L8_moment.Text = force.ToString();
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_joints);
        //    txt_Ana_live_inner_long_L8_shear.Text = force.ToString();
        //    _joints.Clear();



        //    //For L/4
        //    for (node = 89; node <= 99; node++) _joints.Add(node);
        //    for (node = 45; node <= 55; node++) _joints.Add(node);
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_joints);
        //    txt_Ana_live_inner_long_L4_moment.Text = force.ToString();
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_joints);
        //    txt_Ana_live_inner_long_L4_shear.Text = force.ToString();
        //    _joints.Clear();

        //    //For 3L/8
        //    for (node = 78; node <= 88; node++) _joints.Add(node);
        //    for (node = 56; node <= 66; node++) _joints.Add(node);
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_joints);
        //    txt_Ana_live_inner_long_3L_8_moment.Text = force.ToString();
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_joints);
        //    txt_Ana_live_inner_long_3L_8_shear.Text = force.ToString();
        //    _joints.Clear();



        //    //For L/2
        //    for (node = 67; node <= 77; node++) _joints.Add(node);
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_MomentForce(_joints);
        //    txt_Ana_live_inner_long_L2_moment.Text = force.ToString();
        //    force = Deck_Analysis_LL.Bridge_Analysis.GetJoint_ShearForce(_joints);
        //    txt_Ana_live_inner_long_L2_shear.Text = force.ToString();
        //    _joints.Clear();
        //    _joints = null;


        //}
        //void Show_Moment_Shear_DL_2011_10_17()
        //{
        //    MemberCollection mc = new MemberCollection(Deck_Analysis_DL.Bridge_Analysis.Analysis.Members);

        //    MemberCollection sort_membs = new MemberCollection();

        //    double z_min = double.MaxValue;
        //    double x = double.MaxValue;
        //    int indx = -1;

        //    int i = 0;
        //    int j = 0;

        //    List<double> list_z = new List<double>();

        //    List<MemberCollection> list_mc = new List<MemberCollection>();

        //    double last_z = 0.0;
        //    //double z_min = double.MaxValue;

        //    iApp.Progress_ON("Sorting Data..");
        //    while (mc.Count != 0)
        //    {
        //        indx = -1;
        //        for (i = 0; i < mc.Count; i++)
        //        {
        //            if (z_min > mc[i].StartNode.Z)
        //            {
        //                z_min = mc[i].StartNode.Z;
        //                indx = i;
        //            }
        //        }
        //        if (indx != -1)
        //        {

        //            if (!list_z.Contains(z_min))
        //                list_z.Add(z_min);

        //            sort_membs.Add(mc[indx]);
        //            mc.Members.RemoveAt(indx);
        //            z_min = double.MaxValue;
        //            iApp.SetProgressValue(sort_membs.Count, (sort_membs.Count + mc.Count));
        //        }
        //    }

        //    iApp.Progress_OFF();


        //    List<string> list_arr = new List<string>();


        //    last_z = -1.0;

        //    //Outer Long Girder
        //    MemberCollection outer_long = new MemberCollection();
        //    MemberCollection inner_long = new MemberCollection();
        //    MemberCollection inner_cross = new MemberCollection();


        //    //z_min = Truss_Analysis.Analysis.Joints.MinZ;
        //    //double z_max = Truss_Analysis.Analysis.Joints.MaxZ;

        //    //Chiranjit [2011 07 09]
        //    //Store Outer Girder Members
        //    int count = 0;
        //    z_min = 0.0;
        //    for (i = 0; i < sort_membs.Count; i++)
        //    {
        //        if (z_min < sort_membs[i].StartNode.Z)
        //        {
        //            z_min = sort_membs[i].StartNode.Z;
        //            count++;
        //        }
        //        if (z_min < sort_membs[i].EndNode.Z)
        //        {
        //            z_min = sort_membs[i].EndNode.Z;
        //            count++;
        //        }
        //        //For Outer Girder
        //        if (count == 2) break;
        //        //if (count == 0) break;
        //    }

        //    //z_min = WidthCantilever;
        //    double z_max = z_min;


        //    //Store inner and outer Long Girder
        //    for (i = 0; i < sort_membs.Count; i++)
        //    {
        //        if (((sort_membs[i].StartNode.Z == z_min) || (sort_membs[i].StartNode.Z == z_max)) &&
        //            sort_membs[i].StartNode.Z == sort_membs[i].EndNode.Z)
        //        {
        //            outer_long.Add(sort_membs[i]);
        //        }
        //        else if (((sort_membs[i].StartNode.Z != z_min) && (sort_membs[i].StartNode.Z != z_max)) &&
        //            sort_membs[i].StartNode.Z == sort_membs[i].EndNode.Z)
        //        {
        //            inner_long.Add(sort_membs[i]);
        //        }
        //    }

        //    //Store Cross Girders
        //    for (i = 0; i < sort_membs.Count; i++)
        //    {
        //        if (outer_long.Contains(sort_membs[i]) == false &&
        //            inner_long.Contains(sort_membs[i]) == false)
        //        {
        //            inner_cross.Add(sort_membs[i]);
        //        }
        //    }


        //    //Print
        //    //OUTER LONG GIRDER
        //    list_arr.Add("");
        //    list_arr.Add("OUTER LONG GIRDERS");
        //    list_arr.Add("");
        //    list_arr.Add("");
        //    for (j = 0; j < outer_long.Count; j++)
        //    {
        //        //mc = outer_long[i];
        //        list_arr.Add(string.Format("{0,-10} {1} {2}",
        //     outer_long[j].MemberNo, outer_long[j].StartNode, outer_long[j].EndNode));
        //    }

        //    list_arr.Add("");
        //    list_arr.Add("INNER LONG GIRDERS");
        //    list_arr.Add("");
        //    for (j = 0; j < inner_long.Count; j++)
        //    {
        //        //mc = inner_long[i];
        //        list_arr.Add(string.Format("{0,-10} {1} {2}",
        //     inner_long[j].MemberNo, inner_long[j].StartNode, inner_long[j].EndNode));
        //    }


        //    list_arr.Add("");
        //    list_arr.Add("ALL CROSS GIRDERS");
        //    list_arr.Add("");
        //    for (j = 0; j < inner_cross.Count; j++)
        //    {
        //        //mc = inner_cross[i];

        //        list_arr.Add(string.Format("{0,-10} {1} {2}",
        //     inner_cross[j].MemberNo, inner_cross[j].StartNode, inner_cross[j].EndNode));
        //    }


        //    //Find X MIN    X MAX   for outer long girder
        //    double x_min, x_max;

        //    List<double> list_outer_xmin = new List<double>();
        //    List<double> list_inner_xmin = new List<double>();
        //    List<double> list_inner_cur_z = new List<double>();
        //    List<double> list_outer_cur_z = new List<double>();

        //    List<double> list_outer_xmax = new List<double>();
        //    List<double> list_inner_xmax = new List<double>();


        //    x_min = double.MaxValue;
        //    x_max = double.MinValue;

        //    last_z = outer_long[0].StartNode.Z;
        //    for (i = 0; i < outer_long.Count; i++)
        //    {
        //        if (last_z == outer_long[i].StartNode.Z)
        //        {
        //            if (x_min > outer_long[i].StartNode.X)
        //            {
        //                x_min = outer_long[i].StartNode.X;
        //            }
        //            if (x_max < outer_long[i].EndNode.X)
        //            {
        //                x_max = outer_long[i].EndNode.X;
        //            }
        //        }
        //        else
        //        {
        //            list_outer_xmax.Add(x_max);
        //            list_outer_xmin.Add(x_min);
        //            list_outer_cur_z.Add(last_z);

        //            x_min = outer_long[i].StartNode.X;
        //            x_max = outer_long[i].EndNode.X;


        //        }
        //        last_z = outer_long[i].StartNode.Z;
        //    }

        //    list_outer_xmax.Add(x_max);
        //    list_outer_xmin.Add(x_min);
        //    list_outer_cur_z.Add(last_z);

        //    x_min = double.MaxValue;
        //    x_max = double.MinValue;

        //    last_z = inner_long[0].StartNode.Z;

        //    for (i = 0; i < inner_long.Count; i++)
        //    {
        //        if (last_z == inner_long[i].StartNode.Z)
        //        {
        //            if (x_min > inner_long[i].StartNode.X)
        //            {
        //                x_min = inner_long[i].StartNode.X;
        //            }
        //            if (x_max < inner_long[i].EndNode.X)
        //            {
        //                x_max = inner_long[i].EndNode.X;
        //            }
        //        }
        //        else
        //        {
        //            list_inner_xmax.Add(x_max);
        //            list_inner_xmin.Add(x_min);
        //            list_inner_cur_z.Add(last_z);

        //            x_min = inner_long[i].StartNode.X;
        //            x_max = inner_long[i].EndNode.X;

        //        }
        //        last_z = inner_long[i].StartNode.Z;
        //    }

        //    list_inner_xmax.Add(x_max);
        //    list_inner_xmin.Add(x_min);

        //    list_inner_cur_z.Add(last_z);

        //    List<int> _deff_joints = new List<int>();
        //    List<int> _L_4_joints = new List<int>();
        //    List<int> _L_2_joints = new List<int>();
        //    //Member Forces from Report for Inner girder


        //    //int cur_node = -1;
        //    int cur_member = -1;
        //    // FOR L/2
        //    string curr_membs_L2_text = "";
        //    // FOR L/4
        //    string curr_membs_L4_text = "";
        //    //FOR Effective Depth
        //    string curr_membs_Deff_text = "";


        //    double cur_z = 0.0;
        //    double cur_y = 0.0;

        //    double curr_L2_x = 0.0;
        //    double curr_L4_x = 0.0;
        //    double curr_Deff_x = 0.0;

        //    curr_membs_L2_text = "";
        //    curr_membs_L4_text = "";
        //    curr_membs_Deff_text = "";
        //    cur_member = -1;

        //    if (outer_long.Count > 0)
        //        Deck_Analysis_DL.Effective_Depth = outer_long[0].Length;

        //    for (i = 0; i < list_inner_xmax.Count; i++)
        //    {
        //        x_max = list_inner_xmax[i];
        //        x_min = list_inner_xmin[i];

        //        cur_z = list_inner_cur_z[i];

        //        curr_L2_x = (x_max + x_min) / 2.0;
        //        curr_L4_x = (curr_L2_x + x_min) / 2.0;
        //        curr_Deff_x = (Deck_Analysis_DL.Effective_Depth + x_min);

        //        cur_y = 0.0;

        //        for (j = 0; j < inner_long.Count; j++)
        //        {
        //            if ((inner_long[j].EndNode.Y.ToString("0.0") == cur_y.ToString("0.0")) &&
        //                (inner_long[j].EndNode.Z.ToString("0.0") == cur_z.ToString("0.0")))
        //            {
        //                if ((inner_long[j].EndNode.X.ToString("0.0") == curr_L2_x.ToString("0.0")))
        //                {
        //                    cur_member = inner_long[j].MemberNo;
        //                    curr_membs_L2_text += cur_member + " ";
        //                    _L_2_joints.Add(inner_long[j].EndNode.NodeNo);
        //                }
        //                else if ((inner_long[j].EndNode.X.ToString("0.0") == curr_L4_x.ToString("0.0")))
        //                {
        //                    cur_member = inner_long[j].MemberNo;
        //                    curr_membs_L4_text += cur_member + " ";
        //                    _L_4_joints.Add(inner_long[j].EndNode.NodeNo);
        //                }
        //                else if ((inner_long[j].EndNode.X.ToString("0.0") == curr_Deff_x.ToString("0.0")))
        //                {
        //                    cur_member = inner_long[j].MemberNo;
        //                    curr_membs_Deff_text += cur_member + " ";
        //                    _deff_joints.Add(inner_long[j].EndNode.NodeNo);
        //                }
        //            }
        //        }
        //    }

        //    // FOR Inner Long Girder
        //    _L_2_joints.Remove(64);
        //    double val = 0.0;
        //    val = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_L_2_joints);
        //    txt_Ana_DL_inner_long_L2_moment.Text = val.ToString();


        //    txt_Ana_dead_inner_long_L2_moment.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_L_2_joints).ToString();
        //    txt_Ana_dead_inner_long_L4_moment.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_L_4_joints).ToString();
        //    txt_Ana_dead_inner_long_deff_moment.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_deff_joints).ToString();



        //    //txt_DL_BM_IG.Text = (val * 10.0).ToString();
        //    //txt_DL_BM_IG.ForeColor = Color.Red;

        //    _deff_joints.Remove(20);
        //    val = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_deff_joints);
        //    txt_Ana_DL_inner_long_deff_shear.Text = val.ToString();

        //    txt_Ana_dead_inner_long_deff_shear.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_deff_joints).ToString();
        //    txt_Ana_dead_inner_long_L2_shear.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_L_2_joints).ToString();
        //    txt_Ana_dead_inner_long_L4_shear.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_L_4_joints).ToString();


        //    //txt_DL_SF_IG.Text = (val * 10.0).ToString();
        //    //txt_DL_SF_IG.ForeColor = Color.Red;


        //    //For Outer Long Girder
        //    curr_membs_L2_text = "";
        //    curr_membs_L4_text = "";
        //    curr_membs_Deff_text = "";
        //    cur_member = -1;
        //    _deff_joints.Clear();
        //    _L_2_joints.Clear();
        //    _L_4_joints.Clear();
        //    //Creating X Coordinates at every Z level
        //    for (i = 0; i < list_outer_xmax.Count; i++)
        //    {
        //        x_max = list_outer_xmax[i];
        //        x_min = list_outer_xmin[i];

        //        cur_z = list_outer_cur_z[i];

        //        curr_L2_x = (x_max + x_min) / 2.0;
        //        curr_L4_x = (curr_L2_x + x_min) / 2.0;
        //        curr_Deff_x = (Deck_Analysis_DL.Effective_Depth + x_min);

        //        cur_y = 0.0;

        //        for (j = 0; j < outer_long.Count; j++)
        //        {
        //            if ((outer_long[j].EndNode.Y.ToString("0.0") == cur_y.ToString("0.0")) &&
        //                (outer_long[j].EndNode.Z.ToString("0.0") == cur_z.ToString("0.0")))
        //            {
        //                if ((outer_long[j].EndNode.X.ToString("0.0") == curr_L2_x.ToString("0.0")))
        //                {
        //                    cur_member = outer_long[j].MemberNo;
        //                    curr_membs_L2_text += cur_member + " ";
        //                    _L_2_joints.Add(outer_long[j].EndNode.NodeNo);

        //                }
        //                else if ((outer_long[j].EndNode.X.ToString("0.0") == curr_L4_x.ToString("0.0")))
        //                {
        //                    cur_member = outer_long[j].MemberNo;
        //                    curr_membs_L4_text += cur_member + " ";
        //                    _L_4_joints.Add(outer_long[j].EndNode.NodeNo);
        //                }
        //                else if ((outer_long[j].EndNode.X.ToString("0.0") == curr_Deff_x.ToString("0.0")))
        //                {
        //                    cur_member = outer_long[j].MemberNo;
        //                    curr_membs_Deff_text += cur_member + " ";
        //                    _deff_joints.Add(outer_long[j].EndNode.NodeNo);
        //                }
        //            }
        //        }
        //    }
        //    _L_2_joints.Add(64);
        //    val = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_L_2_joints);
        //    txt_Ana_DL_outer_long_L2_moment.Text = val.ToString();

        //    txt_Ana_dead_outer_long_L2_moment.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_L_2_joints).ToString();
        //    txt_Ana_dead_outer_long_L4_moment.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_L_4_joints).ToString();
        //    txt_Ana_dead_outer_long_deff_moment.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_MomentForce(_deff_joints).ToString();


        //    //txt_DL_BM_OG.Text = "" + (val * 10);
        //    //txt_DL_BM_OG.ForeColor = Color.Red;



        //    _deff_joints.Add(20);
        //    val = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_deff_joints);
        //    txt_Ana_DL_outer_long_deff_shear.Text = val.ToString();

        //    txt_Ana_dead_outer_long_deff_shear.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_deff_joints).ToString();
        //    txt_Ana_dead_outer_long_L2_shear.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_L_2_joints).ToString();
        //    txt_Ana_dead_outer_long_L4_shear.Text = Deck_Analysis_DL.Bridge_Analysis.GetJoint_ShearForce(_L_4_joints).ToString();


        //    //txt_DL_SF_OG.Text = "" + (val * 10);
        //    //txt_DL_SF_OG.ForeColor = Color.Red;

        //    //Cross Girder
        //    string cross_text = "";
        //    for (j = 0; j < inner_cross.Count; j++)
        //    {

        //        cur_member = inner_cross[j].MemberNo;
        //        cross_text += cur_member + " ";
        //    }

        //    CMember m = new CMember();
        //    m.Group.MemberNosText = cross_text;
        //    m.Force = Deck_Analysis_DL.Bridge_Analysis.GetForce(ref m);
        //    //txt_Ana_dead_cross_max_moment.Text = (m.MaxMoment).ToString();
        //    //txt_Ana_dead_cross_max_shear.Text = m.MaxShearForce.ToString();
        //    //Write_Max_Moment_Shear();

        //}
        #endregion Show_Moment_Shear_LL_2011_10_26
        public string Result_Report
        {
            get
            {
                return Path.Combine(user_path, "ANALYSIS_RESULT.TXT");
            }
        }
        public string Result_Report_LL
        {
            get
            {
                return Path.Combine(user_path, "ANALYSIS_RESULT_LL.TXT");
            }
        }
        public string Result_Report_DL
        {
            get
            {
                return Path.Combine(user_path, "ANALYSIS_RESULT_DL.TXT");
            }
        }
        private void Show_Analysis_Result()
        {

            List<string> list = new List<string>();
            if (File.Exists(Result_Report_DL))
            {
                list.AddRange(File.ReadAllLines(Result_Report_DL));
            }
            if (File.Exists(Result_Report_LL))
            {
                list.AddRange(File.ReadAllLines(Result_Report_LL));
            }

            File.WriteAllLines(Result_Report, list.ToArray());
            //iApp.RunExe(Result_Report);
        }

        void Write_Max_Moment_Shear()
        {
            List<string> list = new List<string>();
            list.Add(string.Format("LONG_INN_DEFF_SHR={0}", txt_Ana_DL_inner_long_deff_shear.Text));
            list.Add(string.Format("LONG_INN_L2_MOM={0}", txt_Ana_DL_inner_long_L2_moment.Text));


            list.Add(string.Format("LONG_OUT_DEFF_SHR={0}", txt_Ana_DL_outer_long_deff_shear.Text));
            list.Add(string.Format("LONG_OUT_L2_MOM={0}", txt_Ana_DL_outer_long_L2_moment.Text));

            string f_path = Path.Combine(user_path, "FORCES.TXT");
            File.WriteAllLines(f_path, list.ToArray());
            Environment.SetEnvironmentVariable("TBEAM_ANALYSIS", f_path);
            list = null;
        }
        public void Button_Enable_Disable()
        {
            btn_Ana_DL_create_data.Enabled = true;
            //btn_Ana_DL_view_data.Enabled = File.Exists(Deck_Analysis_DL.Input_File);
            //btn_Ana_DL_view_structure.Enabled = File.Exists(Deck_Analysis_DL.Input_File);
            //btn_Ana_LL_view_structure.Enabled = File.Exists(Deck_Analysis_LL.Input_File);
            //btn_Ana_DL_view_report.Enabled = File.Exists(Deck_Analysis_DL.Analysis_Report);

            //btn_Ana_LL_view_data.Enabled = File.Exists(Deck_Analysis_LL.Input_File);
            //btn_Ana_LL_view_report.Enabled = File.Exists(Deck_Analysis_LL.Analysis_Report);


            //btn_process_DL_analysis.Enabled = File.Exists(Deck_Analysis_DL.Input_File);
            btn_Process_LL_Analysis.Enabled = File.Exists(Deck_Analysis_DL.Input_File);


            btn_RCC_Pier_Report.Enabled = File.Exists(rcc_pier.rep_file_name);
            //btn_dwg_pier.Enabled = File.Exists(rcc_pier.rep_file_name);

            //btn_long_Report.Enabled = File.Exists(LongGirder.rep_file_name);
            //btnReport.Enabled = File.Exists(Deck.rep_file_name);
            //btn_dwg_rcc_deck.Enabled = File.Exists(Deck.drawing_path);
            //btn_dwg_main_girder.Enabled = File.Exists(LongGirder.user_drawing_file);


        }
        public void Open_AnalysisFile(string file_name)
        {
            string analysis_file = file_name;
            bool flag = false;


            if (!File.Exists(analysis_file)) return;
            user_path = Path.GetDirectoryName(file_name);

            string wrkg_folder = Path.GetDirectoryName(analysis_file);
            string dl_file, ll_file;

            if (Path.GetFileName(wrkg_folder) == "Dead Load Analysis")
            {
                user_path = Path.GetDirectoryName(user_path);

                Deck_Analysis_DL.Input_File = analysis_file;
                dl_file = Deck_Analysis_DL.Input_File;
                //dl_file = File.Exists(dl_file) ? dl_file : Deck_Analysis_DL.Input_File;
                if (File.Exists(dl_file))
                {
                    Deck_Analysis_DL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, dl_file);
                    Show_Moment_Shear_DL();
                    //Show_ReadMemberLoad(analysis_file);
                }

                wrkg_folder = Path.GetDirectoryName(wrkg_folder);
                wrkg_folder = Path.Combine(wrkg_folder, "Live Load Analysis");

                ll_file = Path.Combine(wrkg_folder, "Input_Data_LL.txt");
                Deck_Analysis_LL.Input_File = ll_file;
                //ll_file = Path.Combine(wrkg_folder, "ANALYSIS_REP.txt");
                //ll_file = File.Exists(ll_file) ? ll_file : Deck_Analysis_LL.Input_File;
                if (File.Exists(ll_file))
                {
                    //Deck_Analysis_LL.Truss_Analysis = new SteelTrussMemberAnalysis(iApp, ll_file);

                    flag = true;
                    Deck_Analysis_LL.Bridge_Analysis = null;
                    Deck_Analysis_LL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, ll_file);
                    Show_Moment_Shear_LL();
                }
            }
            else if (Path.GetFileName(wrkg_folder) == "Live Load Analysis")
            {
                ll_file = analysis_file;

                Deck_Analysis_LL.Input_File = analysis_file;
                ll_file = analysis_file;
                //ll_file = File.Exists(ll_file) ? ll_file : Deck_Analysis_LL.Input_File;
                if (File.Exists(ll_file))
                {
                    flag = true;
                    Deck_Analysis_LL.Bridge_Analysis = null;
                    Deck_Analysis_LL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, ll_file);
                    Show_Moment_Shear_LL();
                }

                wrkg_folder = Path.GetDirectoryName(wrkg_folder);
                wrkg_folder = Path.Combine(wrkg_folder, "Dead Load Analysis");

                dl_file = Path.Combine(wrkg_folder, "Input_Data_DL.txt");
                Deck_Analysis_DL.Input_File = dl_file;
                //dl_file = Path.Combine(wrkg_folder, "ANALYSIS_REP.txt");
                //dl_file = File.Exists(dl_file) ? dl_file : Deck_Analysis_DL.Input_File;
                if (File.Exists(dl_file))
                {
                    Deck_Analysis_DL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, dl_file);
                    Show_Moment_Shear_DL();
                    //Show_ReadMemberLoad(analysis_file);
                }
            }
            else
            {
                wrkg_folder = Path.GetDirectoryName(analysis_file);
                wrkg_folder = Path.Combine(wrkg_folder, "Dead Load Analysis");


                dl_file = Path.Combine(wrkg_folder, "Input_Data_DL.txt");
                Deck_Analysis_DL.Input_File = dl_file;


                if (File.Exists(dl_file))
                {
                    flag = true;
                    Deck_Analysis_DL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, dl_file);
                    Show_Moment_Shear_DL();
                }

                wrkg_folder = Path.GetDirectoryName(analysis_file);
                wrkg_folder = Path.Combine(wrkg_folder, "Live Load Analysis");



                ll_file = Path.Combine(wrkg_folder, "Input_Data_LL.txt");

                if (!File.Exists(ll_file))
                    ll_file = Get_Live_Load_Analysis_Input_File(1);

                Deck_Analysis_LL.Input_File = ll_file;



                if (File.Exists(ll_file))
                {
                    Deck_Analysis_LL.Bridge_Analysis = null;
                    Deck_Analysis_LL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, ll_file);
                    Show_Moment_Shear_LL();
                }

            }

            if (File.Exists(analysis_file))
            {
                //btn_Ana_DL_view_structure.Enabled = true;

                try
                {

                    if (flag)
                    {
                        if (Deck_Analysis_LL.Bridge_Analysis != null)
                        {
                            if (Deck_Analysis_LL.Bridge_Analysis.Analysis.Joints.Count > 1)
                            {
                                Deck_Analysis_LL.Skew_Angle = (int)((180.0 / Math.PI) * Math.Atan((Deck_Analysis_LL.Bridge_Analysis.Analysis.Joints[1].X / Deck_Analysis_LL.Bridge_Analysis.Analysis.Joints[1].Z)));
                                txt_Ana_skew_angle.Text = Deck_Analysis_LL.Skew_Angle.ToString();
                            }
                        }

                        txt_Ana_L.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Length.ToString();
                        txt_Ana_X.Text = "-" + txt_Ana_L.Text;
                        txt_Ana_B.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width.ToString();
                        txt_Ana_width_cantilever.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width_Cantilever.ToString();
                        txt_Ana_DL_eff_depth.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Effective_Depth.ToString();

                        txt_support_distance.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Support_Distance.ToString();

                        txt_Ana_DL_eff_depth.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Effective_Depth.ToString();
                        txt_Ana_width_cantilever.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width_Cantilever.ToString();

                        txt_Ana_skew_angle.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Skew_Angle.ToString();

                        txt_gd_np.Text = (Deck_Analysis_LL.Bridge_Analysis.Analysis.NoOfPanels - 1).ToString("0");
                        txt_Ana_analysis_file.Visible = true;
                        txt_Ana_analysis_file.Text = analysis_file;
                        //MessageBox.Show(this, "File opened successfully.");
                    }
                    else
                    {
                        txt_Ana_L.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Length.ToString();
                        txt_Ana_X.Text = "-" + txt_Ana_L.Text;
                        txt_Ana_B.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Width.ToString();
                        txt_gd_np.Text = (Deck_Analysis_DL.Bridge_Analysis.Analysis.NoOfPanels - 1).ToString("0");

                        txt_support_distance.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Support_Distance.ToString();

                        txt_Ana_DL_eff_depth.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Effective_Depth.ToString();
                        txt_Ana_width_cantilever.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Width_Cantilever.ToString();

                        txt_Ana_analysis_file.Visible = true;
                        txt_Ana_analysis_file.Text = analysis_file;
                        //MessageBox.Show(this, "File opened successfully.");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString());

                }
            }
            string ll_txt = Path.Combine(user_path, "LL.txt");
            Deck_Analysis_DL.Live_Load_List = LoadData.GetLiveLoads(ll_txt);
            if (Deck_Analysis_DL.Live_Load_List == null) return;
        }


        public void Open_AnalysisFile_2013_04_27(string file_name)
        {
            string analysis_file = file_name;
            bool flag = false;


            if (!File.Exists(analysis_file)) return;
            user_path = Path.GetDirectoryName(file_name);

            if (File.Exists(analysis_file))
            {
                List<string> list = new List<string>(File.ReadAllLines(analysis_file));
                for (int i = 0; i < list.Count; i++)
                {
                    if (list[i].ToUpper().Contains("LOAD GENE"))
                    {
                        flag = true;
                        break;
                    }
                }
            }

            string ff = Path.Combine(Path.GetDirectoryName(analysis_file), "Live Load Analysis\\Input_Data_LL.txt");

            if (File.Exists(ff))
            {
                analysis_file = ff;
            }

            string wrkg_folder = Path.GetDirectoryName(analysis_file);
            string dl_file, ll_file;
            if (Path.GetFileName(wrkg_folder) == "Dead Load Analysis")
            {
                user_path = Path.GetDirectoryName(user_path);

                Deck_Analysis_DL.Input_File = analysis_file;
                dl_file = Path.Combine(wrkg_folder, "ANALYSIS_REP.txt");
                dl_file = File.Exists(dl_file) ? dl_file : Deck_Analysis_DL.Input_File;
                if (File.Exists(dl_file))
                {
                    Deck_Analysis_DL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, dl_file);
                    Show_Moment_Shear_DL();
                    //Show_ReadMemberLoad(analysis_file);
                }

                wrkg_folder = Path.GetDirectoryName(wrkg_folder);
                wrkg_folder = Path.Combine(wrkg_folder, "Live Load Analysis");

                ll_file = Path.Combine(wrkg_folder, "Input_Data_LL.txt");
                Deck_Analysis_LL.Input_File = ll_file;
                ll_file = Path.Combine(wrkg_folder, "ANALYSIS_REP.txt");
                ll_file = File.Exists(ll_file) ? ll_file : Deck_Analysis_LL.Input_File;
                if (File.Exists(ll_file))
                {
                    //Deck_Analysis_LL.Truss_Analysis = new SteelTrussMemberAnalysis(iApp, ll_file);

                    flag = true;
                    Deck_Analysis_LL.Bridge_Analysis = null;
                    Deck_Analysis_LL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, ll_file);
                    Show_Moment_Shear_LL();
                }
            }
            else if (Path.GetFileName(wrkg_folder) == "Live Load Analysis")
            {
                ll_file = analysis_file;

                Deck_Analysis_LL.Input_File = analysis_file;
                ll_file = Path.Combine(wrkg_folder, "ANALYSIS_REP.txt");
                ll_file = File.Exists(ll_file) ? ll_file : Deck_Analysis_LL.Input_File;
                if (File.Exists(ll_file))
                {
                    flag = true;
                    Deck_Analysis_LL.Bridge_Analysis = null;
                    Deck_Analysis_LL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, ll_file);
                    Show_Moment_Shear_LL();
                }

                wrkg_folder = Path.GetDirectoryName(wrkg_folder);
                wrkg_folder = Path.Combine(wrkg_folder, "Dead Load Analysis");

                dl_file = Path.Combine(wrkg_folder, "Input_Data_DL.txt");
                Deck_Analysis_DL.Input_File = dl_file;
                dl_file = Path.Combine(wrkg_folder, "ANALYSIS_REP.txt");
                dl_file = File.Exists(dl_file) ? dl_file : Deck_Analysis_DL.Input_File;
                if (File.Exists(dl_file))
                {
                    Deck_Analysis_DL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, dl_file);
                    Show_Moment_Shear_DL();
                    //Show_ReadMemberLoad(analysis_file);
                }
            }
            else
            {

                analysis_file = Deck_Analysis_LL.Input_File;



                ll_file = analysis_file;

                Deck_Analysis_LL.Input_File = analysis_file;
                ll_file = Path.Combine(wrkg_folder, "ANALYSIS_REP.txt");
                ll_file = File.Exists(ll_file) ? ll_file : Deck_Analysis_LL.Input_File;
                if (File.Exists(ll_file))
                {
                    flag = true;
                    Deck_Analysis_LL.Bridge_Analysis = null;
                    Deck_Analysis_LL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, ll_file);
                    Show_Moment_Shear_LL();
                }

                wrkg_folder = Path.GetDirectoryName(wrkg_folder);
                wrkg_folder = Path.Combine(wrkg_folder, "Dead Load Analysis");

                dl_file = Path.Combine(wrkg_folder, "Input_Data_DL.txt");
                Deck_Analysis_DL.Input_File = dl_file;
                dl_file = Path.Combine(wrkg_folder, "ANALYSIS_REP.txt");
                dl_file = File.Exists(dl_file) ? dl_file : Deck_Analysis_DL.Input_File;
                if (File.Exists(dl_file))
                {
                    Deck_Analysis_DL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, dl_file);
                    Show_Moment_Shear_DL();
                    //Show_ReadMemberLoad(analysis_file);
                }
            }
            if (File.Exists(analysis_file))
            {
                //btn_Ana_DL_view_structure.Enabled = true;

                try
                {

                    if (flag)
                    {
                        if (Deck_Analysis_LL != null)
                        {
                            if (Deck_Analysis_LL.Bridge_Analysis.Analysis.Joints.Count > 1)
                            {
                                Deck_Analysis_LL.Skew_Angle = (int)((180.0 / Math.PI) * Math.Atan((Deck_Analysis_LL.Bridge_Analysis.Analysis.Joints[1].X / Deck_Analysis_LL.Bridge_Analysis.Analysis.Joints[1].Z)));
                                txt_Ana_skew_angle.Text = Deck_Analysis_LL.Skew_Angle.ToString();
                            }
                        }

                        txt_Ana_L.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Length.ToString();
                        txt_Ana_X.Text = "-" + txt_Ana_L.Text;
                        txt_Ana_B.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width.ToString();
                        txt_Ana_width_cantilever.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width_Cantilever.ToString();
                        txt_Ana_DL_eff_depth.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Effective_Depth.ToString();

                        txt_support_distance.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Support_Distance.ToString();

                        txt_Ana_DL_eff_depth.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Effective_Depth.ToString();
                        txt_Ana_width_cantilever.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Width_Cantilever.ToString();

                        txt_Ana_skew_angle.Text = Deck_Analysis_LL.Bridge_Analysis.Analysis.Skew_Angle.ToString();



                        txt_gd_np.Text = (Deck_Analysis_LL.Bridge_Analysis.Analysis.NoOfPanels - 1).ToString("0");
                        txt_Ana_analysis_file.Visible = true;
                        txt_Ana_analysis_file.Text = analysis_file;
                        MessageBox.Show(this, "File opened successfully.");
                    }
                    else
                    {
                        txt_Ana_L.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Length.ToString();
                        txt_Ana_X.Text = "-" + txt_Ana_L.Text;
                        txt_Ana_B.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Width.ToString();
                        txt_gd_np.Text = (Deck_Analysis_DL.Bridge_Analysis.Analysis.NoOfPanels - 1).ToString("0");

                        txt_support_distance.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Support_Distance.ToString();

                        txt_Ana_DL_eff_depth.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Effective_Depth.ToString();
                        txt_Ana_width_cantilever.Text = Deck_Analysis_DL.Bridge_Analysis.Analysis.Width_Cantilever.ToString();

                        txt_Ana_analysis_file.Visible = true;
                        txt_Ana_analysis_file.Text = analysis_file;
                        MessageBox.Show(this, "File opened successfully.");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString());

                }
            }
            string ll_txt = Path.Combine(user_path, "LL.txt");
            Deck_Analysis_DL.Live_Load_List = LoadData.GetLiveLoads(ll_txt);
            if (Deck_Analysis_DL.Live_Load_List == null) return;
        }

        public string[] Get_MovingLoad_Data(List<LoadData> lst_load_data)
        {
            List<string> load_lst = new List<string>();
            //load_lst.Add("UNIT kN ME");

            double lat_clrns = 0.5;
            int total_lanes = 1;
            double xincr = 0.5;
            double x, y, z;

            double vehicle_width = 0.0;
            double calc_width = 0;
            MyList mlist = null;


            if (true)
            {
                //load_lst.Add("DEFINE MOVING LOAD FILE LL.TXT");
                //load_lst.Add("TYPE 1 CLA 1.179");
                //load_lst.Add("TYPE 2 CLB 1.188");
                //load_lst.Add("TYPE 3 A70RT 1.10");
                //load_lst.Add("TYPE 4 CLAR 1.179");
                //load_lst.Add("TYPE 5 A70RR 1.188");
                //load_lst.Add("TYPE 6 IRC24RTRACK 1.188");
                //load_lst.Add("TYPE 7 RAILBG 1.25");

                //iApp.LiveLoads.Impact_Factor(ref load_lst, iApp.DesignStandard);


                Deck_Analysis_LL.LoadReadFromGrid(dgv_Ana_live_load);

                if (!load_lst.Contains("DEFINE MOVING LOAD FILE LL.TXT"))
                    load_lst.Add("DEFINE MOVING LOAD FILE LL.TXT");
                foreach (LoadData ld in Deck_Analysis_LL.LoadList)
                {
                    if (!load_lst.Contains(ld.ToString())) load_lst.Add(ld.ToString());
                }
                load_lst.Add("LOAD GENERATION " + txt_LL_load_gen.Text);
                foreach (LoadData ld in Deck_Analysis_LL.LoadList)
                {
                    //sw.WriteLine("TYPE 6 -60.0 0 1.00 XINC 0.5");
                    load_lst.Add(string.Format("{0} {1:f3} {2} {3:f3} XINC {4}", ld.TypeNo, ld.X, ld.Y, ld.Z, ld.XINC));
                }

            }
            if (calc_width > Deck_Analysis_DL.WidthBridge)
            {
                string str = "In case Total Calculated Width " + calc_width + " > Width of Bridge " + Deck_Analysis_DL.WidthBridge;

                str = str + "\nUser requested No. of Lanes of Vehicles can not be accomodated within the width of bridge.";
                MessageBox.Show(str, "ASTRA");
                return null;
            }

            return load_lst.ToArray();
        }

        #endregion Composite Methods


        private void frm_PSC_Box_Load(object sender, EventArgs e)
        {
            if (iApp.DesignStandard == eDesignStandard.BritishStandard)
            {
                cmb_long_open_file.Items.Clear();
                cmb_long_open_file.Items.Add(string.Format("DEAD LOAD ANALYSIS"));
                //cmb_long_open_file.Items.Add(string.Format("TOTAL ANALYSIS"));
                //cmb_long_open_file.Items.Add(string.Format("TOTAL DL + LL ANALYSIS"));
                //cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 1"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 2"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 3"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 4"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 5"));
                cmb_long_open_file.Items.Add(string.Format("GIRDER ANALYSIS RESULTS"));

                //grb_ll_indian.Visible = false;
                //pic_diagram.Size = new Size(pic_diagram.Size.Width, 280);

                cmb_HB.SelectedIndex = 0;

                British_Interactive();

                grb_LL_indian.Visible = false;

                //tc_main.TabPages.Remove(tab_rcc_abutment);

            }
            else
            {
                cmb_long_open_file.Items.Clear();
                cmb_long_open_file.Items.Add(string.Format("DEAD LOAD ANALYSIS"));
                //cmb_long_open_file.Items.Add(string.Format("TOTAL DL + LL ANALYSIS"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS"));
                cmb_long_open_file.Items.Add(string.Format("GIRDER ANALYSIS RESULTS"));
                tbc_girder.TabPages.Remove(tab_moving_data_british);

            }


            txt_Ana_B.Text = "9.750";


            Deck_Analysis_DL = new PSC_BoxGirderAnalysis(iApp);
            Deck_Analysis_LL = new PSC_BoxGirderAnalysis(iApp);
            LongGirder = new PostTensionLongGirder(iApp);
            Deck = new RccDeckSlab(iApp);
            //dgv_Ana_DL_live_load.Rows.Add("TYPE 1 : IRCCLASSA", -48.75, 0, 2.75, 0.2);
            //dgv_Ana_DL_live_load.Rows.Add("TYPE 1 : IRCCLASSA", -48.75, 0, 6.25, 0.2);
            iApp.LiveLoads.Fill_Combo(ref cmb_Ana_load_type);
            if (cmb_Ana_load_type.Items.Count > 6) cmb_Ana_load_type.SelectedIndex = 6;


            //dgv_Ana_live_load.Rows.Add(cmb_Ana_load_type.Text, "-" + txt_Ana_X.Text, txt_Ana_DL_Y.Text, "1.50", txt_XINCR.Text, "1.90");
            //dgv_Ana_live_load.Rows.Add(cmb_Ana_load_type.Text, "-" + txt_Ana_X.Text, txt_Ana_DL_Y.Text, "4.50", txt_XINCR.Text, "1.90");


            dgv_Ana_live_load.Rows.Add(cmb_Ana_load_type.Text, txt_Ana_X.Text, txt_Ana_DL_Y.Text, "1.50", txt_XINCR.Text, "1.90");
            dgv_Ana_live_load.Rows.Add(cmb_Ana_load_type.Text, txt_Ana_X.Text, txt_Ana_DL_Y.Text, "4.50", txt_XINCR.Text, "1.90");



            txt_LL_load_gen.Text = (L / MyList.StringToDouble(txt_XINCR.Text, 1.0)).ToString("0");
            //dgv_Ana_DL_live_load.Rows.Add("TYPE 1 : IRCCLASSA", -18.8, 0, 9.75, 0.2);


            #region RCC Pier
            cmb_pier_2_k.SelectedIndex = 1;
            rcc_pier = new RccPier(iApp);
            //pic_pier_interactive_diagram.BackgroundImage = AstraFunctionOne.ImageCollection.Pier_drawing

            cmb_rcc_pier_fck.SelectedIndex = 4;
            cmb_rcc_pier_fy.SelectedIndex = 1;
            #endregion RCC Pier

            #region IRC Abutment

            //tc_limit_design.TabPages.Remove(tab_abutment);
            uC_RCC_Abut1.iApp = iApp;
            uC_RCC_Abut1.Load_Data();

            #endregion IRC Abutment




            Button_Enable_Disable();
            Load_Tab2_Tab3_Box_Segment_Data();
            Update_Tab3_Data();
            cmb_tab1_Fcu.SelectedIndex = 6;
            cmb_tab1_Fy.SelectedIndex = 1;
            //cmb_main_DL_BM.SelectedIndex = 2;
            //cmb_main_LL_BM.SelectedIndex = 2;
            //cmb_main_DL_SF.SelectedIndex = 0;
            //cmb_main_LL_SF.SelectedIndex = 0;


            //Chiranjit [2013 06 19]
            cmb_tab2_strand_data.SelectedIndex = 3;
            cmb_tab2_nc.SelectedIndex = 5;

            //Open_Project();
            Set_Project_Name();

            uC_BoxGirder1.iApp = iApp;

        }

        private void Open_Project()
        {


            //Chiranjit [2014 10 08]
            #region Select Design Option

            try
            {
                //eDesignOption edp = iApp.Get_Design_Option(Title);
                //if (edp == eDesignOption.None)
                //{
                //    this.Close();
                //}
                //else if (edp == eDesignOption.Open_Design)
                //{

                IsCreate_Data = false;


                //user_path = Path.Combine(iApp.LastDesignWorkingFolder, Title);
                string chk_file = Path.Combine(user_path, "INPUT_DATA.TXT");

                Segment_Girder.FilePath = user_path;
                rcc_pier.FilePath = user_path;
                uC_RCC_Abut1.iApp = iApp;


                Set_Segment_Data();
                Open_AnalysisFile(chk_file);

                //Chiranjit [2013 04 26]
                //iApp.Read_Form_Record(this, user_path);


                //Chiranjit [2013 10 09]
                IsRead = true;
                iApp.Read_Form_Record(this, user_path);
                IsRead = false;


                if (iApp.DesignStandard == eDesignStandard.BritishStandard)
                {
                    British_Interactive();
                    Default_British_HB_Type_LoadData(dgv_british_loads);
                }

                Set_Box_Forces();
                Set_Segment_Data();
                Segment_Girder.FilePath = user_path;
                rcc_pier.FilePath = user_path;

                txt_Ana_analysis_file.Text = chk_file;


                uC_RCC_Abut1.Modified_Cells();



                if (iApp.IsDemo)
                    MessageBox.Show("ASTRA USB Dongle not found at any port....\nOpening with default data......", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                else
                    MessageBox.Show("Data Loaded successfully.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //}

                Button_Enable_Disable();
                grb_create_input_data.Enabled = true;
                Text_Changed();
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, "Input data file Error..");
            }
            #endregion Design Option

        }

        private void btn_Stressing_Graph_Click(object sender, EventArgs e)
        {
            try
            {
                string excel_path = Path.Combine(Application.StartupPath, @"DESIGN\Pre Stressed\Stressing Graph");
                string excel_file = "TECHSOFT_STRESSING_GRAPH.xls";
                excel_file = Path.Combine(excel_path, excel_file);
                if (File.Exists(excel_file))
                {
                    iApp.OpenExcelFile(Worksheet_Folder, excel_file, "2011ap");
                }
            }
            catch (Exception ex) { }
        }

        private void btn_dwg_main_girder_Click(object sender, EventArgs e)
        {

            iApp.SetDrawingFile_Path(LongGirder.user_drawing_file, "PreStressed_Main_Girder", "");
        }

        private void btn_dwg_rcc_deck_Click(object sender, EventArgs e)
        {

        }

        //Chiranjit [2012 10 30]
        #region Design of RCC Pier

        private void cmb_pier_2_k_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (cmb_pier_2_k.SelectedIndex)
            {
                case 0: txt_pier_2_k.Text = "1.50"; break;
                case 1: txt_pier_2_k.Text = "0.66"; break;
                case 2: txt_pier_2_k.Text = "0.50"; break;
                case 3: txt_pier_2_k.Text = ""; txt_pier_2_k.Focus(); break;
            }
        }

        private void btn_RccPier_Report_Click(object sender, EventArgs e)
        {
            iApp.View_Result(rcc_pier.rep_file_name);

        }
        private void cmb_concrete_grade_steel_grade_SelectedIndexChanged(object sender, EventArgs e)
        {
            ASTRAGrade astg = null;

            ComboBox cmb = sender as ComboBox;

            Control ctrl = sender as Control;

            if (ctrl.Name.ToLower().StartsWith("cmb_rcc_pier") || ctrl.Name.ToLower().StartsWith("txt_rcc_pier"))
            {
                astg = new ASTRAGrade(cmb_rcc_pier_fck.Text, cmb_rcc_pier_fy.Text);
                txt_rcc_pier_sigma_c.Text = astg.sigma_c_N_sq_mm.ToString();
                txt_rcc_pier_sigma_st.Text = astg.sigma_st_N_sq_mm.ToString();
            }
        }

        private void btn_RccPier_Process_Click(object sender, EventArgs e)
        {
            //Chiranjit [2012 10 30]
            Write_All_Data();



            double MX1, MY1, W1;

            MX1 = MY1 = W1 = 0.0;

            MX1 = MyList.StringToDouble(txt_RCC_Pier_Mx1.Text, 0.0);
            MY1 = MyList.StringToDouble(txt_RCC_Pier_Mz1.Text, 0.0);
            W1 = MyList.StringToDouble(txt_RCC_Pier_W1_supp_reac.Text, 0.0);

            if (MX1 == 0.0 && MY1 == 0.0 && W1 == 0.0)
            {
                string msg = "Design forces are not found from Bridge Deck Analysis in the current folder\n";
                msg += "Please enter the Design Forces manualy.\n\n";
                msg += "For Example : W1  = 6101.1 kN\n";
                msg += "            : MX1 = 274.8 kN-m\n";
                msg += "            : MZ1 = 603.1 kN-m\n";

                MessageBox.Show(msg, "ASTRA");
            }
            else
            {
                if (rcc_pier == null) rcc_pier = new RccPier(iApp);
                rcc_pier.FilePath = user_path;
                RCC_Pier_Initialize_InputData();
                rcc_pier.Calculate_Program();
                //rcc_pier.Write_User_Input();
                rcc_pier.Write_Drawing_File();
                iApp.Save_Form_Record(this, user_path);
                if (File.Exists(rcc_pier.rep_file_name)) { MessageBox.Show(this, "Report file written in " + rcc_pier.rep_file_name, "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information); iApp.View_Result(rcc_pier.rep_file_name); }
                rcc_pier.is_process = true;
            }
            Button_Enable_Disable();
        }
        private void btn_RccPier_Drawing_Click(object sender, EventArgs e)
        {
            //iapp.SetDrawingFile(user_input_file, "PIER");

            //string drwg_path = Path.Combine(Application.StartupPath, "DRAWINGS\\RccPierDrawings");
            //System.Environment.SetEnvironmentVariable("ASTRA_DRAWINGS", drwg_path);
            //iApp.RunViewer(Drawing_Folder, "RCC_Pier_Worksheet_Design_1");
            //iapp.RunViewer(drwg_path);


            string draw_cmd = "PSC_Box_Girder_Pier";
            iApp.RunViewer(Path.Combine(Drawing_Folder, "RCC Pier Drawings"), draw_cmd);


        }
        public void RCC_Pier_Initialize_InputData()
        {
            rcc_pier.L1 = 0.0d;
            rcc_pier.W1 = 0.0d;
            rcc_pier.W2 = 0.0d;
            rcc_pier.W3 = 0.0d;
            rcc_pier.W4 = 0.0d;
            rcc_pier.W5 = 0.0d;
            rcc_pier.total_vehicle_load = 0.0d;
            rcc_pier.D1 = 0.0d;
            rcc_pier.D2 = 0.0d;
            rcc_pier.D3 = 0.0d;

            rcc_pier.RL6 = 0.0d;
            rcc_pier.RL5 = 0.0d;
            rcc_pier.RL4 = 0.0d;
            rcc_pier.RL3 = 0.0d;
            rcc_pier.RL2 = 0.0d;
            rcc_pier.RL1 = 0.0d;
            rcc_pier.H1 = 0.0d;
            rcc_pier.H2 = 0.0d;
            rcc_pier.H3 = 0.0d;
            rcc_pier.H4 = 0.0d;
            rcc_pier.H5 = 0.0d;
            rcc_pier.H6 = 0.0d;
            rcc_pier.H7 = 0.0d;
            rcc_pier.H8 = 0.0d;
            rcc_pier.B1 = 0.0d;
            rcc_pier.B2 = 0.0d;
            rcc_pier.B3 = 0.0d;
            rcc_pier.B4 = 0.0d;
            rcc_pier.B5 = 0.0d;
            rcc_pier.B6 = 0.0d;
            rcc_pier.B7 = 0.0d;
            rcc_pier.B8 = 0.0d;
            rcc_pier.B9 = 0.0d;
            rcc_pier.B10 = 0.0d;
            rcc_pier.B11 = 0.0d;
            rcc_pier.B12 = 0.0d;
            rcc_pier.B13 = 0.0d;
            rcc_pier.B14 = 0.0d;
            rcc_pier.B15 = 1.078d;
            rcc_pier.B16 = 0.0d;
            rcc_pier.NR = 0.0d;
            rcc_pier.NP = 0.0d;
            rcc_pier.gama_c = 0.0d;
            rcc_pier.MX1 = 0.0d;
            rcc_pier.MY1 = 0.0d;
            rcc_pier.sigma_s = 0.0d;

            #region Data Input Form 1 Variables
            rcc_pier.L1 = MyList.StringToDouble(txt_RCC_Pier_L.Text, 0.0);
            rcc_pier.w1 = MyList.StringToDouble(txt_RCC_Pier_CW.Text, 0.0);
            rcc_pier.w2 = MyList.StringToDouble(txt_RCC_Pier__B.Text, 0.0);
            rcc_pier.w3 = MyList.StringToDouble(txt_RCC_Pier_Wp.Text, 0.0);


            rcc_pier.a1 = MyList.StringToDouble(txt_RCC_Pier_Hp.Text, 0.0);
            rcc_pier.NB = MyList.StringToDouble(txt_RCC_Pier_NMG.Text, 0.0);
            rcc_pier.d1 = MyList.StringToDouble(txt_RCC_Pier_DMG.Text, 0.0);
            rcc_pier.d2 = MyList.StringToDouble(txt_RCC_Pier_DS.Text, 0.0);
            rcc_pier.gama_c = MyList.StringToDouble(txt_RCC_Pier_gama_c.Text, 0.0);
            rcc_pier.B1 = MyList.StringToDouble(txt_RCC_Pier_B1.Text, 0.0);
            rcc_pier.B2 = MyList.StringToDouble(txt_RCC_Pier_B2.Text, 0.0);
            rcc_pier.H1 = MyList.StringToDouble(txt_RCC_Pier_H1.Text, 0.0);
            rcc_pier.B3 = MyList.StringToDouble(txt_RCC_Pier_B3.Text, 0.0);
            rcc_pier.B4 = MyList.StringToDouble(txt_RCC_Pier_B4.Text, 0.0);
            rcc_pier.H2 = MyList.StringToDouble(txt_RCC_Pier_H2.Text, 0.0);
            rcc_pier.B5 = MyList.StringToDouble(txt_RCC_Pier_B5.Text, 0.0);
            rcc_pier.B6 = MyList.StringToDouble(txt_RCC_Pier_B6.Text, 0.0);
            rcc_pier.RL1 = MyList.StringToDouble(txt_RCC_Pier_RL1.Text, 0.0);
            rcc_pier.RL2 = MyList.StringToDouble(txt_RCC_Pier_RL2.Text, 0.0);
            rcc_pier.RL3 = MyList.StringToDouble(txt_RCC_Pier_RL3.Text, 0.0);
            rcc_pier.RL4 = MyList.StringToDouble(txt_RCC_Pier_RL4.Text, 0.0);
            rcc_pier.RL5 = MyList.StringToDouble(txt_RCC_Pier_RL5.Text, 0.0);
            rcc_pier.form_lev = MyList.StringToDouble(txt_RCC_Pier_Form_Lev.Text, 0.0);
            rcc_pier.B7 = MyList.StringToDouble(txt_RCC_Pier_B7.Text, 0.0);
            rcc_pier.H3 = MyList.StringToDouble(txt_RCC_Pier_H3.Text, 0.0);
            rcc_pier.H4 = MyList.StringToDouble(txt_RCC_Pier_H4.Text, 0.0);
            rcc_pier.B8 = MyList.StringToDouble(txt_RCC_Pier_B8.Text, 0.0);
            rcc_pier.H5 = MyList.StringToDouble(txt_RCC_Pier_H5.Text, 0.0);
            rcc_pier.H6 = MyList.StringToDouble(txt_RCC_Pier_H6.Text, 0.0);
            rcc_pier.H7 = MyList.StringToDouble(txt_RCC_Pier_H7.Text, 0.0);
            rcc_pier.B9 = MyList.StringToDouble(txt_RCC_Pier_B9.Text, 0.0);
            rcc_pier.B10 = MyList.StringToDouble(txt_RCC_Pier_B10.Text, 0.0);
            rcc_pier.B11 = MyList.StringToDouble(txt_RCC_Pier_B11.Text, 0.0);
            rcc_pier.B12 = MyList.StringToDouble(txt_RCC_Pier_B12.Text, 0.0);
            rcc_pier.B13 = MyList.StringToDouble(txt_RCC_Pier_B13.Text, 0.0);
            rcc_pier.B14 = MyList.StringToDouble(txt_RCC_Pier___B.Text, 0.0);
            rcc_pier.over_all = rcc_pier.H7 + rcc_pier.H5 + rcc_pier.H6;
            //rcc_pier.B15 = MyList.StringToDouble(txt_RCC_Pier_B15.Text, 0.0);


            rcc_pier.p1 = MyList.StringToDouble(txt_RCC_Pier_p1.Text, 0.0);
            rcc_pier.p2 = MyList.StringToDouble(txt_RCC_Pier_p2.Text, 0.0);
            rcc_pier.d_dash = MyList.StringToDouble(txt_RCC_Pier_d_dash.Text, 0.0);
            rcc_pier.D = MyList.StringToDouble(txt_RCC_Pier_D.Text, 0.0);
            rcc_pier.b = MyList.StringToDouble(txt_RCC_Pier_b.Text, 0.0);

            //rcc_pier.Pu = MyList.StringToDouble(txt_Pu.Text, 0.0);
            //rcc_pier.Mux = MyList.StringToDouble(txt_Mux.Text, 0.0);
            //rcc_pier.Muy = MyList.StringToDouble(txt_Muy.Text, 0.0);
            rcc_pier.NP = MyList.StringToDouble(txt_RCC_Pier_NP.Text, 0.0);
            rcc_pier.NR = MyList.StringToDouble(txt_RCC_Pier_NR.Text, 0.0);
            rcc_pier.MX1 = MyList.StringToDouble(txt_RCC_Pier_Mx1.Text, 0.0);
            rcc_pier.MY1 = MyList.StringToDouble(txt_RCC_Pier_Mz1.Text, 0.0);
            rcc_pier.total_vehicle_load = MyList.StringToDouble(txt_RCC_Pier_vehi_load.Text, 0.0);
            rcc_pier.W1 = MyList.StringToDouble(txt_RCC_Pier_W1_supp_reac.Text, 0.0);

            rcc_pier.fck1 = MyList.StringToDouble(cmb_rcc_pier_fck.Text, 0.0);
            rcc_pier.perm_flex_stress = MyList.StringToDouble(txt_rcc_pier_sigma_c.Text, 0.0);
            rcc_pier.fck2 = MyList.StringToDouble(cmb_rcc_pier_fck.Text, 0.0);
            rcc_pier.fy2 = MyList.StringToDouble(cmb_rcc_pier_fy.Text, 0.0);
            rcc_pier.fy1 = MyList.StringToDouble(cmb_rcc_pier_fy.Text, 0.0);
            rcc_pier.sigma_s = MyList.StringToDouble(txt_rcc_pier_sigma_st.Text, 0.0);

            rcc_pier.m = MyList.StringToDouble(txt_rcc_pier_m.Text, 0.0);
            #endregion Data Input Form 1 Variables

            #region Data Input Form 2 Variables
            rcc_pier.P2 = MyList.StringToDouble(txt_pier_2_P2.Text, 0.0);
            rcc_pier.P3 = MyList.StringToDouble(txt_pier_2_P3.Text, 0.0);

            rcc_pier.B16 = MyList.StringToDouble(txt_pier_2_B16.Text, 0.0);
            //rcc_pier.total_pairs = MyList.StringToDouble(txt_pier_2_total_pairs.Text, 0.0);
            rcc_pier.PL = MyList.StringToDouble(txt_pier_2_PL.Text, 0.0);
            rcc_pier.PML = MyList.StringToDouble(txt_pier_2_PML.Text, 0.0);
            rcc_pier.APD = txt_pier_2_APD.Text;
            rcc_pier.PD = txt_pier_2_PD.Text;
            rcc_pier.SC = MyList.StringToDouble(txt_pier_2_SC.Text, 0.0);
            rcc_pier.HHF = MyList.StringToDouble(txt_pier_2_HHF.Text, 0.0);
            rcc_pier.V = MyList.StringToDouble(txt_pier_2_V.Text, 0.0);
            rcc_pier.K = MyList.StringToDouble(txt_pier_2_k.Text, 0.0);
            rcc_pier.CF = MyList.StringToDouble(txt_pier_2_CF.Text, 0.0);
            rcc_pier.LL = MyList.StringToDouble(txt_pier_2_LL.Text, 0.0);
            rcc_pier.Vr = MyList.StringToDouble(txt_pier_2_Vr.Text, 0.0);
            rcc_pier.Itc = MyList.StringToDouble(txt_pier_2_Itc.Text, 0.0);
            rcc_pier.sdia = MyList.StringToDouble(txt_pier_2_sdia.Text, 0.0);
            rcc_pier.sleg = MyList.StringToDouble(txt_pier_2_slegs.Text, 0.0);
            rcc_pier.ldia = MyList.StringToDouble(txt_pier_2_ldia.Text, 0.0);
            rcc_pier.SBC = MyList.StringToDouble(txt_pier_2_SBC.Text, 0.0);

            #endregion Data Input Form 2 Variables



            rcc_pier.rdia = MyList.StringToDouble(txt_RCC_Pier_rdia.Text, 0.0);
            rcc_pier.tdia = MyList.StringToDouble(txt_RCC_Pier_tdia.Text, 0.0);



            rcc_pier.hdia = MyList.StringToDouble(txt_pier_2_hdia.Text, 0.0);
            rcc_pier.hlegs = MyList.StringToDouble(txt_pier_2_hlegs.Text, 0.0);
            rcc_pier.vdia = MyList.StringToDouble(txt_pier_2_vdia.Text, 0.0);
            rcc_pier.vlegs = MyList.StringToDouble(txt_pier_2_vlegs.Text, 0.0);
            rcc_pier.vspc = MyList.StringToDouble(txt_pier_2_vspc.Text, 0.0);
        }

        void Text_Changed()
        {
            double L = MyList.StringToDouble(txt_Ana_L.Text, 0.0);
            double B = MyList.StringToDouble(txt_Ana_B.Text, 0.0);
            txt_LL_load_gen.Text = (L / MyList.StringToDouble(txt_XINCR.Text, 0.0)).ToString("f0");


            txt_tab1_Lo.Text = L.ToString("f3");
            txt_tab1_DW.Text = B.ToString("f3");
            txt_RCC_Pier_L.Text = L.ToString("f3");


            txt_RCC_Pier__B.Text = B.ToString("f3");
            txt_RCC_Pier___B.Text = B.ToString("f3");

            //txt_RCC_Pier_CW.Text = CW.ToString();
            //txt_RCC_Pier_DS.Text = (Ds).ToString();
            //txt_RCC_Pier_gama_c.Text = Y_c.ToString();

            //txt_RCC_Pier_NMG.Text = NMG.ToString();
            //txt_RCC_Pier_NP.Text = NMG.ToString();
            //txt_RCC_Pier_DMG.Text = (DMG).ToString();

            //txt_RCC_Pier_Hp.Text = Hp.ToString();

            //txt_RCC_Pier_Wp.Text = Wp.ToString();



            uC_RCC_Abut1.Length = L;
            uC_RCC_Abut1.Width = B;
            uC_RCC_Abut1.Overhang = MyList.StringToDouble(txt_support_distance.Text, 0.0);
        }

        #endregion Design of RCC Pier



        private void btn_Open_Worksheet_Design_Click(object sender, EventArgs e)
        {
            try
            {
                Button b = sender as Button;
                string excel_path = Path.Combine(Application.StartupPath, "DESIGN");
                //string excel_file = "PSC Box Girder\\" + b.Text + ".xls";
                //string excel_file = "PSC Box Girder\\New Design of PSC BOX Girder.xls";
                string excel_file = "PSC Box Girder\\" + b.Tag.ToString() + ".xls";
                excel_file = Path.Combine(excel_path, excel_file);
                //excel_file = Path.Combine(excel_path, excel_file);
                if (File.Exists(excel_file))
                {
                    //iApp.OpenExcelFile(excel_file, "2011ap");
                    //iApp.OpenExcelFile(
                    iApp.OpenExcelFile(Worksheet_Folder, excel_file, "2011ap");
                }
            }
            catch (Exception ex) { }
        }

        private void btn_open_drawings_Click(object sender, EventArgs e)
        {
            string draw_cmd = "PSC_Box_Girder";
            //iApp.RunViewer(Path.Combine(Drawing_Folder, "PSC Box Girder Drawings"), draw_cmd);

            Button b = sender as Button;

            string draw = Drawing_Folder;



            eOpenDrawingOption opt = iApp.Open_Drawing_Option();
            if (opt == eOpenDrawingOption.Cancel) return;



            string excel_file = "PSC Box Girder\\" + "New Design Of PSC Box Girder.xls";
            //excel_file = Path.Combine(excel_path, excel_file);

            string copy_path = Path.Combine(Worksheet_Folder, excel_file);


            if (opt == eOpenDrawingOption.Design_Drawings)
            {

                #region Design_Drawings
                if (b.Name == btn_open_drawings.Name)
                {
                    //iApp.RunViewer(Path.Combine(Drawing_Folder, "Drawings of PSC I Girder Bridge"), "PSC_I_GIRDER_LS");

                    //iApp.RunViewer(Path.Combine(Drawing_Folder, "Drawings of PSC I Girder Bridge"), "PSC_I_GIRDER_LS");


                    iApp.Form_Drawing_Editor(eBaseDrawings.PSC_BOX_Girder_GAD, Title, Drawing_Folder, copy_path).ShowDialog();

                }
                //if (b.Name == btn_dwg_open_consts.Name)
                //{
                //    iApp.RunViewer(Path.Combine(Drawing_Folder, "Sample Construction Drawings"), "COST_Girder_Bridges");
                //}
                //if (b.Name == btn_dwg_rcc_abut.Name)
                //{
                //    //iApp.SetDrawingFile_Path(Abut.drawing_path, "Abutment_Cantilever", "Abutment_Sample");
                //    iApp.RunViewer(Path.Combine(Drawing_Folder, "RCC Abutment Drawings"), "PSC_I_Girder_Abutment");
                //}
                else if (b.Name == btn_dwg_pier.Name)
                {
                    iApp.RunViewer(Path.Combine(Drawing_Folder, "RCC Pier Drawings"), "PSC_I_Girder_Pier");
                }
                //else if (b.Name == btn_dwg_open_Deckslab.Name)
                //{
                //    iApp.Form_Drawing_Editor(eBaseDrawings.RCC_T_Girder_LS_DECK_SLAB, Title, draw, copy_path).ShowDialog();
                //}
                else if (b.Name == btn_dwg_open_Counterfort.Name)
                {
                    iApp.Form_Drawing_Editor(eBaseDrawings.RCC_T_Girder_LS_COUNTERFORT_ABUTMENT, Title, draw, copy_path).ShowDialog();
                }
                else if (b.Name == btn_dwg_open_Cantilever.Name)
                {
                    iApp.Form_Drawing_Editor(eBaseDrawings.RCC_T_GIRDER_LS_CANTILEVER_ABUTMENT, Title, draw, copy_path).ShowDialog();
                }
                else if (b.Name == btn_dwg_open_Pier.Name)
                {
                    iApp.Form_Drawing_Editor(eBaseDrawings.RCC_T_GIRDER_LS_PIER, Title, draw, copy_path).ShowDialog();
                }
                #endregion Design_Drawings
            }
            else if (opt == eOpenDrawingOption.Sample_Drawings)
            {

                #region Design_Drawings
                if (b.Name == btn_open_drawings.Name)
                {
                    iApp.RunViewer(Path.Combine(Drawing_Folder, "PSC Box Girder Drawings"), "PSC_Box_Girder");
                }
                //if (b.Name == btn_dwg_open_consts.Name)
                //{
                //    iApp.RunViewer(Path.Combine(Drawing_Folder, "Sample Construction Drawings"), "COST_Girder_Bridges");
                //}
                //if (b.Name == btn_dwg_rcc_abut.Name)
                //{
                //    //iApp.SetDrawingFile_Path(Abut.drawing_path, "Abutment_Cantilever", "Abutment_Sample");
                //    iApp.RunViewer(Path.Combine(Drawing_Folder, "RCC Abutment Drawings"), "PSC_I_Girder_Abutment");
                //}
                else if (b.Name == btn_dwg_pier.Name)
                {
                    iApp.RunViewer(Path.Combine(Drawing_Folder, "RCC Pier Drawings"), "PSC_Box_Girder_Pier");
                }
                //else if (b.Name == btn_dwg_open_Deckslab.Name)
                //{
                //    iApp.Form_Drawing_Editor(eBaseDrawings.RCC_T_Girder_LS_DECK_SLAB, Title, draw, copy_path).ShowDialog();
                //}
                else if (b.Name == btn_dwg_open_Counterfort.Name)
                {
                    iApp.Form_Drawing_Editor(eBaseDrawings.RCC_T_Girder_LS_COUNTERFORT_ABUTMENT, Title, draw, copy_path).ShowDialog();
                }
                else if (b.Name == btn_dwg_open_Cantilever.Name)
                {
                    iApp.Form_Drawing_Editor(eBaseDrawings.RCC_T_GIRDER_LS_CANTILEVER_ABUTMENT, Title, draw, copy_path).ShowDialog();
                }
                else if (b.Name == btn_dwg_open_Pier.Name)
                {
                    iApp.RunViewer(Path.Combine(Drawing_Folder, "RCC Pier Drawings"), "PSC_Box_Girder_Pier");
                }
                #endregion Design_Drawings
            }
        }

        private void btn_design_of_anchorage_Click(object sender, EventArgs e)
        {
            try
            {
                Button b = sender as Button;
                string excel_path = Path.Combine(Application.StartupPath, "DESIGN");
                string excel_file = "PSC Box Girder\\" + "Diaphragm_EndAnchorage_BlisterBlock_FuturePreStress.XLS";
                excel_file = Path.Combine(excel_path, excel_file);
                if (File.Exists(excel_file))
                {
                    iApp.OpenExcelFile(Worksheet_Folder, excel_file, "2011ap");
                }
            }
            catch (Exception ex) { }
        }

        private void btn_worksheet_open_Click(object sender, EventArgs e)
        {
            iApp.Open_ASTRA_Worksheet_Dialog();
        }

        private void cmb_Ana_DL_load_type_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (iApp.LiveLoads.Count > 0)
                {
                    txt_Ana_X.Text = iApp.LiveLoads[cmb_Ana_load_type.SelectedIndex].Distance.ToString("f4"); // Chiranjit [2013 05 28] Kolkata
                    txt_Load_Impact.Text = iApp.LiveLoads[cmb_Ana_load_type.SelectedIndex].Default_ImpactFactor.ToString("f3");
                }
            }
            catch (Exception ex) { }
        }

        #region Chiranjit [2012 02 08]
        public ReadForceType GetForceType()
        {
            ReadForceType rft = new ReadForceType();
            rft.M1 = true;
            rft.R1 = true;
            rft.M2 = chk_M2.Checked;
            rft.M3 = chk_M3.Checked;
            rft.R3 = chk_R3.Checked;
            rft.R2 = chk_R2.Checked;
            return rft;
        }

        private void btn_update_force_Click(object sender, EventArgs e)
        {
            string ana_rep_file = File.Exists(Deck_Analysis_LL.Analysis_Report) ? Deck_Analysis_LL.Analysis_Report : Analysis_Report_LL;
            //string ana_rep_file = Deck_Analysis_LL.Analysis_Report;
            iApp.Progress_ON("Read forces...");
            iApp.SetProgressValue(9, 100);
            if (File.Exists(ana_rep_file))
            {
                //Deck_Analysis_LL.Truss_Analysis = null;
                //Deck_Analysis_LL.Truss_Analysis = new SteelTrussMemberAnalysis(iApp, ana_rep_file);
                Deck_Analysis_LL.Bridge_Analysis.ForceType = GetForceType();
                iApp.SetProgressValue(19, 100);
                Show_Moment_Shear_LL();
                iApp.SetProgressValue(29, 100);

                grb_create_input_data.Enabled = rbtn_Ana_DL_create_analysis_file.Checked;
                grb_Ana_DL_select_analysis.Enabled = !rbtn_Ana_DL_create_analysis_file.Checked;

                grb_create_input_data.Enabled = !rbtn_Ana_DL_select_analysis_file.Checked;
                grb_Ana_DL_select_analysis.Enabled = rbtn_Ana_DL_select_analysis_file.Checked;

                Button_Enable_Disable();
                Show_Analysis_Result();
                iApp.SetProgressValue(49, 100);
            }
            //else
            //    MessageBox.Show("Analysis Result not found.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);



            ana_rep_file = File.Exists(Deck_Analysis_DL.Analysis_Report) ? Deck_Analysis_DL.Analysis_Report : Analysis_Report_DL;
            iApp.SetProgressValue(59, 100);
            if (File.Exists(ana_rep_file))
            {
                //Deck_Analysis_DL.Truss_Analysis = null;
                //Deck_Analysis_DL.Truss_Analysis = new SteelTrussMemberAnalysis(iApp, ana_rep_file);
                Deck_Analysis_DL.Bridge_Analysis.ForceType = GetForceType();
                iApp.SetProgressValue(69, 100);
                Show_Moment_Shear_DL();
            }
            iApp.SetProgressValue(89, 100);

            grb_create_input_data.Enabled = rbtn_Ana_DL_create_analysis_file.Checked;
            grb_Ana_DL_select_analysis.Enabled = !rbtn_Ana_DL_create_analysis_file.Checked;

            grb_create_input_data.Enabled = !rbtn_Ana_DL_select_analysis_file.Checked;
            grb_Ana_DL_select_analysis.Enabled = rbtn_Ana_DL_select_analysis_file.Checked;

            Button_Enable_Disable();
            Show_Analysis_Result();
            iApp.SetProgressValue(99, 100);
            iApp.Progress_OFF();
        }
        #endregion
        #region Chiranjit [2012 07 20]
        private void DemoCheck()
        {
            if (iApp.Check_Demo_Version())
            {
                txt_Ana_L.Text = "0";
                txt_Ana_L.Text = "48.75";
                txt_Ana_B.Text = "9.75";
                //txt_Ana_CW.Text = "10.75";txt_tab1_Lo

                //string str = "This is Demo Version of ASTRA Pro. This will process only the default Data shown as sample.\n\n";
                //str += "For Professional Version of ASTRA Pro please contact : \n\nTechSOFT Engineering Services\n\n";
                //str += "Website : http://www.techsoftglobal.com, http://www.headsview.com\n\n";
                //str += "Email at: techsoft@consultant.com, dataflow@mail.com\n";
                //MessageBox.Show(this, str, Title, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        #endregion Chiranjit [2012 07 20]
        public void Write_All_Data()
        {
            DemoCheck();

            iApp.Save_Form_Record(this, user_path);
        }
        public string User_Input_Data
        {
            get
            {
                if (!Directory.Exists(user_path)) return "";
                return Path.Combine(user_path, "ASTRA_DATA_FILE.TXT");

            }
        }

        public void Read_All_Data()
        {
            if (iApp.IsDemo) return;

            string data_file = User_Input_Data;

            if (!File.Exists(data_file)) return;
            user_path = Path.Combine(iApp.LastDesignWorkingFolder, Title);

            try
            {
                LongGirder.FilePath = user_path;
                Deck.FilePath = user_path;
                rcc_pier.FilePath = user_path;
            }
            catch (Exception ex) { }

            List<string> file_content = new List<string>(File.ReadAllLines(data_file));

            ePSC_I_GirderOption TOpt = ePSC_I_GirderOption.None;

            MyList mlist = null;
            MyList mlist_mov_ll = null;
            string kStr = "";

            SaveRec.Clear();
            SaveRec.AddControls(this);

            for (int i = 0; i < file_content.Count; i++)
            {
                try
                {
                    kStr = MyList.RemoveAllSpaces(file_content[i].Trim());
                    mlist = new MyList(kStr, '=');
                    if (kStr.Contains("---")) continue;

                    if (mlist.Count == 2)
                    {
                        try
                        {
                            Control c = SaveRec.Controls[mlist.StringList[0]] as Control;
                            if (c != null)
                            {
                                if (c.Name.StartsWith("txt"))
                                    c.Text = mlist.StringList[1];
                                else if (c.Name.StartsWith("cmb"))
                                {
                                    //ComboBox cmb = (c as ComboBox);
                                    (c as ComboBox).SelectedItem = mlist.StringList[1];
                                }
                                else if (c.Name.StartsWith("dgv"))
                                {

                                    DataGridView dgv = c as DataGridView;
                                    int row = mlist.GetInt(1);
                                    dgv.Rows.Clear();
                                    i++;
                                    for (int j = 0; j < row; j++, i++)
                                    {
                                        kStr = MyList.RemoveAllSpaces(file_content[i].Trim());
                                        mlist = new MyList(kStr, '$');
                                        dgv.Rows.Add(mlist.StringList.ToArray());

                                    }

                                }

                            }
                        }
                        catch (Exception ex) { }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("ERROR : " + kStr);
                }
            }
        }

        private void txt_Ana_DL_length_TextChanged(object sender, EventArgs e)
        {
            txt_LL_load_gen.Text = (MyList.StringToDouble(txt_Ana_L.Text, 0.0) / MyList.StringToDouble(txt_XINCR.Text, 0.2)).ToString("f0");

            //txt_Ana_X.Text = "-" + txt_Ana_L.Text;


            txt_deck_width.Text = txt_Ana_B.Text;
            try
            {
                for (int i = 0; i < dgv_Ana_live_load.RowCount; i++)
                {
                    dgv_Ana_live_load[4, i].Value = txt_XINCR.Text;
                    //dgv_Ana_live_load[1, i].Value = txt_Ana_X.Text;
                }

                for (int i = 1; i < dgv_seg_tab3_1.ColumnCount; i++)
                {
                    dgv_seg_tab3_1[i, 0].Value = txt_Ana_DL_eff_depth.Text;
                    dgv_seg_tab3_1[i, 1].Value = txt_Ana_B.Text;
                    dgv_seg_tab3_1[i, 3].Value = txt_Ana_width_cantilever.Text;
                }
            }
            catch (Exception ex) { }



            Text_Changed();



            uC_BoxGirder1.txt_BM_DL_Supp.Text = txt_Ana_dead_inner_long_support_moment.Text;
            uC_BoxGirder1.txt_BM_DL_Deff.Text = txt_Ana_dead_inner_long_deff_moment.Text;
            uC_BoxGirder1.txt_BM_DL_L8.Text = txt_Ana_dead_inner_long_L8_moment.Text;
            uC_BoxGirder1.txt_BM_DL_L4.Text = txt_Ana_dead_inner_long_L4_moment.Text;
            uC_BoxGirder1.txt_BM_DL_3L8.Text = txt_Ana_dead_inner_long_3L_8_moment.Text;
            uC_BoxGirder1.txt_BM_DL_Mid.Text = txt_Ana_dead_inner_long_L2_moment.Text;



            uC_BoxGirder1.txt_SF_DL_Supp.Text = txt_Ana_dead_inner_long_support_shear.Text;
            uC_BoxGirder1.txt_SF_DL_Deff.Text = txt_Ana_dead_inner_long_deff_shear.Text;
            uC_BoxGirder1.txt_SF_DL_L8.Text = txt_Ana_dead_inner_long_L8_shear.Text;
            uC_BoxGirder1.txt_SF_DL_L4.Text = txt_Ana_dead_inner_long_L4_shear.Text;
            uC_BoxGirder1.txt_SF_DL_3L8.Text = txt_Ana_dead_inner_long_3L_8_shear.Text;
            uC_BoxGirder1.txt_SF_DL_Mid.Text = txt_Ana_dead_inner_long_L2_shear.Text;


            uC_BoxGirder1.txt_BM_LL_Supp.Text = txt_Ana_live_inner_long_support_moment.Text;
            uC_BoxGirder1.txt_BM_LL_Deff.Text = txt_Ana_live_inner_long_deff_moment.Text;
            uC_BoxGirder1.txt_BM_LL_L8.Text = txt_Ana_live_inner_long_L8_moment.Text;
            uC_BoxGirder1.txt_BM_LL_L4.Text = txt_Ana_live_inner_long_L4_moment.Text;
            uC_BoxGirder1.txt_BM_LL_3L8.Text = txt_Ana_live_inner_long_3L_8_moment.Text;
            uC_BoxGirder1.txt_BM_LL_Mid.Text = txt_Ana_live_inner_long_L2_moment.Text;



            uC_BoxGirder1.txt_SF_LL_Supp.Text = txt_Ana_live_inner_long_support_shear.Text;
            uC_BoxGirder1.txt_SF_LL_Deff.Text = txt_Ana_live_inner_long_deff_shear.Text;
            uC_BoxGirder1.txt_SF_LL_L8.Text = txt_Ana_live_inner_long_L8_shear.Text;
            uC_BoxGirder1.txt_SF_LL_L4.Text = txt_Ana_live_inner_long_L4_shear.Text;
            uC_BoxGirder1.txt_SF_LL_3L8.Text = txt_Ana_live_inner_long_3L_8_shear.Text;
            uC_BoxGirder1.txt_SF_LL_Mid.Text = txt_Ana_live_inner_long_L2_shear.Text;





        }

        public void Load_Tab2_Tab3_Box_Segment_Data()
        {

            List<string> list = new List<string>();
            list.Add(string.Format("D 2.5 2.5 2.5 2.5 2.5 2.5"));
            list.Add(string.Format("Dw 9.75 9.75 9.75 9.75 9.75 9.75"));
            list.Add(string.Format("Td 0.225 0.225 0.225 0.225 0.225 0.225"));
            list.Add(string.Format("C1 1.925 1.925 1.925 1.925 1.925 1.925"));
            list.Add(string.Format("C2 0 0 0 0 0 0"));
            list.Add(string.Format("Tip 0.2 0.2 0.2 0.2 0.2 0.2"));
            list.Add(string.Format("Tf 0.3 0.3 0.3 0.3 0.3 0.3"));
            list.Add(string.Format("Iw 0.7 0.7 0.7 0.7 0.7 0.7"));
            list.Add(string.Format("D1 2.2 2.2 2.2 2.2 2.2 2.2"));
            list.Add(string.Format("Tw 0.6 0.579 0.48 0.31 0.31 0.31"));
            list.Add(string.Format("SW 4.5 4.5 4.5 4.5 4.5 4.5"));
            list.Add(string.Format("Ts 0.55 0.26 0.26 0.26 0.26 0.26"));
            list.Add(string.Format("D2 0 0 0 0 0 0"));
            list.Add(string.Format("K1 0 0 0 0 0 0"));
            list.Add(string.Format("K2 0.175 0.0827 0.0827 0.0827 0.0827 0.0827"));
            list.Add(string.Format("HW1 0.409 0.485 0.582 0.75 0.75 0.75"));
            list.Add(string.Format("HH1 0.083 0.097 0.116 0.15 0.15 0.15"));
            list.Add(string.Format("CH1 1.85 1.85 1.85 1.85 1.85 1.85"));
            list.Add(string.Format("HW2 0 0 0 0 0 0"));
            list.Add(string.Format("HH2 0 0 0 0 0 0"));
            list.Add(string.Format("HW3 0 0 0.088 0.3 0.3 0.3"));
            list.Add(string.Format("HH3 0 0 0.044 0.15 0.15 0.15"));


            MyList mlist = null;


            for (int i = 0; i < list.Count; i++)
            {
                mlist = new MyList(list[i], ' ');
                dgv_seg_tab3_1.Rows.Add(mlist.StringList.ToArray());
            }

            Set_Segment_Data();

        }

        private void Set_Segment_Data()
        {


            for (int i = 0; i < dgv_seg_tab3_1.Rows.Count; i++)
            {

                if (i == 0)
                    dgv_seg_tab3_1.Rows[i].Height = 26;
                else if (i > 13)
                    dgv_seg_tab3_1.Rows[i].Height = 16;
                else
                    dgv_seg_tab3_1.Rows[i].Height = 15;

                if (dgv_seg_tab3_1[0, i].Value.ToString() == "D2" ||
                    dgv_seg_tab3_1[0, i].Value.ToString() == "K1" ||
                    dgv_seg_tab3_1[0, i].Value.ToString() == "K2")
                {
                    dgv_seg_tab3_1.Rows[i].ReadOnly = true;
                    dgv_seg_tab3_1.Rows[i].DefaultCellStyle.ForeColor = Color.Blue;
                    dgv_seg_tab3_1.Rows[i].DefaultCellStyle.BackColor = Color.GreenYellow;
                }
            }
        }

        public void Segment_Girder_Initialize_Data()
        {
            #region Variable Declaration
            //Chiranjit [2012 10 26]
            Segment_Girder.Area_Zone1_Outer = MyList.StringToDouble(txt_zn1_out.Text, 1480.0);
            Segment_Girder.Area_Zone2_Outer = MyList.StringToDouble(txt_zn2_out.Text, 1480.0);
            Segment_Girder.Area_Zone3_Outer = MyList.StringToDouble(txt_zn3_out.Text, 1480.0);
            Segment_Girder.Area_Zone1_Inner = MyList.StringToDouble(txt_zn1_inn.Text, 1480.0);
            Segment_Girder.Area_Zone2_Inner = MyList.StringToDouble(txt_zn2_inn.Text, 1480.0);
            Segment_Girder.Area_Zone3_Inner = MyList.StringToDouble(txt_zn3_inn.Text, 1480.0);


            //Chiranjit [2012 10 17]
            Segment_Girder.rss_56 = MyList.StringToDouble(txt_tab2_rss_56.Text, 0.00019);
            Segment_Girder.rss_14 = MyList.StringToDouble(txt_tab2_rss_14.Text, 0.00025);
            Segment_Girder.Resh56 = MyList.StringToDouble(txt_tab2_Resh56.Text, 0.00025);
            Segment_Girder.Crst56 = MyList.StringToDouble(txt_tab2_Crst56.Text, 0.00025);


            //Chiranjit [2012 10 18]
            Segment_Girder.fc_temp14 = MyList.StringToDouble(txt_fc_temp14.Text, 0.00025);
            Segment_Girder.ft_temp14 = MyList.StringToDouble(txt_ft_temp14.Text, 0.00025);
            Segment_Girder.fc_temp28 = MyList.StringToDouble(txt_fc_temp28.Text, 0.00025);
            Segment_Girder.ft_temp28 = MyList.StringToDouble(txt_ft_temp28.Text, 0.00025);
            Segment_Girder.ttv = MyList.StringToDouble(txt_ttv.Text, 0.00025);
            Segment_Girder.fc_serv = MyList.StringToDouble(txt_fc_serv.Text, 0.00025);
            Segment_Girder.Modrup = MyList.StringToDouble(txt_Mod_rup.Text, 0.00025);
            Segment_Girder.fc_fact = MyList.StringToDouble(txt_fc_factor.Text, 0.00025);
            Segment_Girder.tv = MyList.StringToDouble(txt_tv.Text, 0.00025);
            Segment_Girder.ttu = MyList.StringToDouble(txt_ttu.Text, 0.00025);





            Segment_Girder.Lo = MyList.StringToDouble(txt_tab1_Lo.Text, 48.750);

            Segment_Girder.L1 = MyList.StringToDouble(txt_tab1_L1.Text, 0.500);
            Segment_Girder.L2 = MyList.StringToDouble(txt_tab1_L2.Text, 0.500);
            Segment_Girder.exg = MyList.StringToDouble(txt_tab1_exg.Text, 0.040);

            Segment_Girder.Dw = MyList.StringToDouble(txt_tab1_DW.Text, 9.750);
            Segment_Girder.D = MyList.StringToDouble(txt_tab1_D.Text, 2.500);
            Segment_Girder.Fcu = MyList.StringToDouble(cmb_tab1_Fcu.Text, 40);
            Segment_Girder.Tab1_Fy = MyList.StringToDouble(cmb_tab1_Fy.Text, 415);
            Segment_Girder.act = MyList.StringToDouble(txt_tab1_act.Text, 14);
            Segment_Girder.mct = MyList.StringToDouble(txt_tab1_Mct.Text, 87);
            Segment_Girder.sct = MyList.StringToDouble(txt_tab1_sctt.Text, 34.8);
            Segment_Girder.acsidl = MyList.StringToDouble(txt_tab1_agt_SIDL.Text, 56);
            Segment_Girder.mtcsidl = MyList.StringToDouble(txt_tab1_Mct_SIDL.Text, 100);
            Segment_Girder.T_loss = MyList.StringToDouble(txt_tab1_T_loss.Text, 20);
            Segment_Girder.wct = MyList.StringToDouble(txt_tab1_wct.Text, 0.065);
            Segment_Girder.ds = MyList.StringToDouble(txt_tab1_ds.Text, 0.225);
            Segment_Girder.df = MyList.StringToDouble(txt_tab1_df.Text, 0.175);
            Segment_Girder.bt = MyList.StringToDouble(txt_tab1_bt.Text, 1.000);

            Segment_Girder.FactDL = MyList.StringToDouble(txt_tab1_FactDL.Text, 1.250);
            Segment_Girder.FactSIDL = MyList.StringToDouble(txt_tab1_FactSIDL.Text, 2.000);
            Segment_Girder.FactLL = MyList.StringToDouble(txt_tab1_FactLL.Text, 2.500);

            Segment_Girder.alpha = MyList.StringToDouble(txt_tab1_alpha.Text, 0.0000117);


            Segment_Girder.Tr1 = MyList.StringToDouble(txt_tab1_Tr1.Text, 17.8);
            Segment_Girder.Tr2 = MyList.StringToDouble(txt_tab1_Tr2.Text, 4.0);
            Segment_Girder.Tr3 = MyList.StringToDouble(txt_tab1_Tr3.Text, 2.1);


            Segment_Girder.Tf1 = MyList.StringToDouble(txt_tab1_Tf1.Text, 10.6);
            Segment_Girder.Tf2 = MyList.StringToDouble(txt_tab1_Tf2.Text, 0.7);
            Segment_Girder.Tf3 = MyList.StringToDouble(txt_tab1_Tf3.Text, 0.8);
            Segment_Girder.Tf4 = MyList.StringToDouble(txt_tab1_Tf4.Text, 6.6);


            //Prestressing Input Data:   [Tab 2]

            //A)                 Construction Schedule and Prestressing Stages

            //    Job                                                                                                 Day after casting                 fcj   N/sq.mm (Mpa)
            //(i)                Completion of casting of Box Girder                                0                day
            //(ii)                First Stage Prestress                                                                14                day                                fcj14 = 34.80
            //(iii)                Completion of Wearing Course & Crash Barrier                56                day                                fcj56 = 40.00


            Segment_Girder.ccbg_day = MyList.StringToDouble(txt_tab2_ccbg_day.Text, 10.6);
            Segment_Girder.ccbg_fcj = MyList.StringToDouble(txt_tab2_ccbg_fcj.Text, 0.7);

            Segment_Girder.fsp_day = MyList.StringToDouble(txt_tab2_fsp_day.Text, 10.6);
            Segment_Girder.fsp_fcj = MyList.StringToDouble(txt_tab2_fsp_fcj.Text, 0.7);

            Segment_Girder.cwccb_day = MyList.StringToDouble(txt_tab2_cwccb_day.Text, 10.6);
            Segment_Girder.cwccb_fcj = MyList.StringToDouble(txt_tab2_cwccb_fcj.Text, 0.7);



            //B)                Cable and Prestressing Data

            //D                = 15.200 mm.                                   
            //A = 140.000 Sq.mm.
            //Pu = 1.100 Kg/m
            //Fy = 1670.000 N/Sq.mm. (Mpa)
            //Fu = 1860.000 N/Sq.mm. (Mpa)
            //Pn = 260.700 kN
            //Eps = 195 Gpa
            //Pj = 76.5 %
            //s = 6 mm.
            //µ = 0.17 per radian
            //k = 0.002 per metre
            //Re1 = 35.0 N/Sq.mm (Mpa)
            //Re2 = 0.0 N/Sq.mm (Mpa)
            //td1 = 14 days                     (Taken From Tab 1)
            //qd = 110 mm.
            //Fcu = 40 N/Sq.mm (Mpa)                                                  (Taken  From Tab 1)
            //Ec = 5000 x Sqrt(40) = 31622.8 N/Sq.mm (Mpa)


            Segment_Girder.ND = MyList.StringToDouble(txt_tab2_D.Text, 15.200);
            Segment_Girder.NA = MyList.StringToDouble(txt_tab2_A.Text, 140.000);
            Segment_Girder.Pu = MyList.StringToDouble(txt_tab2_Pu.Text, 1.100);
            Segment_Girder.Tab2_Fy = MyList.StringToDouble(txt_tab2_Fy.Text, 1670.000);
            Segment_Girder.Fu = MyList.StringToDouble(txt_tab2_Fu.Text, 1860.000);
            Segment_Girder.Pn = MyList.StringToDouble(txt_tab2_Pn.Text, 260.700);
            Segment_Girder.Eps = MyList.StringToDouble(txt_tab2_Eps.Text, 195);
            Segment_Girder.Pj = MyList.StringToDouble(txt_tab2_Pj.Text, 76.5);
            Segment_Girder.s = MyList.StringToDouble(txt_tab2_s.Text, 6);
            Segment_Girder.mu = MyList.StringToDouble(txt_tab2_mu.Text, 0.17);
            Segment_Girder.k = MyList.StringToDouble(txt_tab2_k.Text, 0.002);
            Segment_Girder.Re1 = MyList.StringToDouble(txt_tab2_Re1.Text, 35.0);
            Segment_Girder.Re2 = MyList.StringToDouble(txt_tab2_Re2.Text, 0.0);
            Segment_Girder.td1 = MyList.StringToDouble(txt_tab2_td1.Text, 14);
            Segment_Girder.qd = MyList.StringToDouble(txt_tab2_qd.Text, 110);
            Segment_Girder.cover1 = MyList.StringToDouble(txt_tab2_cover1.Text, 110);
            Segment_Girder.cover2 = MyList.StringToDouble(txt_tab2_cover2.Text, 110);
            Segment_Girder.Ns = MyList.StringToDouble(txt_tab2_Ns.Text, 19);
            Segment_Girder.Nc_Left = MyList.StringToInt(txt_tab2_nc_left.Text, 7);
            Segment_Girder.Nc_Right = MyList.StringToInt(txt_tab2_nc_right.Text, 7);
            Segment_Girder.Cable_Area = MyList.StringToInt(txt_tab2_cable_area.Text, 7);


            Segment_Girder.Section_Theta.Clear();
            Segment_Girder.Section_Theta.Add(MyList.StringToDouble(txt_tab3_support.Text, 0.0));
            Segment_Girder.Section_Theta.Add(MyList.StringToDouble(txt_tab3_d.Text, 0.0));
            Segment_Girder.Section_Theta.Add(MyList.StringToDouble(txt_tab3_L_8.Text, 0.0));
            Segment_Girder.Section_Theta.Add(MyList.StringToDouble(txt_tab3_L_4.Text, 0.0));
            Segment_Girder.Section_Theta.Add(MyList.StringToDouble(txt_tab3_3L_8.Text, 0.0));
            Segment_Girder.Section_Theta.Add(MyList.StringToDouble(txt_tab3_L_2.Text, 0.0));


            PSC_Force_Data list_va = new PSC_Force_Data(0);
            for (int i = 0; i < dgv_seg_tab3_1.RowCount; i++)
            {
                list_va = new PSC_Force_Data(0);
                for (int c = 1; c < dgv_seg_tab3_1.ColumnCount; c++)
                {
                    list_va.Add(MyList.StringToDouble(dgv_seg_tab3_1[c, i].Value.ToString(), 0.0));
                }

                if (i == 0)
                    Segment_Girder.Section_D = list_va;

                else if (i == 1)
                    Segment_Girder.Section_Dw = list_va;

                else if (i == 2)
                    Segment_Girder.Section_Td = list_va;

                else if (i == 3)
                    Segment_Girder.Section_C1 = list_va;

                else if (i == 4)
                    Segment_Girder.Section_C2 = list_va;

                else if (i == 5)
                    Segment_Girder.Section_Tip = list_va;

                else if (i == 6)
                    Segment_Girder.Section_Tf = list_va;

                else if (i == 7)
                    Segment_Girder.Section_lw = list_va;

                else if (i == 8)
                    Segment_Girder.Section_D1 = list_va;

                else if (i == 9)
                    Segment_Girder.Section_Tw = list_va;

                else if (i == 10)
                    Segment_Girder.Section_SW = list_va;

                else if (i == 11)
                    Segment_Girder.Section_Ts = list_va;

                else if (i == 12)
                    Segment_Girder.Section_D2 = list_va;

                else if (i == 13)
                    Segment_Girder.Section_K1 = list_va;

                else if (i == 14)
                    Segment_Girder.Section_K2 = list_va;

                else if (i == 15)
                    Segment_Girder.Section_HW1 = list_va;

                else if (i == 16)
                    Segment_Girder.Section_HH1 = list_va;

                else if (i == 17)
                    Segment_Girder.Section_CH1 = list_va;

                else if (i == 18)
                    Segment_Girder.Section_HW2 = list_va;

                else if (i == 19)
                    Segment_Girder.Section_HH2 = list_va;

                else if (i == 20)
                    Segment_Girder.Section_HW3 = list_va;

                else if (i == 21)
                    Segment_Girder.Section_HH3 = list_va;
            }

            //Segment_Girder.Fcu = 40;
            //Ec = 31622.8;
            //double Ec = 5000 x rt(40) = 31622.8 N/.mm (Mpa)


            //Chiranjit [2013 06 19]
            Segment_Girder.Cable_Type = cmb_tab2_strand_data.Text;


            //Chiranjit [2013 06 19]
            Segment_Girder.L_Deff = MyList.StringToDouble(txt_Ana_DL_eff_depth.Text, 0.0);



            #endregion Variable Declaration
        }

        private void btn_segment_process_Click(object sender, EventArgs e)
        {
            Write_All_Data();

            Segment_Girder.FilePath = user_path;
            Segment_Girder_Initialize_Data();
            Box_Forces.Set_Absolute();
            Segment_Girder.Calculate_Program(Segment_Girder.rep_file_name, Box_Forces);
            iApp.Save_Form_Record(this, user_path);
            if (File.Exists(Segment_Girder.rep_file_name))
            {
                MessageBox.Show(this, "Report file written in " + Segment_Girder.rep_file_name, "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                frm_BoxGirder_Msg.Msg_Showw();
                iApp.View_Result(Segment_Girder.rep_file_name, true);
            }
            Segment_Girder.is_process = true;
            Button_Enable_Disable();
        }

        private void txt_tab2_Fcu_TextChanged(object sender, EventArgs e)
        {
            txt_tab2_Ec.Text = (5000.0 * Math.Sqrt(MyList.StringToDouble(txt_tab2_Fcu.Text, 0.0))).ToString("f2");
        }

        private void dgv_seg_tab3_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            Update_Tab3_Data();
        }

        private void Update_Tab3_Data()
        {
            try
            {
                double theta = 0.0;
                double D2 = 0.0;
                double K1 = 0.0;
                double K2 = 0.0;
                double va = 5;
                for (int i = 1; i < dgv_seg_tab3_1.ColumnCount; i++)
                {
                    theta = Math.Atan((MyList.StringToDouble(dgv_seg_tab3_1[i, 7].Value.ToString(), 0.0) /
                            MyList.StringToDouble(dgv_seg_tab3_1[i, 8].Value.ToString(), 0.0)));

                    va = (180.0 / Math.PI) * theta;

                    //Web Inclination = θ (degrees) = atan (Iw / D1) = atan (0.7 / 2.200) = atan(0.3182) = 17.650
                    //and  D2 = D – Tf – D1 = 2.500 – 0.300 – 2.200 = 0.0
                    D2 = (MyList.StringToDouble(dgv_seg_tab3_1[i, 0].Value.ToString(), 0.0) -
                            MyList.StringToDouble(dgv_seg_tab3_1[i, 6].Value.ToString(), 0.0) -
                            MyList.StringToDouble(dgv_seg_tab3_1[i, 8].Value.ToString(), 0.0));

                    K1 = D2 * Math.Tan(theta);
                    K2 = MyList.StringToDouble(dgv_seg_tab3_1[i, 11].Value.ToString(), 0.0) * Math.Tan(theta);


                    dgv_seg_tab3_1[i, 12].Value = D2.ToString("f3");
                    dgv_seg_tab3_1[i, 13].Value = K1.ToString("f3");
                    dgv_seg_tab3_1[i, 14].Value = K2.ToString("f3");
                    //K1 = D2 x tan(θ) = 0.0 x tan(17.6501) = 0.0
                    //K2 = Ts x tan(θ) = 0.550 x tan(17.6501) = 0.1750
                    theta = (180.0 / Math.PI) * theta;
                    if (i == 1) txt_tab3_support.Text = theta.ToString("f3");
                    if (i == 2) txt_tab3_d.Text = theta.ToString("f3");
                    if (i == 3) txt_tab3_L_8.Text = theta.ToString("f3");
                    if (i == 4) txt_tab3_L_4.Text = theta.ToString("f3");
                    if (i == 5) txt_tab3_3L_8.Text = theta.ToString("f3");
                    if (i == 6) txt_tab3_L_2.Text = theta.ToString("f3");



                    txt_tab1_ds.Text = dgv_seg_tab3_1[i, 2].Value.ToString();

                }



                for (int i = 0; i < dgv_seg_tab3_1.RowCount; i++)
                {
                    for (int c = 0; c < uC_BoxGirder1.dgv_seg_tab3.ColumnCount; c++)
                    {
                        uC_BoxGirder1.dgv_seg_tab3[c, i].Value = dgv_seg_tab3_1[c, i].Value;
                    }
                }
                uC_BoxGirder1.Update_Tab3_Data();

            }
            catch (Exception ex) { }
        }

        private void btn_Show_Section_Result_Click(object sender, EventArgs e)
        {
            Show_Section_Result();
        }

        private void Show_Section_Result()
        {

            //Segment_Girder.FilePath = user_path;
            Segment_Girder_Initialize_Data();
            rtb_sections.Lines = Segment_Girder.Get_Step_1(ref PSC_SECIONS).ToArray();
        }


        private void btn_segment_report_Click(object sender, EventArgs e)
        {
            try
            {
                if (File.Exists(Segment_Girder.rep_file_name))
                    iApp.View_Result(Segment_Girder.rep_file_name);
            }
            catch (Exception ex) { }
        }

        private void txt_Ana_DL_factor_TextChanged(object sender, EventArgs e)
        {
            lbl_factor.Text = "DL X " + DL_Factor + " + LL X " + LL_Factor;
            Text_Changed_Forces();

        }

        private void txt_tab1_Lo_TextChanged(object sender, EventArgs e)
        {
            txt_tab1_L.Text = (MyList.StringToDouble(txt_tab1_Lo.Text, 0.0) - 2 * MyList.StringToDouble(txt_tab1_L1.Text, 0.0)).ToString("f3");
        }

        private void cmb_tab1_Fcu_SelectedIndexChanged(object sender, EventArgs e)
        {
            Set_Concrete_Grade();
        }

        private void Set_Concrete_Grade()
        {

            double mct_14 = MyList.StringToDouble(txt_tab1_Mct.Text, 0.0);
            double mct_SIDL = MyList.StringToDouble(txt_tab1_Mct_SIDL.Text, 0.0);

            double fcu = MyList.StringToDouble(cmb_tab1_Fcu.Text, 0.0);

            //txt_tab1_Mct.Text = "";
            txt_tab1_sctt.Text = (mct_14 / 100.0 * fcu).ToString("f3");
            txt_tab2_fsp_fcj.Text = txt_tab1_sctt.Text;
            txt_tab2_cwccb_fcj.Text = (mct_SIDL / 100.0 * fcu).ToString("f3");



            txt_tab2_Fcu.Text = cmb_tab1_Fcu.Text;


            //txt_tab1_act.Text = cmb_tab1_Fcu.Text;

            txt_tab2_fsp_day.Text = txt_tab1_act.Text;


            //txt_tab1_agt_SIDL.Text = cmb_tab1_Fcu.Text;


            txt_tab2_cwccb_day.Text = txt_tab1_agt_SIDL.Text;




        }

        private void cmb_tab2_strand_data_SelectedIndexChanged(object sender, EventArgs e)
        {
            double D = 0.0, A = 0.0, Pu = 0.0, Fy = 0.0, Fu = 0.0, Pn = 0.0;

            if (cmb_tab2_strand_data.SelectedIndex == 0)
            {
                D = 12.9;
                A = 100.0;
                Pu = 0.785;
                Fy = 1580.0;
                Fu = 1860.0;
                Pn = 186.0;
            }
            else if (cmb_tab2_strand_data.SelectedIndex == 1)
            {
                D = 12.7;
                A = 98.7;
                Pu = 0.775;
                Fy = 1670.0;
                Fu = 1860.0;
                Pn = 183.7;
            }
            else if (cmb_tab2_strand_data.SelectedIndex == 2)
            {
                D = 15.7;
                A = 150;
                Pu = 1.18;
                Fy = 1500;
                Fu = 1770;
                Pn = 265.0;
            }
            else if (cmb_tab2_strand_data.SelectedIndex == 3)
            {
                D = 15.2;
                A = 140;
                Pu = 1.10;
                Fy = 1670.0;
                Fu = 1860.0;
                Pn = 260.7;
            }

            txt_tab2_D.Text = D.ToString();
            txt_tab2_A.Text = A.ToString();
            txt_tab2_Pu.Text = Pu.ToString();
            txt_tab2_Fy.Text = Fy.ToString();
            txt_tab2_Fu.Text = Fu.ToString();
            txt_tab2_Pn.Text = Pn.ToString();
        }

        private void cmb_tab2_nc_SelectedIndexChanged(object sender, EventArgs e)
        {
            txt_tab2_nc_left.Text = (cmb_tab2_nc.SelectedIndex + 2).ToString();
            txt_tab2_nc_right.Text = txt_tab2_nc_left.Text;

        }

        private void txt_pier_2_APD_TextChanged(object sender, EventArgs e)
        {

            txt_pier_2_APD.TextAlign = HorizontalAlignment.Left;
            txt_pier_2_APD.WordWrap = true;

            double b16 = MyList.StringToDouble(txt_pier_2_B16.Text, 0.0);

            string kStr = txt_pier_2_APD.Text.Replace(",", " ").Trim().TrimEnd().TrimStart();
            kStr = MyList.RemoveAllSpaces(kStr);

            MyList mlist = new MyList(kStr, ' ');

            kStr = "";
            try
            {
                for (int i = 0; i < mlist.Count; i++)
                {
                    if (mlist.GetDouble(i) < b16)
                    {
                        kStr += mlist.StringList[i] + ",";
                    }
                }
                kStr = kStr.Substring(0, kStr.Length - 1);
            }
            catch (Exception ex) { }

            txt_pier_2_PD.Text = kStr;
        }


        #region Chiranjit [2014 03 12] Support Input
        public string Start_Support_Text
        {
            get
            {
                string kStr = "PINNED";
                if (rbtn_ssprt_pinned.Checked)
                    kStr = "PINNED";
                else if (rbtn_ssprt_fixed.Checked)
                {
                    kStr = "FIXED";


                    if (chk_ssprt_fixed_FX.Checked
                        || chk_ssprt_fixed_FY.Checked
                        || chk_ssprt_fixed_FZ.Checked
                        || chk_ssprt_fixed_MX.Checked
                        || chk_ssprt_fixed_MY.Checked
                        || chk_ssprt_fixed_MZ.Checked)
                        kStr += " BUT";

                    if (chk_ssprt_fixed_FX.Checked) kStr += " FX";
                    if (chk_ssprt_fixed_FY.Checked) kStr += " FY";
                    if (chk_ssprt_fixed_FZ.Checked) kStr += " FZ";
                    if (chk_ssprt_fixed_MX.Checked) kStr += " MX";
                    if (chk_ssprt_fixed_MY.Checked) kStr += " MY";
                    if (chk_ssprt_fixed_MZ.Checked) kStr += " MZ";
                }
                return kStr;
            }
        }
        public string END_Support_Text
        {
            get
            {
                string kStr = "PINNED";
                if (rbtn_esprt_pinned.Checked)
                    kStr = "PINNED";
                else if (rbtn_esprt_fixed.Checked)
                {
                    kStr = "FIXED";
                    if (chk_esprt_fixed_FX.Checked
                        || chk_esprt_fixed_FY.Checked
                        || chk_esprt_fixed_FZ.Checked
                        || chk_esprt_fixed_MX.Checked
                        || chk_esprt_fixed_MY.Checked
                        || chk_esprt_fixed_MZ.Checked)
                        kStr += " BUT";
                    if (chk_esprt_fixed_FX.Checked) kStr += " FX";
                    if (chk_esprt_fixed_FY.Checked) kStr += " FY";
                    if (chk_esprt_fixed_FZ.Checked) kStr += " FZ";
                    if (chk_esprt_fixed_MX.Checked) kStr += " MX";
                    if (chk_esprt_fixed_MY.Checked) kStr += " MY";
                    if (chk_esprt_fixed_MZ.Checked) kStr += " MZ";
                }
                return kStr;
            }
        }

        private void rbtn_ssprt_pinned_CheckedChanged(object sender, EventArgs e)
        {

            chk_esprt_fixed_FX.Enabled = rbtn_esprt_fixed.Checked;
            chk_esprt_fixed_FY.Enabled = rbtn_esprt_fixed.Checked;
            chk_esprt_fixed_FZ.Enabled = rbtn_esprt_fixed.Checked;
            chk_esprt_fixed_MX.Enabled = rbtn_esprt_fixed.Checked;
            chk_esprt_fixed_MY.Enabled = rbtn_esprt_fixed.Checked;
            chk_esprt_fixed_MZ.Enabled = rbtn_esprt_fixed.Checked;

            chk_ssprt_fixed_FX.Enabled = rbtn_ssprt_fixed.Checked;
            chk_ssprt_fixed_FY.Enabled = rbtn_ssprt_fixed.Checked;
            chk_ssprt_fixed_FZ.Enabled = rbtn_ssprt_fixed.Checked;
            chk_ssprt_fixed_MX.Enabled = rbtn_ssprt_fixed.Checked;
            chk_ssprt_fixed_MY.Enabled = rbtn_ssprt_fixed.Checked;
            chk_ssprt_fixed_MZ.Enabled = rbtn_ssprt_fixed.Checked;
        }
        #endregion Chiranjit [2014 03 12] Support Input

        private void btn_def_mov_load_Click(object sender, EventArgs e)
        {
            iApp.Show_LL_Dialog();
            iApp.LiveLoads.Fill_Combo(ref cmb_Ana_load_type);
        }



        #region Chiranjit [2014 09 10]
        #region British Standard Loading
        private void txt_deck_width_TextChanged(object sender, EventArgs e)
        {
            British_Interactive();

        }


        private void rbtn_HA_HB_CheckedChanged(object sender, EventArgs e)
        {
            British_Interactive();
            spc_HB.Visible = !rbtn_HA.Checked;

            if (rbtn_HA_HB.Checked || rbtn_HB.Checked)
            {
                cmb_long_open_file.Items.Clear();
                cmb_long_open_file.Items.Add(string.Format("DEAD LOAD ANALYSIS"));
                //cmb_long_open_file.Items.Add(string.Format("TOTAL DL + LL ANALYSIS"));
                //cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 1"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 2"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 3"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 4"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 5"));
                cmb_long_open_file.Items.Add(string.Format("GIRDER ANALYSIS RESULTS"));


                if (IsRead) return;

                Default_British_HB_LoadData(dgv_long_british_loads);
                Default_British_HB_Type_LoadData(dgv_british_loads);

                lbl_HB.Text = "HB LOADINGS";

                //tabCtrl.TabPages.Remove(tab_mov_data_Indian);
            }
            else if (rbtn_HA.Checked)
            {
                cmb_long_open_file.Items.Clear();
                cmb_long_open_file.Items.Add(string.Format("DEAD LOAD ANALYSIS"));
                //cmb_long_open_file.Items.Add(string.Format("TOTAL DL + LL ANALYSIS"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS"));
                cmb_long_open_file.Items.Add(string.Format("GIRDER ANALYSIS RESULTS"));
                //tabCtrl.TabPages.Remove(tab_mov_data_Indian);
            }
            else if (rbtn_Rail_Load.Checked)
            {
                lbl_HB.Text = "BS RAIL LOADINGS";

                cmb_long_open_file.Items.Clear();
                cmb_long_open_file.Items.Add(string.Format("DEAD LOAD ANALYSIS"));
                //cmb_long_open_file.Items.Add(string.Format("TOTAL DL + LL ANALYSIS"));
                //cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 1"));
                cmb_long_open_file.Items.Add(string.Format("LIVE LOAD ANALYSIS 2"));
                cmb_long_open_file.Items.Add(string.Format("GIRDER ANALYSIS RESULTS"));


                if (IsRead) return;

                Default_British_Rail_LoadData(dgv_long_british_loads);
                Default_British_Rail_Type_LoadData(dgv_british_loads);

                //tabCtrl.TabPages.Remove(tab_mov_data_Indian);
            }
        }
        public bool IsRead = false;
        public void British_Interactive()
        {
            if (IsRead) return;

            double d, lane_width, impf, lf;

            double incr, lgen;

            //txt_ll_british_incr
            int nos_lane, i;


            d = MyList.StringToDouble(txt_deck_width.Text, 0.0);
            lane_width = MyList.StringToDouble(txt_lane_width.Text, 0.0);
            incr = MyList.StringToDouble(txt_ll_british_incr.Text, 0.0);

            if (incr == 0) incr = 1;
            lgen = ((int)(L / incr)) + 1;

            nos_lane = (int)(d / lane_width);

            txt_no_lanes.Text = nos_lane.ToString();
            txt_no_lanes.Enabled = false;

            txt_ll_british_lgen.Text = lgen.ToString();
            txt_ll_british_lgen.Enabled = false;


            chk_HA_1L.Enabled = (nos_lane >= 1);
            chk_HA_2L.Enabled = (nos_lane >= 2);
            chk_HA_3L.Enabled = (nos_lane >= 3);
            chk_HA_4L.Enabled = (nos_lane >= 4);
            chk_HA_5L.Enabled = (nos_lane >= 5);
            chk_HA_6L.Enabled = (nos_lane >= 6);
            chk_HA_7L.Enabled = (nos_lane >= 7);
            chk_HA_8L.Enabled = (nos_lane >= 8);
            chk_HA_9L.Enabled = (nos_lane >= 9);
            chk_HA_10L.Enabled = (nos_lane >= 10);


            chk_HB_1L.Enabled = (nos_lane >= 1);
            chk_HB_2L.Enabled = (nos_lane >= 2);
            chk_HB_3L.Enabled = (nos_lane >= 3);
            chk_HB_4L.Enabled = (nos_lane >= 4);
            chk_HB_5L.Enabled = (nos_lane >= 5);
            chk_HB_6L.Enabled = (nos_lane >= 6);
            chk_HB_7L.Enabled = (nos_lane >= 7);
            chk_HB_8L.Enabled = (nos_lane >= 8);
            chk_HB_9L.Enabled = (nos_lane >= 9);
            chk_HB_10L.Enabled = (nos_lane >= 10);


            grb_ha.Enabled = (rbtn_HA.Checked || rbtn_HA_HB.Checked || chk_HA.Checked);
            grb_hb.Enabled = (rbtn_HB.Checked || rbtn_HA_HB.Checked);

            if (rbtn_HA.Checked)
            {
                chk_HA_1L.Checked = chk_HA_1L.Enabled;
                chk_HA_2L.Checked = chk_HA_2L.Enabled;
                chk_HA_3L.Checked = chk_HA_3L.Enabled;
                chk_HA_4L.Checked = chk_HA_4L.Enabled;
                chk_HA_5L.Checked = chk_HA_5L.Enabled;
                chk_HA_6L.Checked = chk_HA_6L.Enabled;
                chk_HA_7L.Checked = chk_HA_7L.Enabled;
                chk_HA_8L.Checked = chk_HA_8L.Enabled;
                chk_HA_9L.Checked = chk_HA_9L.Enabled;
                chk_HA_10L.Checked = chk_HA_10L.Enabled;
            }

            if (rbtn_HB.Checked || rbtn_Rail_Load.Checked)
            {
                chk_HB_1L.Checked = chk_HB_1L.Enabled;
                chk_HB_2L.Checked = chk_HB_2L.Enabled;
                chk_HB_3L.Checked = chk_HB_3L.Enabled;
                chk_HB_4L.Checked = chk_HB_4L.Enabled;
                chk_HB_5L.Checked = chk_HB_5L.Enabled;
                chk_HB_6L.Checked = chk_HB_6L.Enabled;
                chk_HB_7L.Checked = chk_HB_7L.Enabled;
                chk_HB_8L.Checked = chk_HB_8L.Enabled;
                chk_HB_9L.Checked = chk_HB_9L.Enabled;
                chk_HB_10L.Checked = chk_HB_10L.Enabled;
            }

            //if(rbtn_HA_HB.Checked)
            //{

            //    chk_HB_1L.Checked = !chk_HA_1L.Checked;
            //    chk_HB_2L.Checked = !chk_HA_2L.Checked;
            //    chk_HB_3L.Checked = !chk_HA_3L.Checked;
            //    chk_HB_4L.Checked = !chk_HA_4L.Checked;
            //    chk_HB_5L.Checked = !chk_HA_5L.Checked;
            //    chk_HB_6L.Checked = !chk_HA_6L.Checked;
            //    chk_HB_7L.Checked = !chk_HA_7L.Checked;
            //    chk_HB_8L.Checked = !chk_HA_8L.Checked;
            //    chk_HB_9L.Checked = !chk_HA_9L.Checked;
            //    chk_HB_10L.Checked = !chk_HA_10L.Checked;
            //}


        }

        public void Default_British_HB_LoadData(DataGridView dgv_live_load)
        {

            List<string> list = new List<string>();
            List<string> lst_spc = new List<string>();
            dgv_live_load.Rows.Clear();

            string load = cmb_HB.Text;
            int i = 0;
            list.Clear();
            int typ_no = 1;

            double ll = MyList.StringToDouble(load.Replace("HB_", ""), 1.0);


            for (i = 6; i <= 26; i += 5)
            {
                list.Add(string.Format("TYPE {0}, {1}_{2}", typ_no++, load, i));
                list.Add(string.Format("AXLE LOAD IN TONS ,{0:f1}, {0:f1}, {0:f1}, {0:f1}", ll));
                list.Add(string.Format("AXLE SPACING IN METRES, 1.8,{0:f1},1.8", i));
                list.Add(string.Format("AXLE WIDTH IN METRES, 1.0"));
                list.Add(string.Format("IMPACT FACTOR, {0}", txt_LL_impf.Text));
                list.Add(string.Format(""));
            }


            for (i = 0; i < dgv_live_load.ColumnCount; i++)
            {
                lst_spc.Add("");
            }
            for (i = 0; i < list.Count; i++)
            {
                dgv_live_load.Rows.Add(lst_spc.ToArray());
            }

            MyList mlist = null;
            for (i = 0; i < list.Count; i++)
            {
                mlist = new MyList(list[i], ',');

                //for (int j = 0; j < mlist.Count; j++)
                //{
                //    dgv_live_load[j, i].Value = mlist[j];
                //}

                try
                {
                    if (list[i] == "")
                    {
                        dgv_live_load.Rows[i].DefaultCellStyle.BackColor = Color.Cyan;

                    }
                    else
                    {
                        for (int j = 0; j < mlist.Count; j++)
                        {
                            dgv_live_load[j, i].Value = mlist[j];
                        }
                    }
                }
                catch (Exception ex) { }
            }
        }
        public void Default_British_HB_Type_LoadData(DataGridView dgv_live_load)
        {
            List<string> lst_spcs = new List<string>();
            dgv_live_load.Rows.Clear();
            int i = 0;
            for (i = 0; i < dgv_live_load.ColumnCount; i++)
            {
                lst_spcs.Add("");
            }
            List<string> list = new List<string>();


            List<int> lanes = new List<int>();

            if (chk_HB_1L.Checked) lanes.Add(1);
            if (chk_HB_2L.Checked) lanes.Add(2);
            if (chk_HB_3L.Checked) lanes.Add(3);
            if (chk_HB_4L.Checked) lanes.Add(4);
            if (chk_HB_5L.Checked) lanes.Add(5);
            if (chk_HB_6L.Checked) lanes.Add(6);
            if (chk_HB_7L.Checked) lanes.Add(7);
            if (chk_HB_8L.Checked) lanes.Add(8);
            if (chk_HB_9L.Checked) lanes.Add(9);
            if (chk_HB_10L.Checked) lanes.Add(10);


            #region Long Girder
            list.Clear();


            double d, lane_width, impf, lf;
            int nos_lane;


            d = MyList.StringToDouble(txt_deck_width.Text, 0.0);
            lane_width = MyList.StringToDouble(txt_lane_width.Text, 0.0);

            nos_lane = (int)(d / lane_width);



            string load = "LOAD 1";
            string x = "X";
            string z = "Z";

            LiveLoadCollections llc = new LiveLoadCollections();

            //llc.D

            #region Load 1

            for (int ld = 1; ld <= 5; ld++)
            {
                load = "LOAD " + ld;
                x = "X";
                z = "Z";

                for (i = 0; i < lanes.Count; i++)
                {
                    load += ",TYPE " + ld;
                    x += ",-" + (1 + 5 * ld + 1.8 + 1.8).ToString();
                    z += "," + ((lanes[i] - 1) * lane_width + 0.25);

                    load += ",TYPE " + ld;
                    x += ",-" + (1 + 5 * ld + 1.8 + 1.8).ToString();
                    z += "," + ((lanes[i] - 1) * lane_width + 0.25 + 1.0 + 1.0);
                }

                list.Add(load);
                list.Add(x);
                list.Add(z);
                list.Add(string.Format(""));
            }
            #endregion Load 1

            //list.Add(string.Format("LOAD 1,TYPE 1"));
            //list.Add(string.Format("X,0"));
            //list.Add(string.Format("Z,1.5"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("LOAD 2,TYPE 2"));
            //list.Add(string.Format("X,0"));
            //list.Add(string.Format("Z,1.5"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("LOAD 3,TYPE 3"));
            //list.Add(string.Format("X,0"));
            //list.Add(string.Format("Z,5.9"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("LOAD 4,TYPE 4"));
            //list.Add(string.Format("X,0"));
            //list.Add(string.Format("Z,1.5"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("LOAD 5,TYPE 5"));
            //list.Add(string.Format("X,0,0"));
            //list.Add(string.Format("Z,1.5,4.5"));
            //list.Add(string.Format(""));
            #endregion




            dgv_live_load.Columns.Clear();

            for (i = 0; i <= lanes.Count * 2; i++)
            {
                if (i == 0)
                {
                    dgv_live_load.Columns.Add("col_brts" + i, "Load Data");
                    dgv_live_load.Columns[i].Width = 70;
                    dgv_live_load.Columns[i].ReadOnly = true;
                }
                else
                {
                    dgv_live_load.Columns.Add("col_brts" + i, i.ToString());
                    dgv_live_load.Columns[i].Width = 50;
                }
            }


            for (i = 0; i < list.Count; i++)
            {
                dgv_live_load.Rows.Add(lst_spcs.ToArray());
            }

            MyList mlist = null;
            for (i = 0; i < list.Count; i++)
            {
                mlist = new MyList(list[i], ',');
                try
                {
                    if (list[i] == "")
                    {
                        dgv_live_load.Rows[i].DefaultCellStyle.BackColor = Color.Cyan;

                    }
                    else
                    {
                        for (int j = 0; j < mlist.Count; j++)
                        {
                            dgv_live_load[j, i].Value = mlist[j];
                        }
                    }
                }
                catch (Exception ex) { }
            }
        }


        public void Default_British_Rail_LoadData(DataGridView dgv_live_load)
        {

            List<string> list = new List<string>();
            List<string> lst_spc = new List<string>();
            dgv_live_load.Rows.Clear();

            string load = cmb_HB.Text;
            int i = 0;
            list.Clear();

            list.Add(string.Format("TYPE 1, BS_RAIL_1"));
            list.Add(string.Format("AXLE LOAD IN TONS , 24.52,24.52,24.52,24.52,24.52,24.52,24.52,24.52,24.52,24.52,24.52,24.52"));
            list.Add(string.Format("AXLE SPACING IN METRES,2.05,1.95,5.56,1.95,2.05,5.94,2.05,1.95,5.56,1.95,2.05", i));
            list.Add(string.Format("AXLE WIDTH IN METRES, 1.676"));
            list.Add(string.Format("IMPACT FACTOR, {0}", txt_LL_impf.Text));
            list.Add(string.Format(""));


            list.Add(string.Format("TYPE 2, BS_RAIL_2"));
            list.Add(string.Format("AXLE LOAD IN TONS , 22.06,22.06,22.06,22.06,22.06,22.06,22.06,22.06,22.06,22.06,22.06,22.06"));
            list.Add(string.Format("AXLE SPACING IN METRES, 1.65,1.65,6.4,1.65,1.65,3.0,1.65,1.65,6.4,1.65,1.65"));
            list.Add(string.Format("AXLE WIDTH IN METRES, 1.676"));
            list.Add(string.Format("IMPACT FACTOR, {0}", txt_LL_impf.Text));
            list.Add(string.Format(""));

            for (i = 0; i < dgv_live_load.ColumnCount; i++)
            {
                lst_spc.Add("");
            }
            for (i = 0; i < list.Count; i++)
            {
                dgv_live_load.Rows.Add(lst_spc.ToArray());
            }

            MyList mlist = null;
            for (i = 0; i < list.Count; i++)
            {
                mlist = new MyList(list[i], ',');
                try
                {
                    if (list[i] == "")
                    {
                        dgv_live_load.Rows[i].DefaultCellStyle.BackColor = Color.Cyan;
                    }
                    else
                    {
                        for (int j = 0; j < mlist.Count; j++)
                        {
                            dgv_live_load[j, i].Value = mlist[j];
                        }
                    }
                }
                catch (Exception ex) { }
            }
        }
        public void Default_British_Rail_Type_LoadData(DataGridView dgv_live_load)
        {
            List<string> lst_spcs = new List<string>();
            dgv_live_load.Rows.Clear();
            int i = 0;
            for (i = 0; i < dgv_live_load.ColumnCount; i++)
            {
                lst_spcs.Add("");
            }
            List<string> list = new List<string>();


            List<int> lanes = new List<int>();

            //if (chk_HB_1L.Checked) lanes.Add(1);
            //if (chk_HB_2L.Checked) lanes.Add(2);
            //if (chk_HB_3L.Checked) lanes.Add(3);
            //if (chk_HB_4L.Checked) lanes.Add(4);
            //if (chk_HB_5L.Checked) lanes.Add(5);
            //if (chk_HB_6L.Checked) lanes.Add(6);
            //if (chk_HB_7L.Checked) lanes.Add(7);
            //if (chk_HB_8L.Checked) lanes.Add(8);
            //if (chk_HB_9L.Checked) lanes.Add(9);
            //if (chk_HB_10L.Checked) lanes.Add(10);


            #region Long Girder
            list.Clear();


            double d, lane_width, impf, lf;
            int nos_lane;


            d = MyList.StringToDouble(txt_deck_width.Text, 0.0);
            lane_width = MyList.StringToDouble(txt_lane_width.Text, 0.0);

            nos_lane = (int)(d / lane_width);

            for (i = 1; i <= nos_lane; i++)
            {
                lanes.Add(i);
            }

            string load = "LOAD 1";
            string x = "X";
            string z = "Z";

            LiveLoadCollections llc = new LiveLoadCollections();

            //llc.D

            #region Load 1

            for (int ld = 1; ld <= 2; ld++)
            {
                load = "LOAD " + ld;
                x = "X";
                z = "Z";

                for (i = 0; i < lanes.Count; i++)
                {
                    load += ",TYPE " + ld;
                    x += ",-" + (1 + 5 * ld + 1.8 + 1.8).ToString();
                    z += "," + ((lanes[i] - 1) * lane_width + 0.25 + 1.0);

                    //load += ",TYPE " + ld;
                    //x += ",-" + (1 + 5 * ld + 1.8 + 1.8).ToString();
                    //z += "," + ((lanes[i] - 1) * lane_width + 0.25 + 1.0 + 1.0);
                }

                list.Add(load);
                list.Add(x);
                list.Add(z);
                list.Add(string.Format(""));
            }
            #endregion Load 1

            #endregion




            dgv_live_load.Columns.Clear();

            for (i = 0; i <= lanes.Count; i++)
            {
                if (i == 0)
                {
                    dgv_live_load.Columns.Add("col_brts" + i, "Load Data");
                    dgv_live_load.Columns[i].Width = 70;
                    dgv_live_load.Columns[i].ReadOnly = true;
                }
                else
                {
                    dgv_live_load.Columns.Add("col_brts" + i, i.ToString());
                    dgv_live_load.Columns[i].Width = 50;
                }
            }


            for (i = 0; i < list.Count; i++)
            {
                dgv_live_load.Rows.Add(lst_spcs.ToArray());
            }

            MyList mlist = null;
            for (i = 0; i < list.Count; i++)
            {
                mlist = new MyList(list[i], ',');
                try
                {
                    if (list[i] == "")
                    {
                        dgv_live_load.Rows[i].DefaultCellStyle.BackColor = Color.Cyan;

                    }
                    else
                    {
                        for (int j = 0; j < mlist.Count; j++)
                        {
                            dgv_live_load[j, i].Value = mlist[j];
                        }
                    }
                }
                catch (Exception ex) { }
            }
        }


        private void cmb_HB_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (IsRead) return;

            Default_British_HB_LoadData(dgv_long_british_loads);
            Default_British_HB_Type_LoadData(dgv_british_loads);
        }

        private void chk_HA_1L_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRead) return;
            chk_HB_1L.Checked = (!chk_HA_1L.Checked && chk_HB_1L.Enabled);
            chk_HB_2L.Checked = !chk_HA_2L.Checked && chk_HB_2L.Enabled;
            chk_HB_3L.Checked = !chk_HA_3L.Checked && chk_HB_3L.Enabled;
            chk_HB_4L.Checked = !chk_HA_4L.Checked && chk_HB_4L.Enabled;
            chk_HB_5L.Checked = !chk_HA_5L.Checked && chk_HB_5L.Enabled;
            chk_HB_6L.Checked = !chk_HA_6L.Checked && chk_HB_6L.Enabled;
            chk_HB_7L.Checked = !chk_HA_7L.Checked && chk_HB_7L.Enabled;
            chk_HB_8L.Checked = !chk_HA_8L.Checked && chk_HB_8L.Enabled;
            chk_HB_9L.Checked = !chk_HA_9L.Checked && chk_HB_9L.Enabled;
            chk_HB_10L.Checked = !chk_HA_10L.Checked && chk_HB_10L.Enabled;
            Default_British_HB_Type_LoadData(dgv_british_loads);


            //if (!chk_HA_1L.Enabled) chk_HA_1L.Checked = false;
            //if (!chk_HA_2L.Enabled) chk_HA_2L.Checked = false;
            //if (!chk_HA_3L.Enabled) chk_HA_3L.Checked = false;
            //if (!chk_HA_4L.Enabled) chk_HA_4L.Checked = false;
            //if (!chk_HA_5L.Enabled) chk_HA_5L.Checked = false;
            //if (!chk_HA_6L.Enabled) chk_HA_6L.Checked = false;
            //if (!chk_HA_7L.Enabled) chk_HA_7L.Checked = false;
            //if (!chk_HA_8L.Enabled) chk_HA_8L.Checked = false;
            //if (!chk_HA_9L.Enabled) chk_HA_9L.Checked = false;
            //if (!chk_HA_10L.Enabled) chk_HA_10L.Checked = false;



            //if (!chk_HB_1L.Enabled) chk_HB_1L.Checked = false;
            //if (!chk_HB_2L.Enabled) chk_HB_2L.Checked = false;
            //if (!chk_HB_3L.Enabled) chk_HB_3L.Checked = false;
            //if (!chk_HB_4L.Enabled) chk_HB_4L.Checked = false;
            //if (!chk_HB_5L.Enabled) chk_HB_5L.Checked = false;
            //if (!chk_HB_6L.Enabled) chk_HB_6L.Checked = false;
            //if (!chk_HB_7L.Enabled) chk_HB_7L.Checked = false;
            //if (!chk_HB_8L.Enabled) chk_HB_8L.Checked = false;
            //if (!chk_HB_9L.Enabled) chk_HB_9L.Checked = false;
            //if (!chk_HB_10L.Enabled) chk_HB_10L.Checked = false;

        }

        private void chk_HB_1L_CheckedChanged(object sender, EventArgs e)
        {
            if (IsRead) return;
            chk_HA_1L.Checked = !chk_HB_1L.Checked && chk_HB_1L.Enabled;
            chk_HA_2L.Checked = !chk_HB_2L.Checked && chk_HB_2L.Enabled;
            chk_HA_3L.Checked = !chk_HB_3L.Checked && chk_HB_3L.Enabled;
            chk_HA_4L.Checked = !chk_HB_4L.Checked && chk_HB_4L.Enabled;
            chk_HA_5L.Checked = !chk_HB_5L.Checked && chk_HB_5L.Enabled;
            chk_HA_6L.Checked = !chk_HB_6L.Checked && chk_HB_6L.Enabled;
            chk_HA_7L.Checked = !chk_HB_7L.Checked && chk_HB_7L.Enabled;
            chk_HA_8L.Checked = !chk_HB_8L.Checked && chk_HB_8L.Enabled;
            chk_HA_9L.Checked = !chk_HB_9L.Checked && chk_HB_9L.Enabled;
            chk_HA_10L.Checked = !chk_HB_10L.Checked && chk_HB_10L.Enabled;

            Default_British_HB_Type_LoadData(dgv_british_loads);


            //if (!chk_HA_1L.Enabled) chk_HA_1L.Checked = false;
            //if (!chk_HA_2L.Enabled) chk_HA_2L.Checked = false;
            //if (!chk_HA_3L.Enabled) chk_HA_3L.Checked = false;
            //if (!chk_HA_4L.Enabled) chk_HA_4L.Checked = false;
            //if (!chk_HA_5L.Enabled) chk_HA_5L.Checked = false;
            //if (!chk_HA_6L.Enabled) chk_HA_6L.Checked = false;
            //if (!chk_HA_7L.Enabled) chk_HA_7L.Checked = false;
            //if (!chk_HA_8L.Enabled) chk_HA_8L.Checked = false;
            //if (!chk_HA_9L.Enabled) chk_HA_9L.Checked = false;
            //if (!chk_HA_10L.Enabled) chk_HA_10L.Checked = false;



            //if (!chk_HB_1L.Enabled) chk_HB_1L.Checked = false;
            //if (!chk_HB_2L.Enabled) chk_HB_2L.Checked = false;
            //if (!chk_HB_3L.Enabled) chk_HB_3L.Checked = false;
            //if (!chk_HB_4L.Enabled) chk_HB_4L.Checked = false;
            //if (!chk_HB_5L.Enabled) chk_HB_5L.Checked = false;
            //if (!chk_HB_6L.Enabled) chk_HB_6L.Checked = false;
            //if (!chk_HB_7L.Enabled) chk_HB_7L.Checked = false;
            //if (!chk_HB_8L.Enabled) chk_HB_8L.Checked = false;
            //if (!chk_HB_9L.Enabled) chk_HB_9L.Checked = false;
            //if (!chk_HB_10L.Enabled) chk_HB_10L.Checked = false;
        }

        private void chk_HA_3L_EnabledChanged(object sender, EventArgs e)
        {
            if (IsRead) return;
            CheckBox chk = sender as CheckBox;
            if (!chk.Enabled) chk.Checked = false;
        }

        List<string> long_ll = new List<string>();
        List<string> long_ll_types = new List<string>();
        List<List<string>> all_loads = new List<List<string>>();

        public void LONG_GIRDER_BRITISH_LL_TXT()
        {
            int i = 0;
            int c = 0;
            string kStr = "";
            string txt = "";
            long_ll.Clear();
            long_ll_types.Clear();
            all_loads.Clear();

            if (rbtn_HA.Checked) return;

            List<string> long_ll_impact = new List<string>();
            //long_ll.Add(string.Format(""));
            //long_ll.Add(string.Format(""));
            //long_ll.Add(string.Format(""));


            bool flag = false;
            for (i = 0; i < dgv_long_british_loads.RowCount; i++)
            {
                txt = "";

                for (c = 0; c < dgv_long_british_loads.ColumnCount; c++)
                {
                    kStr = dgv_long_british_loads[c, i].Value.ToString();


                    //if (kStr != "" && kStr.StartsWith("TYPE"))
                    //{
                    //    long_ll_types.Add(kStr);
                    //}

                    if (flag)
                    {
                        long_ll_impact.Add(kStr);
                        flag = false;
                        txt = "";
                        kStr = "";
                        continue;
                    }
                    if (kStr.ToUpper().StartsWith("IMPACT"))
                    {
                        flag = true;
                        continue;
                    }
                    else if (kStr != "" && !kStr.StartsWith("AXLE"))
                    {
                        txt += kStr + " ";
                    }
                }

                if (txt != "" && txt.StartsWith("TYPE"))
                {
                    long_ll_types.Add(txt);
                }
                long_ll.Add(txt);
            }
            long_ll.Add(string.Format(""));
            //long_ll.Add(string.Format("TYPE 6 40RWHEEL"));
            //long_ll.Add(string.Format("12.0 12.0 12.0 7.0 7.0 5.0 "));
            //long_ll.Add(string.Format("1.07 4.27 3.05 1.22 3.66 "));
            //long_ll.Add(string.Format("2.740"));
            i = 0;

            List<string> list = new List<string>();

            List<string> def_load = new List<string>();
            List<double> def_x = new List<double>();
            List<double> def_z = new List<double>();


            List<string> load_list_1 = new List<string>();
            List<string> load_list_2 = new List<string>();
            List<string> load_list_3 = new List<string>();
            List<string> load_list_4 = new List<string>();
            List<string> load_list_5 = new List<string>();
            List<string> load_list_6 = new List<string>();
            List<string> load_total_7 = new List<string>();



            int fl = 0;
            double xinc = MyList.StringToDouble(txt_ll_british_incr.Text, 0.5);
            //double imp_fact = 1.179;
            int count = 0;
            for (i = 0; i < dgv_british_loads.RowCount; i++)
            {
                txt = "";
                fl = 0;
                kStr = dgv_british_loads[0, i].Value.ToString();

                if (kStr == "")
                {
                    list = new List<string>();
                    count++;
                    for (int j = 0; j < def_load.Count; j++)
                    {
                        for (int f = 0; f < long_ll_types.Count; f++)
                        {
                            if (long_ll_types[f].StartsWith(def_load[j]))
                            {
                                txt = string.Format("{0} {1:f3}", long_ll_types[f], long_ll_impact[f]);
                                break;
                            }
                        }
                        if (list.Contains(txt) == false)
                            list.Add(txt);
                    }
                    list.Add("LOAD GENERATION " + txt_ll_british_lgen.Text);
                    for (int j = 0; j < def_load.Count; j++)
                    {
                        txt = string.Format("{0} {1:f3} 0 {2:f3} XINC {3}", def_load[j], def_x[j], def_z[j], xinc);
                        list.Add(txt);
                    }
                    def_load.Clear();
                    def_x.Clear();
                    def_z.Clear();

                    all_loads.Add(list);
                    if (count == 1)
                    {
                        load_list_1.Clear();
                        load_list_1.AddRange(list.ToArray());
                    }
                    else if (count == 2)
                    {

                        load_list_2.Clear();
                        load_list_2.AddRange(list.ToArray());
                    }
                    else if (count == 3)
                    {
                        load_list_3.Clear();
                        load_list_3.AddRange(list.ToArray());
                    }
                    else if (count == 4)
                    {

                        load_list_4.Clear();
                        load_list_4.AddRange(list.ToArray());
                    }
                    else if (count == 5)
                    {

                        load_list_5.Clear();
                        load_list_5.AddRange(list.ToArray());
                    }
                    else if (count == 6)
                    {

                        load_list_6.Clear();
                        load_list_6.AddRange(list.ToArray());

                    }
                    else if (count == 7)
                    {
                        load_total_7.Clear();
                        load_total_7.AddRange(list.ToArray());
                    }
                }

                if (kStr != "" && (kStr.StartsWith("LOAD") || kStr.StartsWith("TOTAL")))
                {
                    fl = 1; //continue;
                }
                else if (kStr != "" && kStr.StartsWith("X"))
                {
                    fl = 2; //continue;
                }
                else if (kStr != "" && kStr.StartsWith("Z"))
                {
                    fl = 3; //continue;
                }
                else
                    continue;
                for (c = 1; c < dgv_british_loads.ColumnCount; c++)
                {
                    kStr = dgv_british_loads[c, i].Value.ToString();

                    if (kStr == "") continue;
                    if (fl == 1)
                        def_load.Add(kStr);
                    else if (fl == 2)
                        def_x.Add(MyList.StringToDouble(kStr, 0.0));
                    else if (fl == 3)
                        def_z.Add(MyList.StringToDouble(kStr, 0.0));
                }
                //def_load.Add(txt);
            }

            fl = 3;

            //Long_Girder_Analysis.LoadList_1 = 
        }

        public List<int> HA_Lanes
        {
            get
            {
                List<int> lanes = new List<int>();

                if (chk_HA_1L.Checked) lanes.Add(1);
                if (chk_HA_2L.Checked) lanes.Add(2);
                if (chk_HA_3L.Checked) lanes.Add(3);
                if (chk_HA_4L.Checked) lanes.Add(4);
                if (chk_HA_5L.Checked) lanes.Add(5);
                if (chk_HA_6L.Checked) lanes.Add(6);
                if (chk_HA_7L.Checked) lanes.Add(7);
                if (chk_HA_8L.Checked) lanes.Add(8);
                if (chk_HA_9L.Checked) lanes.Add(9);
                if (chk_HA_10L.Checked) lanes.Add(10);

                return lanes;
            }
        }
        public List<int> HB_Lanes
        {
            get
            {
                List<int> lanes = new List<int>();

                if (chk_HB_1L.Checked) lanes.Add(1);
                if (chk_HB_2L.Checked) lanes.Add(2);
                if (chk_HB_3L.Checked) lanes.Add(3);
                if (chk_HB_4L.Checked) lanes.Add(4);
                if (chk_HB_5L.Checked) lanes.Add(5);
                if (chk_HB_6L.Checked) lanes.Add(6);
                if (chk_HB_7L.Checked) lanes.Add(7);
                if (chk_HB_8L.Checked) lanes.Add(8);
                if (chk_HB_9L.Checked) lanes.Add(9);
                if (chk_HB_10L.Checked) lanes.Add(10);

                return lanes;
            }
        }



        private void cmb_long_open_file_SelectedIndexChanged(object sender, EventArgs e)
        {

            #region Set File Name

            string file_name = "";
            if (Bridge_Analysis != null)
            {
                if (cmb_long_open_file.SelectedIndex < cmb_long_open_file.Items.Count - 1)
                {

                    if (cmb_long_open_file.SelectedIndex == 0)
                        file_name = Input_File_DL;
                    else if (cmb_long_open_file.SelectedIndex == 1 && iApp.DesignStandard == eDesignStandard.IndianStandard)
                        file_name = Input_File_LL;
                    else
                        file_name = Get_Live_Load_Analysis_Input_File(cmb_long_open_file.SelectedIndex);
                }
                else
                {
                    file_name = Result_Report_LL;
                }
            }

            #endregion Set File Name

            btn_view_data.Enabled = File.Exists(file_name);
            btn_View_Moving_Load.Enabled = File.Exists(MyList.Get_LL_TXT_File(file_name)) && File.Exists(MyList.Get_Analysis_Report_File(file_name));
            btn_view_structure.Enabled = File.Exists(file_name) && cmb_long_open_file.SelectedIndex != cmb_long_open_file.Items.Count - 1;
            btn_view_report.Enabled = File.Exists(MyList.Get_Analysis_Report_File(file_name));

        }

        #endregion British Standard Loading

        #endregion Chiranjit [2014 09 10]

        public string Get_Live_Load_Analysis_Input_File(int analysis_no)
        {
            string working_folder = user_path;

            if (Directory.Exists(working_folder))
            {
                string pd = Path.Combine(working_folder, "LL ANALYSIS LOAD " + analysis_no);
                if (!Directory.Exists(pd)) Directory.CreateDirectory(pd);
                return Path.Combine(pd, "LL_LOAD_" + analysis_no + "_INPUT_FILE.txt");
            }
            return "";
        }

        void Ana_Write_Long_Girder_Load_Data(string file_name, bool add_LiveLoad, bool add_DeadLoad, int load_no)
        {
            //string file_name = Bridge_Analysis.Input_File;
            //= Bridge_Analysis.TotalAnalysis_Input_File;
            if (!File.Exists(file_name)) return;

            List<string> inp_file_cont = new List<string>(File.ReadAllLines(file_name));
            string kStr = "";
            int indx = -1;
            bool flag = false;
            MyList mlist = null;
            int i = 0;

            bool isMoving_load = false;
            for (i = 0; i < inp_file_cont.Count; i++)
            {
                kStr = MyList.RemoveAllSpaces(inp_file_cont[i].ToUpper());
                mlist = new MyList(kStr, ' ');

                if (kStr.Contains("LOAD GEN"))
                    isMoving_load = true;

                if (mlist.StringList[0].StartsWith("LOAD") && flag == false)
                {
                    if (indx == -1)
                        indx = i;
                    flag = true;
                }
                if (kStr.Contains("ANALYSIS") || kStr.Contains("PRINT"))
                {
                    flag = false;
                }
                if (flag)
                {
                    inp_file_cont.RemoveAt(i);
                    i--;
                }

            }

            List<string> load_lst = new List<string>();

            string s = " DL";
            bool fl = false;
            if (add_DeadLoad)
            {

                if (add_LiveLoad)
                {
                    foreach (var item in txt_Ana_LL_member_load.Lines)
                    {

                        if (item.ToUpper().StartsWith("LOAD"))
                        {
                            if (fl == false)
                            {
                                fl = true;
                                load_lst.Add(item);
                            }
                            else
                                load_lst.Add("*" + item);
                        }
                        else
                        {
                            if (!load_lst.Contains(item))
                                load_lst.Add(item);
                            else
                                load_lst.Add("*" + item);
                        }
                    }
                    if (iApp.DesignStandard == eDesignStandard.BritishStandard)
                    {
                        if (HA_Lanes.Count > 0)
                        {
                            //load_lst.Add("LOAD 1 HA LOADINGS AS PER [BS 5400, Part 2, BD 37/01]");
                            load_lst.Add("*HA LOADINGS AS PER [BS 5400, Part 2, BD 37/01]");
                            load_lst.Add("MEMBER LOAD");
                            //if (chk_self_british.Checked)
                            //    load_lst.Add("SELFWEIGHT Y -1");

                            load_lst.Add(string.Format("{0} UNI GY -{1}", Bridge_Analysis.HA_Loading_Members, txt_HA_UDL.Text));

                            //load_lst.Add(string.Format("{0} CON GZ -{1} 0.5", Bridge_Analysis.HA_Loading_Members, txt_HA_CON.Text));


                            foreach (var item in MyList.Get_Array_Intiger(Bridge_Analysis.HA_Loading_Members))
                            {
                                load_lst.Add(string.Format("{0} CON GY -{1} {2:f3}", item, txt_HA_CON.Text, Bridge_Analysis.MemColls.Get_Member_Length(item.ToString()) / 2));
                            }
                        }
                    }

                }
                else
                    load_lst.AddRange(txt_Ana_LL_member_load.Lines);
            }
            else
            {

                if (iApp.DesignStandard == eDesignStandard.IndianStandard)
                {
                    //if (chk_self_indian.Checked)
                    //    load_lst.Add("SELFWEIGHT Y -1");
                }
                else if (iApp.DesignStandard == eDesignStandard.BritishStandard)
                {
                    if (HA_Lanes.Count > 0)
                    {
                        load_lst.Add("LOAD 1 HA LOADINGS AS PER [BS 5400, Part 2, BD 37/01]");
                        load_lst.Add("MEMBER LOAD");
                        //if (chk_self_british.Checked)
                        //    load_lst.Add("SELFWEIGHT Y -1");

                        load_lst.Add(string.Format("{0} UNI GY -{1}", Bridge_Analysis.HA_Loading_Members, txt_HA_UDL.Text));

                        //load_lst.Add(string.Format("{0} CON GZ -{1} 0.5", Bridge_Analysis.HA_Loading_Members, txt_HA_CON.Text));


                        foreach (var item in MyList.Get_Array_Intiger(Bridge_Analysis.HA_Loading_Members))
                        {
                            load_lst.Add(string.Format("{0} CON GY -{1} {2:f3}", item, txt_HA_CON.Text, Bridge_Analysis.MemColls.Get_Member_Length(item.ToString()) / 2));
                        }
                    }
                }
            }

            //Bridge_Analysis.LoadReadFromGrid(dgv_live_load);

            //Bridge_Analysis.Live_Load_List = iApp.LiveLoads;
            Bridge_Analysis.Live_Load_List = LoadData.GetLiveLoads(Path.Combine(Path.GetDirectoryName(file_name), "ll.txt"));
            if (add_LiveLoad)
            {

                if ((rbtn_HB.Checked || rbtn_HA_HB.Checked || rbtn_Rail_Load.Checked)
                    || iApp.DesignStandard == eDesignStandard.IndianStandard)
                    load_lst.Add("DEFINE MOVING LOAD FILE LL.TXT");

                //load_lst.Add("LOAD GENERATION " + txt_LL_load_gen.Text);


                if (all_loads.Count >= load_no && all_loads.Count != 0)
                    load_lst.AddRange(all_loads[load_no - 1].ToArray());

                //if (load_no == 1)
                //    load_lst.AddRange(load_list_1.ToArray());
                //else if (load_no == 2)
                //    load_lst.AddRange(load_list_2.ToArray());
                //else if (load_no == 3)
                //    load_lst.AddRange(load_list_3.ToArray());
                //else if (load_no == 4)
                //    load_lst.AddRange(load_list_4.ToArray());
                //else if (load_no == 5)
                //    load_lst.AddRange(load_list_5.ToArray());
                //else if (load_no == 6)
                //    load_lst.AddRange(load_list_6.ToArray());
                //else if (load_no == 7)
                //    load_lst.AddRange(load_total_7.ToArray());
            }
            inp_file_cont.InsertRange(indx, load_lst);
            //inp_file_cont.InsertRange(indx, );
            File.WriteAllLines(file_name, inp_file_cont.ToArray());
            //MessageBox.Show(this, "Load data is added in file " + file_name, "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }

        private void Create_Data_LL_British(string file_name)
        {
            //Input_File_LL
            Deck_Analysis_LL.Input_File = file_name;
            LONG_GIRDER_BRITISH_LL_TXT();

            Bridge_Analysis.HA_Lanes = HA_Lanes;

            Deck_Analysis_LL.CreateData_British();

            Bridge_Analysis.HA_Loading_Members = "191 TO 202";

            //if (rbtn_HA.Checked)
            //{
            //    //Deck_Analysis_LL.WriteData_LiveLoad(Deck_Analysis_LL.Input_File, PSC_SECIONS);
            //    //Ana_Write_Long_Girder_Load_Data(Deck_Analysis_LL.Input_File, true, false, 1);
            //}
            int i = 0;
            string ll_file = "";
            for (i = 0; i < all_loads.Count; i++)
            {
                ll_file = Get_Live_Load_Analysis_Input_File(i + 1);
                Deck_Analysis_LL.WriteData_LiveLoad(ll_file, PSC_SECIONS, long_ll);
                Ana_Write_Long_Girder_Load_Data(ll_file, true, false, (i + 1));
            }

            Deck_Analysis_LL.Bridge_Analysis = new BridgeMemberAnalysis(iApp, ll_file);

            string ll_txt = Deck_Analysis_LL.LiveLoad_File;

            Deck_Analysis_DL.Live_Load_List = LoadData.GetLiveLoads(ll_txt);

            if (Deck_Analysis_LL.Live_Load_List == null) return;

            Button_Enable_Disable();



        }
        private void btn_view_data_Click(object sender, EventArgs e)
        {


            string file_name = "";
            string ll_txt = "";

            Button btn = sender as Button;

            #region Set File Name
            if (cmb_long_open_file.SelectedIndex < cmb_long_open_file.Items.Count - 1)
            {
                //file_name = Bridge_Analysis.GetAnalysis_Input_File(cmb_long_open_file.SelectedIndex);

                if (cmb_long_open_file.SelectedIndex == 0)
                    file_name = Input_File_DL;
                else if (cmb_long_open_file.SelectedIndex == 1 && iApp.DesignStandard == eDesignStandard.IndianStandard)
                    file_name = Input_File_LL;
                else
                    file_name = Get_Live_Load_Analysis_Input_File(cmb_long_open_file.SelectedIndex);
                //file_name = Result_Report_LL;

            }
            else
            {
                file_name = Result_Report_LL;
            }
            #endregion Set File Name

            ll_txt = MyList.Get_LL_TXT_File(file_name);
            if (btn.Name == btn_view_data.Name)
            {
                if (cmb_long_open_file.SelectedIndex == cmb_long_open_file.Items.Count - 1)
                    iApp.View_Result(file_name);
                else
                    iApp.View_Input_File(file_name);
                //if (File.Exists(ll_txt))
                //    iApp.RunExe(ll_txt);
                //if (File.Exists(file_name))
                //    iApp.RunExe(file_name);
            }
            else if (btn.Name == btn_view_structure.Name)
            {
                if (File.Exists(file_name))
                    iApp.OpenWork(file_name, false);
            }
            else if (btn.Name == btn_view_report.Name)
            {
                file_name = MyList.Get_Analysis_Report_File(file_name);
                if (File.Exists(file_name))
                    iApp.RunExe(file_name);
            }
            else if (btn.Name == btn_View_Moving_Load.Name)
            {
                file_name = MyList.Get_Analysis_Report_File(file_name);
                if (File.Exists(file_name))
                    iApp.OpenWork(file_name, true);
            }
        }
        #region Chiranjit [2015 08 31]
        frm_Box_Girder_Diagra_ f_diagram;
        private void btn_open_diagram_Click(object sender, EventArgs e)
        {
            try
            {
                f_diagram.Close();
            }
            catch (Exception ex) { }


            f_diagram = new frm_Box_Girder_Diagra_();
            f_diagram.Owner = this;
            f_diagram.Show();
        }
        #endregion Chiranjit [2015 08 31]

        private void btn_psc_new_design_Click(object sender, EventArgs e)
        {
            Button btn = sender as Button;

            if (btn.Name == btn_psc_browse.Name)
            {
                frm_Open_Project frm = new frm_Open_Project(this.Name, Path.Combine(iApp.LastDesignWorkingFolder, Title));
                if (frm.ShowDialog() != System.Windows.Forms.DialogResult.Cancel)
                {
                    user_path = frm.Example_Path;
                    //iApp.Read_Form_Record(this, user_path);

                    txt_project_name.Text = Path.GetFileName(user_path);


                    #region Save As
                    if (frm.SaveAs_Path != "")
                    {

                        string src_path = user_path;
                        txt_project_name.Text = Path.GetFileName(frm.SaveAs_Path);
                        Create_Project();
                        string dest_path = user_path;

                        MyList.Folder_Copy(src_path, dest_path);
                    }


                    Open_Project();

                    txt_project_name.Text = Path.GetFileName(user_path);

                    //Write_All_Data();

                    #endregion Save As

                }
            }
            else if (btn.Name == btn_psc_new_design.Name)
            {
                //frm_NewProject frm = new frm_NewProject(Path.Combine(iApp.LastDesignWorkingFolder, Title));
                ////frm.Project_Name = "Singlecell Box Culvert Design Project";
                //if (txt_project_name.Text != "")
                //    frm.Project_Name = txt_project_name.Text;
                //else
                //    frm.Project_Name = "Design of Composite Bridge";
                //if (frm.ShowDialog() != System.Windows.Forms.DialogResult.Cancel)
                //{
                //    txt_project_name.Text = frm.Project_Name;
                //    //btn_TGirder_process.Enabled = true;
                //    IsCreate_Data = true;
                //}
                IsCreate_Data = true;
                Create_Project();
                Write_All_Data();
            }
            Button_Enable_Disable();
        }
        #region Chiranjit [2016 09 07
        public void All_Button_Enable(bool flag)
        {
            //btn_create_data.Enabled = flag;
            //btn_process_analysis.Enabled = flag;
            //btn_create_data.Enabled = flag;
            //btn_process_analysis
        }
        public string Project_Name
        {
            get
            {
                return txt_project_name.Text;
            }
            set
            {
                txt_project_name.Text = value;
            }
        }
        eASTRADesignType Project_Type
        {
            get
            {
                return eASTRADesignType.PSC_Box_Girder_Bridge_WS;
            }
        }
        public void Create_Project()
        {
            user_path = Path.Combine(iApp.LastDesignWorkingFolder, Title);
            if (!Directory.Exists(user_path))
            {
                Directory.CreateDirectory(user_path);
            }
            string fname = Path.Combine(user_path, Project_Name + ".apr");

            int ty = (int)Project_Type;
            File.WriteAllText(fname, ty.ToString());
            user_path = Path.Combine(user_path, Project_Name);

            if (Directory.Exists(user_path))
            {
                switch (MessageBox.Show(Project_Name + " is already exist. Do you want overwrite ?",
                   "ASTRA", MessageBoxButtons.YesNoCancel))
                {
                    case System.Windows.Forms.DialogResult.Cancel:
                        return;
                    case System.Windows.Forms.DialogResult.Yes:
                        //Delete Folders
                        Delete_Folder(user_path);
                        break;
                }
            }
            if (!Directory.Exists(user_path))
            {
                Directory.CreateDirectory(user_path);
            }

            MessageBox.Show(Project_Name + " is Created.", "ASTRA", MessageBoxButtons.OK);
        }

        public void Set_Project_Name()
        {
            string dir = Path.Combine(iApp.LastDesignWorkingFolder, Title);

            string prj_name = "";
            string prj_dir = "";
            int c = 1;
            if (Directory.Exists(dir))
            {
                while (true)
                {
                    prj_name = "DESIGN JOB #" + c.ToString("00");
                    prj_dir = Path.Combine(dir, prj_name);

                    if (!Directory.Exists(prj_dir)) break;
                    c++;
                }
            }
            else
                prj_name = "DESIGN JOB #" + c.ToString("00");

            txt_project_name.Text = prj_name;

        }

        public void Delete_Folder(string folder)
        {
            try
            {
                if (Directory.Exists(folder))
                {
                    foreach (var item in Directory.GetDirectories(folder))
                    {
                        Delete_Folder(item);
                    }
                    foreach (var item in Directory.GetFiles(folder))
                    {
                        File.Delete(item);
                    }
                    Directory.Delete(folder);
                }
            }
            catch (Exception exx) { }
        }

        #endregion Chiranjit [2016 09 07]

        private void uC_RCC_Abut1_Abut_Counterfort_LS1_dead_load_CheckedChanged(object sender, EventArgs e)
        {

            if (uC_RCC_Abut1.uC_Abut_Counterfort_LS1.rbtn_dead_load.Checked)
            {
                uC_RCC_Abut1.uC_Abut_Counterfort_LS1.Reaction_A = txt_dead_vert_reac_kN.Text;
                uC_RCC_Abut1.uC_Abut_Counterfort_LS1.Reaction_B = txt_dead_vert_reac_kN.Text;
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {

        }


    }


    public class PSC_BoxGirderAnalysis
    {
        IApplication iApp;
        public JointNodeCollection Joints { get; set; }
        public JointNode[,] Joints_Array;
        public Member[,] Long_Girder_Members_Array;
        public Member[,] Cross_Girder_Members_Array;
        public MemberCollection MemColls { get; set; }

        public BridgeMemberAnalysis Bridge_Analysis = null;
        //CompleteDesign complete_design = null;
        public List<LoadData> LoadList = null;
        public List<LoadData> Live_Load_List = null;
        public TotalDeadLoad SIDL = null;

        int _Columns = 0, _Rows = 0;

        double span_length = 0.0;


        public string Start_Support { get; set; }
        public string End_Support { get; set; }
        string input_file, working_folder, user_path;
        public PSC_BoxGirderAnalysis(IApplication thisApp)
        {
            iApp = thisApp;

            input_file = working_folder = "";
            //Total_Rows = 0; Total_Columns = 0;
            Support_Distance = 0.5;

            HA_Loading_Members = "";
        }

        #region Properties

        public double Length { get; set; }
        public double WidthBridge { get; set; }
        public double Effective_Depth { get; set; }
        public int Total_Rows
        {
            get
            {
                //return (int)(((WidthBridge - (WidthCantilever)) / Spacing_Long_Girder) + 1);
                return 11;
            }
        }
        public int Total_Columns
        {
            get
            {
                //return (int)(((Length - (Effective_Depth)) / Spacing_Cross_Girder) + 5);
                //return (int)(((Length) / Spacing_Cross_Girder) + 2);
                return 11;
            }
        }
        public double Skew_Angle { get; set; }
        //Chiranjit [2011 10 17]  distance from end to support
        public double Support_Distance { get; set; }

        public double WidthCantilever { get; set; }
        public double Spacing_Long_Girder
        {
            get
            {
                return MyList.StringToDouble(((WidthBridge - (2 * WidthCantilever)) / 6.0).ToString("0.000"), 0.0);
            }
        }
        public double Spacing_Cross_Girder
        {
            get
            {
                //return MyList.StringToDouble(txt_cross_girder_spacing.Text, 0.0);
                return MyList.StringToDouble(((Length) / 8.0).ToString("0.000"), 0.0);
            }
        }


        #endregion Properties

        public string LiveLoad_File
        {
            get
            {
                return Path.Combine(working_folder, "LL.TXT");
            }
        }
        public string Analysis_Report
        {
            get
            {
                return Path.Combine(working_folder, "ANALYSIS_REP.TXT");
            }
        }
        public string Input_File
        {
            get
            {
                return input_file;
            }
            set
            {
                try
                {
                    input_file = value;
                    working_folder = Path.GetDirectoryName(input_file);
                    user_path = working_folder;
                }
                catch (Exception ex) { }
            }
        }
        public int NoOfInsideJoints
        {
            get
            {
                //return MyList.StringToInt(txt_cd_total_joints.Text, 0);
                return 1;
            }
        }


        public void CreateData_OLD()
        {

            //double x_incr = (Length / (Total_Columns - 1));
            //double z_incr = (WidthBridge / (Total_Rows - 1));

            double x_incr = Spacing_Cross_Girder;
            double z_incr = Spacing_Long_Girder;

            JointNode nd;
            //Joints_Array = new JointNode[Total_Rows, Total_Columns];
            //Long_Girder_Members_Array = new Member[Total_Rows, Total_Columns - 1];
            //Cross_Girder_Members_Array = new Member[Total_Rows - 1, Total_Columns];


            int iCols = 0;
            int iRows = 0;

            if (Joints == null)
                Joints = new JointNodeCollection();
            Joints.Clear();

            double skew_length = Math.Tan((Skew_Angle * (Math.PI / 180.0)));

            double val1 = 12.1;
            double val2 = val1 * skew_length;



            double last_x = 0.0;
            double last_z = 0.0;

            List<double> list_x = new List<double>();
            List<double> list_z = new List<double>();
            Hashtable z_table = new Hashtable();

            //Store Joint Coordinates
            double L_2, L_4, eff_d;
            double x_max, x_min;

            //int _Columns, _Rows;

            //_Columns = Total_Columns;
            //_Rows = Total_Rows;

            last_x = 0.0;
            //Creating X Coordinates at every Z level

            //list_x.Clear();
            //list_x.Add(0.0);
            //last_x = Effective_Depth;
            //last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            //list_x.Add(last_x);

            //last_x = Length / 4.0;
            //last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            //list_x.Add(last_x);

            //last_x = Length / 2.0;
            //last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            //list_x.Add(last_x);

            ////last_x = Length - Effective_Depth;
            ////last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            ////list_x.Add(last_x);

            //last_x = Length;
            //last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            //list_x.Add(last_x);

            ////list_x.Add(Length / 4.0);
            ////list_x.Add(Length / 2.0);
            ////list_x.Add(Length);
            //last_x = x_incr;
            //do
            //{
            //    if (!list_x.Contains(last_x) && last_x > Effective_Depth && last_x < (Length - Effective_Depth))
            //        list_x.Add(last_x);
            //    last_x += x_incr;
            //    last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);

            //}
            //while (last_x <= Length);

            //list_x.Sort();

            //list_z.Clear();
            //list_z.Add(0);
            //list_z.Add(WidthCantilever);
            //list_z.Add(WidthCantilever / 2);
            //list_z.Add(WidthBridge - WidthCantilever);
            //list_z.Add(WidthBridge - WidthCantilever / 2);
            //list_z.Add(WidthBridge);
            //last_z = WidthCantilever + z_incr;
            //do
            //{
            //    if (!list_z.Contains(last_z) && last_z > WidthCantilever && last_z < (WidthBridge - WidthCantilever - 0.2))
            //        list_z.Add(last_z);
            //    last_z += z_incr;

            //} while (last_z <= WidthBridge);
            //list_z.Sort();


            #region Chiranjit [2011 09 23] Correct Create Data

            list_x.Clear();
            list_x.Add(0.0);
            last_x = Effective_Depth;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            last_x = Length / 4.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            last_x = Length / 2.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);


            last_x = Length - Effective_Depth;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);


            last_x = Length;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            last_x = x_incr;

            int i = 0;
            bool flag = true;
            do
            {
                flag = false;
                for (i = 0; i < list_x.Count; i++)
                {
                    if (last_x.ToString("0.00") == list_x[i].ToString("0.00"))
                    {
                        flag = true; break;
                    }
                }

                if (!flag && last_x > Effective_Depth && last_x < (Length - Effective_Depth))
                    list_x.Add(last_x);
                last_x += x_incr;
                last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);

            }
            while (last_x <= Length);
            list_x.Sort();


            //list_z.Clear();
            //list_z.Add(0);
            //list_z.Add(WidthCantilever);
            //list_z.Add(WidthCantilever / 2);
            //list_z.Add(WidthBridge - WidthCantilever);
            //list_z.Add(WidthBridge - WidthCantilever / 2);
            //list_z.Add(WidthBridge);
            //last_z = WidthCantilever + z_incr;
            //do
            //{
            //    if (!list_z.Contains(last_z) && last_z > WidthCantilever && last_z < (WidthBridge - WidthCantilever - 0.2))
            //        list_z.Add(last_z);
            //    last_z += z_incr;

            //} while (last_z <= WidthBridge);
            list_z.Add(0);
            last_z = WidthCantilever;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);

            last_z = WidthCantilever / 2;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);

            last_z = WidthBridge - WidthCantilever;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);
            last_z = WidthBridge - (WidthCantilever / 2.0);
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);


            last_z = WidthBridge;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);

            last_z = WidthCantilever + z_incr;
            do
            {
                flag = false;
                for (i = 0; i < list_z.Count; i++)
                {
                    if (last_z.ToString("0.00") == list_z[i].ToString("0.00"))
                    {
                        flag = true; break;
                    }
                }

                if (!flag && last_z > WidthCantilever && last_z < (WidthBridge - WidthCantilever - 0.2))
                    list_z.Add(last_z);
                last_z += z_incr;
                last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);

            } while (last_z <= WidthBridge);

            list_z.Sort();
            #endregion Chiranjit [2011 09 23] Correct Create Data



            _Columns = list_x.Count;
            _Rows = list_z.Count;

            //int i = 0;

            List<double> list = new List<double>();

            for (iRows = 0; iRows < _Rows; iRows++)
            {
                list = new List<double>();
                for (iCols = 0; iCols < _Columns; iCols++)
                {
                    list.Add(list_x[iCols] + list_z[iRows] * skew_length);
                }
                z_table.Add(list_z[iRows], list);
            }

            Joints_Array = new JointNode[_Rows, _Columns];
            Long_Girder_Members_Array = new Member[_Rows, _Columns - 1];
            Cross_Girder_Members_Array = new Member[_Rows - 1, _Columns];



            for (iRows = 0; iRows < _Rows; iRows++)
            {
                list_x = z_table[list_z[iRows]] as List<double>;
                for (iCols = 0; iCols < _Columns; iCols++)
                {
                    nd = new JointNode();
                    nd.Y = 0;
                    nd.Z = list_z[iRows];

                    //nd.X = list_x[iCols] + (skew_length * list_z[iRows]);
                    nd.X = list_x[iCols];

                    nd.NodeNo = Joints.JointNodes.Count + 1;
                    Joints.Add(nd);

                    Joints_Array[iRows, iCols] = nd;

                    last_x = nd.X;
                }
            }
            int nodeNo = 0;
            Joints.Clear();

            for (iCols = 0; iCols < _Columns; iCols++)
            {
                for (iRows = 0; iRows < _Rows; iRows++)
                {
                    nodeNo++;
                    Joints_Array[iRows, iCols].NodeNo = nodeNo;
                    Joints.Add(Joints_Array[iRows, iCols]);

                }
            }


            Member mem = new Member();

            if (MemColls == null)
                MemColls = new MemberCollection();
            MemColls.Clear();
            for (iCols = 0; iCols < _Columns; iCols++)
            {
                for (iRows = 1; iRows < _Rows; iRows++)
                {
                    mem = new Member();
                    mem.StartNode = Joints_Array[iRows - 1, iCols];
                    mem.EndNode = Joints_Array[iRows, iCols];
                    mem.MemberNo = MemColls.Count + 1;
                    MemColls.Add(mem);
                    Cross_Girder_Members_Array[iRows - 1, iCols] = mem;
                }
            }
            for (iRows = 0; iRows < _Rows; iRows++)
            {
                for (iCols = 1; iCols < _Columns; iCols++)
                {
                    mem = new Member();
                    mem.StartNode = Joints_Array[iRows, iCols - 1];
                    mem.EndNode = Joints_Array[iRows, iCols];
                    mem.MemberNo = MemColls.Count + 1;
                    MemColls.Add(mem);
                    Long_Girder_Members_Array[iRows, iCols - 1] = mem;
                }
            }
        }

        public void CreateData()
        {

            //double x_incr = (Length / (Total_Columns - 1));
            //double z_incr = (WidthBridge / (Total_Rows - 1));

            double x_incr = Spacing_Cross_Girder;
            double z_incr = Spacing_Long_Girder;

            JointNode nd;
            //Joints_Array = new JointNode[Total_Rows, Total_Columns];
            //Long_Girder_Members_Array = new Member[Total_Rows, Total_Columns - 1];
            //Cross_Girder_Members_Array = new Member[Total_Rows - 1, Total_Columns];


            int iCols = 0;
            int iRows = 0;

            if (Joints == null)
                Joints = new JointNodeCollection();
            Joints.Clear();

            double skew_length = Math.Tan((Skew_Angle * (Math.PI / 180.0)));

            double val1 = 12.1;
            double val2 = val1 * skew_length;



            double last_x = 0.0;
            double last_z = 0.0;

            List<double> list_x = new List<double>();
            List<double> list_z = new List<double>();
            Hashtable z_table = new Hashtable();

            //Store Joint Coordinates
            double L_2, L_4, eff_d, L_8;
            double x_max, x_min;

            //int _Columns, _Rows;

            //_Columns = Total_Columns;
            //_Rows = Total_Rows;

            last_x = 0.0;
            //Creating X Coordinates at every Z level

            //list_x.Clear();
            //list_x.Add(0.0);
            //last_x = Effective_Depth;
            //last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            //list_x.Add(last_x);

            //last_x = Length / 4.0;
            //last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            //list_x.Add(last_x);

            //last_x = Length / 2.0;
            //last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            //list_x.Add(last_x);

            ////last_x = Length - Effective_Depth;
            ////last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            ////list_x.Add(last_x);

            //last_x = Length;
            //last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            //list_x.Add(last_x);

            ////list_x.Add(Length / 4.0);
            ////list_x.Add(Length / 2.0);
            ////list_x.Add(Length);
            //last_x = x_incr;
            //do
            //{
            //    if (!list_x.Contains(last_x) && last_x > Effective_Depth && last_x < (Length - Effective_Depth))
            //        list_x.Add(last_x);
            //    last_x += x_incr;
            //    last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);

            //}
            //while (last_x <= Length);

            //list_x.Sort();

            //list_z.Clear();
            //list_z.Add(0);
            //list_z.Add(WidthCantilever);
            //list_z.Add(WidthCantilever / 2);
            //list_z.Add(WidthBridge - WidthCantilever);
            //list_z.Add(WidthBridge - WidthCantilever / 2);
            //list_z.Add(WidthBridge);
            //last_z = WidthCantilever + z_incr;
            //do
            //{
            //    if (!list_z.Contains(last_z) && last_z > WidthCantilever && last_z < (WidthBridge - WidthCantilever - 0.2))
            //        list_z.Add(last_z);
            //    last_z += z_incr;

            //} while (last_z <= WidthBridge);
            //list_z.Sort();


            #region Chiranjit [2011 09 23] Correct Create Data

            list_x.Clear();

            //Start
            list_x.Add(0.0);

            last_x = Length;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            //Support 
            last_x = Support_Distance;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);
            //Support 
            last_x = Length - Support_Distance;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            //Deff 
            last_x = Effective_Depth;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            last_x = Length - Effective_Depth;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);



            // L/8 
            last_x = Length / 8.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            // L/8 
            last_x = Length - last_x;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);




            // L/4 
            last_x = Length / 4.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            // L/4 
            last_x = Length - last_x;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);


            // 3L/8 
            last_x = 3 * Length / 8.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);
            last_x = Length - last_x;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);


            last_x = Length / 2.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);





            //last_x = x_incr;

            int i = 0;
            bool flag = true;
            //do
            //{
            //    flag = false;
            //    for (i = 0; i < list_x.Count; i++)
            //    {
            //        if (last_x.ToString("0.00") == list_x[i].ToString("0.00"))
            //        {
            //            flag = true; break;
            //        }
            //    }

            //    if (!flag && last_x > Effective_Depth && last_x < (Length - Effective_Depth))
            //        list_x.Add(last_x);
            //    last_x += x_incr;
            //    last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);

            //}
            //while (last_x <= Length);
            list_x.Sort();


            //list_z.Clear();
            //list_z.Add(0);
            //list_z.Add(WidthCantilever);
            //list_z.Add(WidthCantilever / 2);
            //list_z.Add(WidthBridge - WidthCantilever);
            //list_z.Add(WidthBridge - WidthCantilever / 2);
            //list_z.Add(WidthBridge);
            //last_z = WidthCantilever + z_incr;
            //do
            //{
            //    if (!list_z.Contains(last_z) && last_z > WidthCantilever && last_z < (WidthBridge - WidthCantilever - 0.2))
            //        list_z.Add(last_z);
            //    last_z += z_incr;

            //} while (last_z <= WidthBridge);
            list_z.Add(0);
            last_z = WidthCantilever;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);

            last_z = WidthCantilever / 2;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);

            last_z = WidthBridge - WidthCantilever;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);
            last_z = WidthBridge - (WidthCantilever / 2.0);
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);


            last_z = WidthBridge;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);

            last_z = WidthCantilever + z_incr;
            do
            {
                flag = false;
                for (i = 0; i < list_z.Count; i++)
                {
                    if (last_z.ToString("0.00") == list_z[i].ToString("0.00"))
                    {
                        flag = true; break;
                    }
                }

                if (!flag && last_z > WidthCantilever && last_z < (WidthBridge - WidthCantilever - 0.2))
                    list_z.Add(last_z);
                last_z += z_incr;
                last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);

            } while (last_z <= WidthBridge);

            list_z.Sort();
            #endregion Chiranjit [2011 09 23] Correct Create Data



            _Columns = list_x.Count;
            _Rows = list_z.Count;

            //int i = 0;

            List<double> list = new List<double>();

            for (iRows = 0; iRows < _Rows; iRows++)
            {
                list = new List<double>();
                for (iCols = 0; iCols < _Columns; iCols++)
                {
                    list.Add(list_x[iCols] + list_z[iRows] * skew_length);
                }
                z_table.Add(list_z[iRows], list);
            }

            Joints_Array = new JointNode[_Rows, _Columns];
            Long_Girder_Members_Array = new Member[_Rows, _Columns - 1];
            Cross_Girder_Members_Array = new Member[_Rows - 1, _Columns];



            for (iRows = 0; iRows < _Rows; iRows++)
            {
                list_x = z_table[list_z[iRows]] as List<double>;
                for (iCols = 0; iCols < _Columns; iCols++)
                {
                    nd = new JointNode();
                    nd.Y = 0;
                    nd.Z = list_z[iRows];

                    //nd.X = list_x[iCols] + (skew_length * list_z[iRows]);
                    nd.X = list_x[iCols];

                    nd.NodeNo = Joints.JointNodes.Count + 1;
                    Joints.Add(nd);

                    Joints_Array[iRows, iCols] = nd;

                    last_x = nd.X;
                }
            }
            int nodeNo = 0;
            Joints.Clear();

            for (iCols = 0; iCols < _Columns; iCols++)
            {
                for (iRows = 0; iRows < _Rows; iRows++)
                {
                    nodeNo++;
                    Joints_Array[iRows, iCols].NodeNo = nodeNo;
                    Joints.Add(Joints_Array[iRows, iCols]);

                }
            }


            Member mem = new Member();

            if (MemColls == null)
                MemColls = new MemberCollection();
            MemColls.Clear();
            for (iCols = 0; iCols < _Columns; iCols++)
            {
                for (iRows = 1; iRows < _Rows; iRows++)
                {
                    mem = new Member();
                    mem.StartNode = Joints_Array[iRows - 1, iCols];
                    mem.EndNode = Joints_Array[iRows, iCols];
                    mem.MemberNo = MemColls.Count + 1;
                    MemColls.Add(mem);
                    Cross_Girder_Members_Array[iRows - 1, iCols] = mem;
                }
            }
            for (iRows = 0; iRows < _Rows; iRows++)
            {
                for (iCols = 1; iCols < _Columns; iCols++)
                {
                    mem = new Member();
                    mem.StartNode = Joints_Array[iRows, iCols - 1];
                    mem.EndNode = Joints_Array[iRows, iCols];
                    mem.MemberNo = MemColls.Count + 1;
                    MemColls.Add(mem);
                    Long_Girder_Members_Array[iRows, iCols - 1] = mem;
                }
            }
        }


        public List<int> HA_Lanes;
        List<double> HA_distances = new List<double>();

        public string HA_Loading_Members;



        public void CreateData_British()
        {

            double x_incr = Spacing_Cross_Girder;
            double z_incr = Spacing_Long_Girder;

            JointNode nd;

            int iCols = 0;
            int iRows = 0;

            if (Joints == null)
                Joints = new JointNodeCollection();
            Joints.Clear();

            double skew_length = Math.Tan((Skew_Angle * (Math.PI / 180.0)));

            double val1 = 12.1;
            double val2 = val1 * skew_length;



            double last_x = 0.0;
            double last_z = 0.0;

            List<double> list_x = new List<double>();
            List<double> list_z = new List<double>();
            Hashtable z_table = new Hashtable();

            //Store Joint Coordinates
            double L_2, L_4, eff_d, L_8;
            double x_max, x_min;



            last_x = 0.0;


            #region Chiranjit [2011 09 23] Correct Create Data

            list_x.Clear();

            //Start
            list_x.Add(0.0);

            last_x = Length;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            //Support 
            last_x = Support_Distance;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);
            //Support 
            last_x = Length - Support_Distance;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            //Deff 
            last_x = Effective_Depth;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            last_x = Length - Effective_Depth;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);



            // L/8 
            last_x = Length / 8.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            // L/8 
            last_x = Length - last_x;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);




            // L/4 
            last_x = Length / 4.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            // L/4 
            last_x = Length - last_x;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);


            // 3L/8 
            last_x = 3 * Length / 8.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);
            last_x = Length - last_x;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);


            last_x = Length / 2.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            //last_x = x_incr;

            int i = 0;
            bool flag = true;

            list_x.Sort();

            list_z.Add(0);
            last_z = WidthCantilever;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);

            last_z = WidthCantilever / 2;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);

            last_z = WidthBridge - WidthCantilever;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);
            last_z = WidthBridge - (WidthCantilever / 2.0);
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);


            last_z = WidthBridge;
            last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);
            list_z.Add(last_z);

            last_z = WidthCantilever + z_incr;
            do
            {
                flag = false;
                for (i = 0; i < list_z.Count; i++)
                {
                    if (last_z.ToString("0.00") == list_z[i].ToString("0.00"))
                    {
                        flag = true; break;
                    }
                }

                if (!flag && last_z > WidthCantilever && last_z < (WidthBridge - WidthCantilever - 0.2))
                    list_z.Add(last_z);
                last_z += z_incr;
                last_z = MyList.StringToDouble(last_z.ToString("0.000"), 0.0);

            } while (last_z <= WidthBridge);


            //Chiranjit [2014 09 10]
            HA_distances.Clear();
            if (HA_Lanes.Count > 0)
            {
                double ha = 0.0;

                //for (i = 0; i < HA_Lanes.Count; i++)
                //{
                //    ha = 1.75 + (HA_Lanes[i] - 1) * 3.5;
                //    if (!list_z.Contains(ha))
                //    {
                //        list_z.Add(ha);
                //        HA_distances.Add(ha);
                //    }
                //}

                list_z.Sort();
                ha = list_z[list_z.Count / 2];
                HA_distances.Add(ha);


                //for (i = 0; i < list_z.Count; i++)
                //{
                //    if (ha.ToString("0.00") == list_z[i].ToString("0.00"))
                //    {
                //        HA_distances.Add(list_z[i]); break;
                //    }
                //}
            }

            list_z.Sort();

            #endregion Chiranjit [2011 09 23] Correct Create Data



            _Columns = list_x.Count;
            _Rows = list_z.Count;

            //int i = 0;

            List<double> list = new List<double>();

            for (iRows = 0; iRows < _Rows; iRows++)
            {
                list = new List<double>();
                for (iCols = 0; iCols < _Columns; iCols++)
                {
                    list.Add(list_x[iCols] + list_z[iRows] * skew_length);
                }
                z_table.Add(list_z[iRows], list);
            }

            Joints_Array = new JointNode[_Rows, _Columns];
            Long_Girder_Members_Array = new Member[_Rows, _Columns - 1];
            Cross_Girder_Members_Array = new Member[_Rows - 1, _Columns];



            for (iRows = 0; iRows < _Rows; iRows++)
            {
                list_x = z_table[list_z[iRows]] as List<double>;
                for (iCols = 0; iCols < _Columns; iCols++)
                {
                    nd = new JointNode();
                    nd.Y = 0;
                    nd.Z = list_z[iRows];

                    //nd.X = list_x[iCols] + (skew_length * list_z[iRows]);
                    nd.X = list_x[iCols];

                    nd.NodeNo = Joints.JointNodes.Count + 1;
                    Joints.Add(nd);

                    Joints_Array[iRows, iCols] = nd;

                    last_x = nd.X;
                }
            }
            int nodeNo = 0;
            Joints.Clear();

            for (iCols = 0; iCols < _Columns; iCols++)
            {
                for (iRows = 0; iRows < _Rows; iRows++)
                {
                    nodeNo++;
                    Joints_Array[iRows, iCols].NodeNo = nodeNo;
                    Joints.Add(Joints_Array[iRows, iCols]);

                }
            }


            Member mem = new Member();

            if (MemColls == null)
                MemColls = new MemberCollection();
            MemColls.Clear();
            for (iCols = 0; iCols < _Columns; iCols++)
            {
                for (iRows = 1; iRows < _Rows; iRows++)
                {
                    mem = new Member();
                    mem.StartNode = Joints_Array[iRows - 1, iCols];
                    mem.EndNode = Joints_Array[iRows, iCols];
                    mem.MemberNo = MemColls.Count + 1;
                    MemColls.Add(mem);
                    Cross_Girder_Members_Array[iRows - 1, iCols] = mem;
                }
            }
            for (iRows = 0; iRows < _Rows; iRows++)
            {
                for (iCols = 1; iCols < _Columns; iCols++)
                {
                    mem = new Member();
                    mem.StartNode = Joints_Array[iRows, iCols - 1];
                    mem.EndNode = Joints_Array[iRows, iCols];
                    mem.MemberNo = MemColls.Count + 1;
                    MemColls.Add(mem);
                    Long_Girder_Members_Array[iRows, iCols - 1] = mem;
                }
            }
        }


        public void CreateData_DeadLoad()
        {

            //double x_incr = (Length / (Total_Columns - 1));
            //double z_incr = (WidthBridge / (Total_Rows - 1));

            double x_incr = Spacing_Cross_Girder;
            double z_incr = Spacing_Long_Girder;

            JointNode nd;
            //Joints_Array = new JointNode[Total_Rows, Total_Columns];
            //Long_Girder_Members_Array = new Member[Total_Rows, Total_Columns - 1];
            //Cross_Girder_Members_Array = new Member[Total_Rows - 1, Total_Columns];


            int iCols = 0;
            int iRows = 0;

            if (Joints == null)
                Joints = new JointNodeCollection();
            Joints.Clear();

            double skew_length = Math.Tan((Skew_Angle * (Math.PI / 180.0)));

            double val1 = 12.1;
            double val2 = val1 * skew_length;



            double last_x = 0.0;
            double last_z = 0.0;

            List<double> list_x = new List<double>();
            List<double> list_z = new List<double>();
            Hashtable z_table = new Hashtable();

            //Store Joint Coordinates
            double L_2, L_4, eff_d, L_8;
            double x_max, x_min;

            last_x = 0.0;


            #region Chiranjit [2011 09 23] Correct Create Data

            list_x.Clear();

            //Start
            list_x.Add(0.0);

            last_x = Length;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            //Support 
            last_x = Support_Distance;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);
            //Support 
            last_x = Length - Support_Distance;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            //Deff 
            last_x = Effective_Depth;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            last_x = Length - Effective_Depth;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);



            // L/8 
            last_x = Length / 8.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            // L/8 
            last_x = Length - last_x;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);




            // L/4 
            last_x = Length / 4.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);

            // L/4 
            last_x = Length - last_x;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);


            // 3L/8 
            last_x = 3 * Length / 8.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);
            last_x = Length - last_x;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);


            last_x = Length / 2.0;
            last_x = MyList.StringToDouble(last_x.ToString("0.000"), 0.0);
            list_x.Add(last_x);






            int i = 0;
            bool flag = true;

            list_x.Sort();


            list_z.Add(0);
            last_z = WidthCantilever;

            list_z.Sort();
            #endregion Chiranjit [2011 09 23] Correct Create Data

            _Columns = list_x.Count;
            _Rows = list_z.Count;

            List<double> list = new List<double>();

            for (iRows = 0; iRows < _Rows; iRows++)
            {
                list = new List<double>();
                for (iCols = 0; iCols < _Columns; iCols++)
                {
                    list.Add(list_x[iCols] + list_z[iRows] * skew_length);
                }
                z_table.Add(list_z[iRows], list);
            }

            Joints_Array = new JointNode[_Rows, _Columns];
            Long_Girder_Members_Array = new Member[_Rows, _Columns - 1];
            Cross_Girder_Members_Array = new Member[_Rows - 1, _Columns];

            for (iRows = 0; iRows < _Rows; iRows++)
            {
                list_x = z_table[list_z[iRows]] as List<double>;
                for (iCols = 0; iCols < _Columns; iCols++)
                {
                    nd = new JointNode();
                    nd.Y = 0;
                    nd.Z = list_z[iRows];

                    nd.X = list_x[iCols];

                    nd.NodeNo = Joints.JointNodes.Count + 1;
                    Joints.Add(nd);

                    Joints_Array[iRows, iCols] = nd;

                    last_x = nd.X;
                }
            }
            int nodeNo = 0;
            Joints.Clear();

            for (iCols = 0; iCols < _Columns; iCols++)
            {
                for (iRows = 0; iRows < _Rows; iRows++)
                {
                    nodeNo++;
                    Joints_Array[iRows, iCols].NodeNo = nodeNo;
                    Joints.Add(Joints_Array[iRows, iCols]);

                }
            }


            Member mem = new Member();

            if (MemColls == null)
                MemColls = new MemberCollection();
            MemColls.Clear();
            for (iCols = 0; iCols < _Columns; iCols++)
            {
                for (iRows = 1; iRows < _Rows; iRows++)
                {
                    mem = new Member();
                    mem.StartNode = Joints_Array[iRows - 1, iCols];
                    mem.EndNode = Joints_Array[iRows, iCols];
                    mem.MemberNo = MemColls.Count + 1;
                    MemColls.Add(mem);
                    Cross_Girder_Members_Array[iRows - 1, iCols] = mem;
                }
            }
            for (iRows = 0; iRows < _Rows; iRows++)
            {
                for (iCols = 1; iCols < _Columns; iCols++)
                {
                    mem = new Member();
                    mem.StartNode = Joints_Array[iRows, iCols - 1];
                    mem.EndNode = Joints_Array[iRows, iCols];
                    mem.MemberNo = MemColls.Count + 1;
                    MemColls.Add(mem);
                    Long_Girder_Members_Array[iRows, iCols - 1] = mem;
                }
            }
        }

        public void WriteData_LiveLoad(string file_name, PSC_Box_Section_Data psc_section)
        {
            string kStr = "";
            List<string> list = new List<string>();
            int i = 0;

            list.Add("ASTRA FLOOR PSC BOX GIRDER BRIDGE DECK ANALYSIS WITH MOVING LOAD");
            list.Add("UNIT METER MTON");
            list.Add("JOINT COORDINATES");
            for (i = 0; i < Joints.Count; i++)
            {
                list.Add(Joints[i].ToString());
            }
            list.Add("MEMBER INCIDENCES");
            for (i = 0; i < MemColls.Count; i++)
            {
                list.Add(MemColls[i].ToString());
            }

            list.Add("SECTION PROPERTIES");
            //list.Add("191 TO 226 215 TO 226 239 TO 262  PRIS AX 0.001 IX 0.0001 IZ 0.0001");
            //list.Add("181 TO 188 205 TO 212 PRIS AX 1.146 IX 0.022 IZ 0.187 ");
            //list.Add("180 189 204 213 PRIS AX 0.7001 IX 0.0442 IZ 0.105 ");
            //list.Add("179 190 203 214 PRIS AX 1.1037 IX 0.067 IZ 0.167");
            //list.Add("157 TO 164 229 TO 236 PRIS AX 1.215 IX 0.023 IZ 0.192 ");
            //list.Add("155 166 227 238 PRIS AX 1.2407 IX 0.0698 IZ 0.181 ");
            //list.Add("156 165 228 237 PRIS AX 0.7897 IX 0.0461 IZ 0.115 ");
            //list.Add("61 TO 70 PRIS AX 0.385 IX 0.008 IZ 0.277");
            //list.Add("51 TO 60 71 TO 80 PRIS AX 0.523 IX 0.010 IZ 0.003");
            //list.Add("41 TO 50 81 TO 90 PRIS AX 0.406 IX 0.008 IZ 0.002");
            //list.Add("31 TO 30 91 TO 100 PRIS AX 0.482 IX 0.009 IZ 0.003");
            //list.Add("21 TO 30 101 TO 110  PRIS AX 0.482 IX 0.009 IZ 0.003");
            //list.Add("11 TO 20 111 TO 120 131 TO 154 167 TO 178  PRIS AX 0.001 IX 0.0001 IZ 0.0001");
            //list.Add("1 TO 10 121 TO 130  PRIS AX 0.001 IX 0.0001 IZ 0.0001");


            list.Add(string.Format("1 TO 130   PRIS AX 0.001 IX 0.0001 IZ 0.0001"));
            //Support
            list.Add(string.Format("131 143 155 167 179 191 203 215 227 239 251  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));
            list.Add(string.Format("141 153 165 177 189 201 213 225 237 249 261  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));
            list.Add(string.Format("132 144 156 168 180 192 204 216 228 240 252  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));
            list.Add(string.Format("142 154 166 178 190 202 214 226 238 250 262  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));

            //L/2
            list.Add(string.Format("133 TO 140  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("145 TO 152  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("157 TO 164 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("169 TO 176 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("181 TO 188 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("193 TO 200 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("205 TO 212 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("217 TO 224 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("229 TO 236 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("241 TO 248 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("253 TO 260 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            //list.Add("SECTION PROPERTIES");
            //list.Add("153 TO 158 173 TO 178 PRIS AX 1.146 IX 0.022 IZ 0.187");
            //list.Add("151 160 171 180 PRIS AX 1.1037 IX 0.067 IZ 0.167");
            //list.Add("152 159 172 179 PRIS AX 0.7001 IX 0.0442 IZ 0.105");
            //list.Add("133 TO 138 193 TO 198 PRIS AX 1.215 IX 0.023 IZ 0.192");
            //list.Add("131 140 191 200 PRIS AX 1.2407 IX 0.0698 IZ 0.181");
            //list.Add("132 139 192 199 PRIS AX 0.7897 IX 0.0461 IZ 0.115");
            //list.Add("11 TO 20 91 TO 100 111 TO 130 141 TO 150 PRIS AX 0.001 IX 0.0001 IZ 0.0001");
            //list.Add("161 TO 170 181 TO 190 201 TO 220 PRIS AX 0.001 IX 0.0001 IZ 0.0001");
            //list.Add("1 TO 10 101 TO 110 PRIS AX 0.339 IX 0.007 IZ 0.242");
            //list.Add("51 TO 60 PRIS AX 0.385 IX 0.008 IZ 0.277");
            //list.Add("41 TO 50 61 TO 70 PRIS AX 0.523 IX 0.010 IZ 0.003");
            //list.Add("31 TO 40 71 TO 80 PRIS AX 0.406 IX 0.008 IZ 0.002");
            //list.Add("21 TO 30 81 TO 90 PRIS AX 0.482 IX 0.009 IZ 0.003");
            list.Add("MATERIAL CONSTANT");
            list.Add("E 2.85E6 ALL");
            list.Add("DENSITY CONCRETE ALL");
            list.Add("POISSON CONCRETE ALL");
            list.Add("SUPPORT");

            //list.Add("12 13 14 15 16 17 18 19 20 21 22 PINNED");
            //list.Add("122 123 124 125 126 127 128 129 130 131 132  FIXED BUT FX MZ");

            string support_left_joints = "12 13 14 15 16 17 18 19 20 21 22";
            string support_right_joints = "122 123 124 125 126 127 128 129 130 131 132";

            list.Add(string.Format("{0} {1}", support_left_joints, Start_Support));
            list.Add(string.Format("{0} {1}", support_right_joints, End_Support));



            //list.Add("14 16 18 20  PINNED");
            //list.Add("124 126 128 130  FIXED BUT FX MZ");
            //list.Add("1 3 5 7 9 11 PINNED");
            //list.Add("111 113 115 117 119 121 PINNED");
            list.Add("LOAD 1 DEAD LOAD + SIDL");
            list.Add("**dEAD lOAD");
            list.Add("MEMBER LOAD");
            list.Add("153 TO 158 173 TO 178 UNI GY -2.7504");
            list.Add("151 160 171 180 UNI GY -2.66888");
            list.Add("152 159 172 179 UNI GY -1.68024");
            list.Add("133 TO 138 193 TO 198 UNI GY -2.916");
            list.Add("131 140 191 200 UNI GY -2.97768");
            list.Add("132 139 192 199 UNI GY -1.89528");
            list.Add("1 TO 10 101 TO 110 UNI GY -0.702");
            list.Add("** SIDL");
            list.Add("MEMBER LOAD");
            list.Add("** WEARING COAT");
            list.Add("131 TO 140 191 TO 200 UNI GY -0.68");
            list.Add("151 TO 160 171 TO 180 UNI GY -0.53");
            list.Add("**CRASH BARRIER");
            list.Add("111 TO 120 211 TO 220 UNI GY -1.0");
            list.Add("**** OUTER GIRDER *********");
            iApp.LiveLoads.Impact_Factor(ref list, iApp.DesignStandard);
            //list.Add("DEFINE MOVING LOAD FILE LL.TXT");
            //list.Add("TYPE 1 CLA 1.179");
            //list.Add("TYPE 2 A70R 1.188");
            //list.Add("TYPE 3 A70RT 1.10");
            //list.Add("TYPE 4 CLAR 1.179");
            //list.Add("TYPE 5 A70RR 1.188");
            //list.Add("**** 3 LANE CLASS A *****");
            list.Add("LOAD GENERATION 191");
            list.Add("TYPE 1 -18.8 0 2.75 XINC 0.2");
            list.Add("TYPE 1 -18.8 0 6.25 XINC 0.2");
            list.Add("TYPE 1 -18.8 0 9.75 XINC 0.2");
            //list.Add("**** 3 LANE CLASS A *****");
            //list.Add("*LOAD GENERATION 160");
            //list.Add("*TYPE 1 -18.8 0 2.125 XINC 0.2");
            //list.Add("*TYPE 1 -18.8 0 5.625 XINC 0.2");
            //list.Add("*TYPE 1 -18.8 0 9.125 XINC 0.2");
            //list.Add("*PLOT DISPLACEMENT FILE");
            list.Add("PRINT SUPPORT REACTIONS");
            list.Add("PRINT MAX FORCE ENVELOPE LIST 131 TO 140");
            list.Add("PRINT MAX FORCE ENVELOPE LIST 151 TO 160");
            list.Add("PERFORM ANALYSIS");
            list.Add("FINISH");

            list.Add(kStr);
            File.WriteAllLines(file_name, list.ToArray());
            //iApp.Write_LiveLoad_LL_TXT(working_folder, true, iApp.DesignStandard);
            iApp.Write_LiveLoad_LL_TXT(Path.GetDirectoryName(file_name));

        }

        public void WriteData_LiveLoad(string file_name, PSC_Box_Section_Data psc_section, List<string> ll_loads)
        {
            string kStr = "";
            List<string> list = new List<string>();
            int i = 0;

            list.Add("ASTRA FLOOR PSC BOX GIRDER BRIDGE DECK ANALYSIS WITH MOVING LOAD");
            list.Add("UNIT METER MTON");
            list.Add("JOINT COORDINATES");
            for (i = 0; i < Joints.Count; i++)
            {
                list.Add(Joints[i].ToString());
            }
            list.Add("MEMBER INCIDENCES");
            for (i = 0; i < MemColls.Count; i++)
            {
                list.Add(MemColls[i].ToString());
            }

            list.Add("SECTION PROPERTIES");
            //list.Add("191 TO 226 215 TO 226 239 TO 262  PRIS AX 0.001 IX 0.0001 IZ 0.0001");
            //list.Add("181 TO 188 205 TO 212 PRIS AX 1.146 IX 0.022 IZ 0.187 ");
            //list.Add("180 189 204 213 PRIS AX 0.7001 IX 0.0442 IZ 0.105 ");
            //list.Add("179 190 203 214 PRIS AX 1.1037 IX 0.067 IZ 0.167");
            //list.Add("157 TO 164 229 TO 236 PRIS AX 1.215 IX 0.023 IZ 0.192 ");
            //list.Add("155 166 227 238 PRIS AX 1.2407 IX 0.0698 IZ 0.181 ");
            //list.Add("156 165 228 237 PRIS AX 0.7897 IX 0.0461 IZ 0.115 ");
            //list.Add("61 TO 70 PRIS AX 0.385 IX 0.008 IZ 0.277");
            //list.Add("51 TO 60 71 TO 80 PRIS AX 0.523 IX 0.010 IZ 0.003");
            //list.Add("41 TO 50 81 TO 90 PRIS AX 0.406 IX 0.008 IZ 0.002");
            //list.Add("31 TO 30 91 TO 100 PRIS AX 0.482 IX 0.009 IZ 0.003");
            //list.Add("21 TO 30 101 TO 110  PRIS AX 0.482 IX 0.009 IZ 0.003");
            //list.Add("11 TO 20 111 TO 120 131 TO 154 167 TO 178  PRIS AX 0.001 IX 0.0001 IZ 0.0001");
            //list.Add("1 TO 10 121 TO 130  PRIS AX 0.001 IX 0.0001 IZ 0.0001");


            list.Add(string.Format("1 TO 130   PRIS AX 0.001 IX 0.0001 IZ 0.0001"));
            //Support
            list.Add(string.Format("131 143 155 167 179 191 203 215 227 239 251  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));
            list.Add(string.Format("141 153 165 177 189 201 213 225 237 249 261  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));
            list.Add(string.Format("132 144 156 168 180 192 204 216 228 240 252  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));
            list.Add(string.Format("142 154 166 178 190 202 214 226 238 250 262  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));

            //L/2
            list.Add(string.Format("133 TO 140  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("145 TO 152  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("157 TO 164 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("169 TO 176 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("181 TO 188 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("193 TO 200 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("205 TO 212 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("217 TO 224 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("229 TO 236 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("241 TO 248 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add(string.Format("253 TO 260 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}", psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            //list.Add("SECTION PROPERTIES");
            //list.Add("153 TO 158 173 TO 178 PRIS AX 1.146 IX 0.022 IZ 0.187");
            //list.Add("151 160 171 180 PRIS AX 1.1037 IX 0.067 IZ 0.167");
            //list.Add("152 159 172 179 PRIS AX 0.7001 IX 0.0442 IZ 0.105");
            //list.Add("133 TO 138 193 TO 198 PRIS AX 1.215 IX 0.023 IZ 0.192");
            //list.Add("131 140 191 200 PRIS AX 1.2407 IX 0.0698 IZ 0.181");
            //list.Add("132 139 192 199 PRIS AX 0.7897 IX 0.0461 IZ 0.115");
            //list.Add("11 TO 20 91 TO 100 111 TO 130 141 TO 150 PRIS AX 0.001 IX 0.0001 IZ 0.0001");
            //list.Add("161 TO 170 181 TO 190 201 TO 220 PRIS AX 0.001 IX 0.0001 IZ 0.0001");
            //list.Add("1 TO 10 101 TO 110 PRIS AX 0.339 IX 0.007 IZ 0.242");
            //list.Add("51 TO 60 PRIS AX 0.385 IX 0.008 IZ 0.277");
            //list.Add("41 TO 50 61 TO 70 PRIS AX 0.523 IX 0.010 IZ 0.003");
            //list.Add("31 TO 40 71 TO 80 PRIS AX 0.406 IX 0.008 IZ 0.002");
            //list.Add("21 TO 30 81 TO 90 PRIS AX 0.482 IX 0.009 IZ 0.003");
            list.Add("MATERIAL CONSTANT");
            list.Add("E 2.85E6 ALL");
            list.Add("DENSITY CONCRETE ALL");
            list.Add("POISSON CONCRETE ALL");
            list.Add("SUPPORT");

            //list.Add("12 13 14 15 16 17 18 19 20 21 22 PINNED");
            //list.Add("122 123 124 125 126 127 128 129 130 131 132  FIXED BUT FX MZ");

            string support_left_joints = "12 13 14 15 16 17 18 19 20 21 22";
            string support_right_joints = "122 123 124 125 126 127 128 129 130 131 132";

            list.Add(string.Format("{0} {1}", support_left_joints, Start_Support));
            list.Add(string.Format("{0} {1}", support_right_joints, End_Support));



            //list.Add("14 16 18 20  PINNED");
            //list.Add("124 126 128 130  FIXED BUT FX MZ");
            //list.Add("1 3 5 7 9 11 PINNED");
            //list.Add("111 113 115 117 119 121 PINNED");
            list.Add("LOAD 1 DEAD LOAD + SIDL");
            list.Add("**dEAD lOAD");
            list.Add("MEMBER LOAD");
            list.Add("153 TO 158 173 TO 178 UNI GY -2.7504");
            list.Add("151 160 171 180 UNI GY -2.66888");
            list.Add("152 159 172 179 UNI GY -1.68024");
            list.Add("133 TO 138 193 TO 198 UNI GY -2.916");
            list.Add("131 140 191 200 UNI GY -2.97768");
            list.Add("132 139 192 199 UNI GY -1.89528");
            list.Add("1 TO 10 101 TO 110 UNI GY -0.702");
            list.Add("** SIDL");
            list.Add("MEMBER LOAD");
            list.Add("** WEARING COAT");
            list.Add("131 TO 140 191 TO 200 UNI GY -0.68");
            list.Add("151 TO 160 171 TO 180 UNI GY -0.53");
            list.Add("**CRASH BARRIER");
            list.Add("111 TO 120 211 TO 220 UNI GY -1.0");
            list.Add("**** OUTER GIRDER *********");
            iApp.LiveLoads.Impact_Factor(ref list, iApp.DesignStandard);
            //list.Add("DEFINE MOVING LOAD FILE LL.TXT");
            //list.Add("TYPE 1 CLA 1.179");
            //list.Add("TYPE 2 A70R 1.188");
            //list.Add("TYPE 3 A70RT 1.10");
            //list.Add("TYPE 4 CLAR 1.179");
            //list.Add("TYPE 5 A70RR 1.188");
            //list.Add("**** 3 LANE CLASS A *****");
            list.Add("LOAD GENERATION 191");
            list.Add("TYPE 1 -18.8 0 2.75 XINC 0.2");
            list.Add("TYPE 1 -18.8 0 6.25 XINC 0.2");
            list.Add("TYPE 1 -18.8 0 9.75 XINC 0.2");
            //list.Add("**** 3 LANE CLASS A *****");
            //list.Add("*LOAD GENERATION 160");
            //list.Add("*TYPE 1 -18.8 0 2.125 XINC 0.2");
            //list.Add("*TYPE 1 -18.8 0 5.625 XINC 0.2");
            //list.Add("*TYPE 1 -18.8 0 9.125 XINC 0.2");
            //list.Add("*PLOT DISPLACEMENT FILE");
            list.Add("PRINT SUPPORT REACTIONS");
            list.Add("PRINT MAX FORCE ENVELOPE LIST 131 TO 140");
            list.Add("PRINT MAX FORCE ENVELOPE LIST 151 TO 160");
            list.Add("PERFORM ANALYSIS");
            list.Add("FINISH");

            list.Add(kStr);
            File.WriteAllLines(file_name, list.ToArray());
            if (ll_loads.Count > 0)
                File.WriteAllLines(MyList.Get_LL_TXT_File(file_name), ll_loads.ToArray());
        }

        public void WriteData_DeadLoad(string file_name, PSC_Box_Section_Data psc_section)
        {
            string kStr = "";
            List<string> list = new List<string>();
            int i = 0;

            list.Add("ASTRA FLOOR PSC BOX GIRDER BRIDGE DECK ANALYSIS WITH DEAD LOAD");
            list.Add("UNIT METER MTON");
            list.Add("JOINT COORDINATES");
            for (i = 0; i < Joints.Count; i++)
            {
                list.Add(Joints[i].ToString());
            }
            list.Add("MEMBER INCIDENCES");
            for (i = 0; i < MemColls.Count; i++)
            {
                list.Add(MemColls[i].ToString());
            }

            list.Add("SECTION PROPERTIES");
            //list.Add("1 13 PRIS AX 6.1997 IX 3.1639 IY 35.886 IZ 35.886");
            //list.Add("2 12 PRIS AX 7.099 IX 6.062 IY 35.886 IZ 35.886");
            //list.Add("3 11 PRIS AX 6.008 IX 5.034 IY 34.516 IZ 34.516");
            //list.Add("4 10 PRIS AX 5.6081 IX 4.886 IY 32.772 IZ 32.772");
            //list.Add("5 9  PRIS AX 4.966 IX 4.676 IY 29.546 IZ 29.546");
            //list.Add("6 8  PRIS AX 4.966 IX 4.676 IY 29.546 IZ 29.546");
            //list.Add("7 PRIS AX 4.966 IX 4.676 IY 29.546 IZ 29.546");

            //Chiranjit [2012 11 01]
            //Support
            //list.Add(string.Format("1 13 PRIS AX 6.1997 IX 3.1639 IY 35.886 IZ 35.886"));
            list.Add(string.Format("1 2 11 12 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}",
                psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));
            //list.Add(string.Format("2 12 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}",
            //    psc_section.Area.F1, psc_section.Ixx.F1, psc_section.Iyy.F1, psc_section.Izz.F1));
            ////D eff
            //list.Add(string.Format("3 11 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}",
            //    psc_section.Area.F2, psc_section.Ixx.F2, psc_section.Iyy.F2, psc_section.Izz.F2));
            ////L/8
            //list.Add(string.Format("4 10 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}",
            //    psc_section.Area.F3, psc_section.Ixx.F3, psc_section.Iyy.F3, psc_section.Izz.F3));
            ////L/4
            //list.Add(string.Format("5 9  PRISAX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}",
            //    psc_section.Area.F4, psc_section.Ixx.F4, psc_section.Iyy.F4, psc_section.Izz.F4));
            ////3L/8
            //list.Add(string.Format("6 8  PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}",
            //    psc_section.Area.F5, psc_section.Ixx.F5, psc_section.Iyy.F5, psc_section.Izz.F5));
            //L/2
            list.Add(string.Format("3 TO 10 PRIS AX {0:f4} IX {1:f4} IY {2:f4} IZ {3:f4}",
                psc_section.Area.F6, psc_section.Ixx.F6, psc_section.Iyy.F6, psc_section.Izz.F6));
            list.Add("MATERIAL CONSTANT");
            list.Add("E 2.85E6 ALL");
            list.Add("DENSITY CONCRETE ALL");
            list.Add("POISSON CONCRETE ALL");
            list.Add("SUPPORTS");
            //list.Add("2 PINNED");
            //list.Add("12 FIXED BUT FX MZ");



            list.Add(string.Format("{0} {1}", "2", Start_Support));
            list.Add(string.Format("{0} {1}", "12", End_Support));




            //list.Add("MEMBER LOAD ");
            list.Add("LOAD 1 DEAD LOAD");
            list.Add("****SELF WEIGHT-25.0 T/M*****");
            list.Add("1 TO 13 UNI GY -25.0 ");
            list.Add("****SUPERIMPOSED DEAD LOAD -8.2 T/M*****");
            list.Add("LOAD 2 SIDL");
            //list.Add("MEMBER LOAD");
            list.Add("1 TO 13 UNI GY -8.2");
            list.Add("******FootPath Liveload 490 kg/m^2 Per Footpath*****");
            list.Add("LOAD 3 FPLL");
            //list.Add("MEMBER LOAD");
            list.Add("1 TO 13 UNI GY -0.98");
            list.Add("PRINT SUPPORT REACTIONS");
            list.Add("PERFORM ANALYSIS");
            list.Add("FINISH");



            list.Add(kStr);

            File.WriteAllLines(file_name, list.ToArray());
            iApp.Write_LiveLoad_LL_TXT(working_folder, true, iApp.DesignStandard);

            //}


            list.Add(kStr);
            File.WriteAllLines(file_name, list.ToArray());
            //iApp.Write_LiveLoad_LL_TXT(working_folder, true);

        }

        public void LoadReadFromGrid(DataGridView dgv_live_load)
        {
            LoadData ld = new LoadData();
            int i = 0;
            LoadList = new List<LoadData>();
            //LoadList.Clear();
            MyList mlist = null;
            for (i = 0; i < dgv_live_load.RowCount; i++)
            {
                try
                {
                    ld = new LoadData();
                    mlist = new MyList(MyList.RemoveAllSpaces(dgv_live_load[0, i].Value.ToString().ToUpper()), ':');
                    ld.TypeNo = mlist.StringList[0];
                    ld.Code = mlist.StringList[1];

                    ld.X = MyList.StringToDouble(dgv_live_load[1, i].Value.ToString(), -60.0);
                    ld.Y = MyList.StringToDouble(dgv_live_load[2, i].Value.ToString(), 0.0);
                    ld.Z = MyList.StringToDouble(dgv_live_load[3, i].Value.ToString(), 0.0);

                    for (int j = 0; j < Live_Load_List.Count; j++)
                    {
                        if (Live_Load_List[j].TypeNo == ld.TypeNo)
                        {
                            ld.LoadWidth = Live_Load_List[j].LoadWidth;
                            break;
                        }
                    }
                    if ((ld.Z + ld.LoadWidth) > WidthBridge)
                    {
                        throw new Exception("Width of Bridge Deck is insufficient to accommodate \ngiven numbers of Lanes of Vehicle Load. \n\nBridge Width = " + WidthBridge + " <  Load Width (" + ld.Z + " + " + ld.LoadWidth + ") = " + (ld.Z + ld.LoadWidth));
                    }
                    else
                    {
                        ld.XINC = MyList.StringToDouble(dgv_live_load[4, i].Value.ToString(), 0.5);
                        ld.ImpactFactor = MyList.StringToDouble(dgv_live_load[5, i].Value.ToString(), 0.5);
                        LoadList.Add(ld);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        List<string> Get_Joints_Load(double load)
        {
            MemberCollection mc = new MemberCollection(Bridge_Analysis.Analysis.Members);

            MemberCollection sort_membs = new MemberCollection();

            double z_min = double.MaxValue;
            double x = double.MaxValue;
            int indx = -1;

            int i = 0;
            int j = 0;

            List<double> list_z = new List<double>();
            List<string> list_arr = new List<string>();

            List<MemberCollection> list_mc = new List<MemberCollection>();

            double last_z = 0.0;

            while (mc.Count != 0)
            {
                indx = -1;
                for (i = 0; i < mc.Count; i++)
                {
                    if (z_min > mc[i].StartNode.Z)
                    {
                        z_min = mc[i].StartNode.Z;
                        indx = i;
                    }
                }
                if (indx != -1)
                {

                    if (!list_z.Contains(z_min))
                        list_z.Add(z_min);

                    sort_membs.Add(mc[indx]);
                    mc.Members.RemoveAt(indx);
                    z_min = double.MaxValue;
                }
            }

            last_z = -1.0;

            //Inner & Outer Long Girder
            MemberCollection outer_long = new MemberCollection();
            MemberCollection inner_long = new MemberCollection();
            MemberCollection inner_cross = new MemberCollection();


            z_min = Bridge_Analysis.Analysis.Joints.MinZ;
            double z_max = Bridge_Analysis.Analysis.Joints.MaxZ;


            //Store inner and outer Long Girder
            for (i = 0; i < sort_membs.Count; i++)
            {
                if (((sort_membs[i].StartNode.Z == z_min) || (sort_membs[i].StartNode.Z == z_max)) &&
                    sort_membs[i].StartNode.Z == sort_membs[i].EndNode.Z)
                {
                    outer_long.Add(sort_membs[i]);
                }
                else if (((sort_membs[i].StartNode.Z != z_min) && (sort_membs[i].StartNode.Z != z_max)) &&
                    sort_membs[i].StartNode.Z == sort_membs[i].EndNode.Z)
                {
                    inner_long.Add(sort_membs[i]);
                }
            }

            List<int> Outer_Joints = new List<int>();
            List<int> Inner_Joints = new List<int>();

            for (i = 0; i < outer_long.Count; i++)
            {
                if (Outer_Joints.Contains(outer_long[i].EndNode.NodeNo) == false)
                    Outer_Joints.Add(outer_long[i].EndNode.NodeNo);
                if (Outer_Joints.Contains(outer_long[i].StartNode.NodeNo) == false)
                    Outer_Joints.Add(outer_long[i].StartNode.NodeNo);
            }

            for (i = 0; i < inner_long.Count; i++)
            {
                if (Inner_Joints.Contains(inner_long[i].EndNode.NodeNo) == false)
                    Inner_Joints.Add(inner_long[i].EndNode.NodeNo);
                if (Inner_Joints.Contains(inner_long[i].StartNode.NodeNo) == false)
                    Inner_Joints.Add(inner_long[i].StartNode.NodeNo);
            }
            Outer_Joints.Sort();
            Inner_Joints.Sort();


            string inner_long_text = "";
            string outer_long_text = "";
            int last_val = 0;
            int to_val = 0;
            int from_val = 0;

            last_val = Outer_Joints[0];
            from_val = last_val;
            bool flag_1 = false;
            for (i = 0; i < Outer_Joints.Count; i++)
            {
                if (i < Outer_Joints.Count - 1)
                {
                    if ((Outer_Joints[i] + 1) == (Outer_Joints[i + 1]))
                    {
                        if (flag_1 == false)
                        {
                            from_val = Outer_Joints[i];
                        }
                        flag_1 = true;
                        to_val = Outer_Joints[i + 1];
                    }
                    else
                    {
                        if (flag_1)
                        {
                            outer_long_text = from_val + " TO " + to_val + " ";
                            flag_1 = false;
                        }
                        else
                        {
                            outer_long_text = outer_long_text + " " + last_val;
                        }
                    }
                    last_val = Outer_Joints[i];
                }
                else
                {
                    if (flag_1)
                    {
                        outer_long_text += from_val + " TO " + to_val + " ";
                        flag_1 = false;
                    }
                    else
                    {
                        outer_long_text = outer_long_text + " " + last_val;
                    }
                }
            }

            for (i = 0; i < Inner_Joints.Count; i++)
            {
                if (i < Inner_Joints.Count - 1)
                {
                    if ((Inner_Joints[i] + 1) == (Inner_Joints[i + 1]))
                    {
                        if (flag_1 == false)
                        {
                            from_val = Inner_Joints[i];
                        }
                        flag_1 = true;
                        to_val = Inner_Joints[i + 1];
                    }
                    else
                    {
                        if (flag_1)
                        {
                            inner_long_text = from_val + " TO " + to_val + " ";
                            flag_1 = false;
                        }
                        else
                        {
                            inner_long_text = inner_long_text + " " + last_val;
                        }
                    }
                    last_val = Inner_Joints[i];
                }
                else
                {
                    if (flag_1)
                    {
                        inner_long_text += from_val + " TO " + to_val + " ";
                        flag_1 = false;
                    }
                    else
                    {
                        inner_long_text = inner_long_text + " " + last_val;
                    }
                }
            }
            list_arr.Add(inner_long_text + " FY  -" + load.ToString("0.000"));
            list_arr.Add(outer_long_text + " FY  -" + (load / 2.0).ToString("0.000"));

            return list_arr;
        }

        internal string GetAnalysis_Input_File(int p)
        {
            return "";
        }
    }
    public class PSC_Box_Segmental_Girder
    {
        IApplication iApp;
        public string rep_file_name = "";
        public string file_path = "";
        public string system_path = "";
        public string user_input_file = "";
        public string user_path = "";
        public string drawing_path = "";
        public bool is_process = false;


        #region Variable Declaration
        //
        //
        /// Chiranjit [2012 10 26]
        public double Area_Zone1_Outer { get; set; }
        public double Area_Zone2_Outer { get; set; }
        public double Area_Zone3_Outer { get; set; }
        public double Area_Zone1_Inner { get; set; }
        public double Area_Zone2_Inner { get; set; }
        public double Area_Zone3_Inner { get; set; }

        /// <summary>
        /// Chiranjit [2012 10 17]
        /// Residual Shrinkage at 56 Days
        /// </summary>
        public double rss_56 { get; set; }
        /// <summary>
        /// Chiranjit [2012 10 17]
        /// Residual Shrinkage at 14 Days
        /// </summary>
        public double rss_14 { get; set; }
        public double Resh56 { get; set; }
        public double Crst56 { get; set; }

        //Chiranjit [2012 10 18]
        public double fc_temp14 { get; set; }
        public double ft_temp14 { get; set; }
        public double fc_temp28 { get; set; }
        public double ft_temp28 { get; set; }
        public double ttv { get; set; }
        public double fc_serv { get; set; }
        public double Modrup { get; set; }
        public double fc_fact { get; set; }
        public double tv { get; set; }
        public double ttu { get; set; }


        public double Lo { get; set; }
        public double L1 { get; set; }
        public double L2 { get; set; }
        public double exg { get; set; }
        //public double L { get; set; }
        public double Dw { get; set; }
        public double D { get; set; }
        public double Fcu { get; set; }
        public double Tab1_Fy { get; set; }
        public double act { get; set; }
        public double mct { get; set; }
        public double sct { get; set; }
        public double acsidl { get; set; }
        public double mtcsidl { get; set; }
        public double T_loss { get; set; }
        public double wct { get; set; }
        public double ds { get; set; }
        public double df { get; set; }
        public double bt { get; set; }

        public double FactDL { get; set; }
        public double FactSIDL { get; set; }
        public double FactLL { get; set; }

        public double alpha { get; set; }


        public double Tr1 { get; set; }
        public double Tr2 { get; set; }
        public double Tr3 { get; set; }


        public double Tf1 { get; set; }
        public double Tf2 { get; set; }
        public double Tf3 { get; set; }
        public double Tf4 { get; set; }



        public double ccbg_day { get; set; }
        public double ccbg_fcj { get; set; }

        public double fsp_day { get; set; }
        public double fsp_fcj { get; set; }

        public double cwccb_day { get; set; }
        public double cwccb_fcj { get; set; }




        public double ND { get; set; }
        public double NA { get; set; }
        public double Pu { get; set; }
        public double Tab2_Fy { get; set; }
        public double Fu { get; set; }
        public double Pn { get; set; }
        public double Eps { get; set; }
        public double Pj { get; set; }
        public double s { get; set; }
        //public double µ { get; set; }
        public double mu { get; set; }
        public double k { get; set; }
        public double Re1 { get; set; }
        public double Re2 { get; set; }
        public double td1 { get; set; }
        public double qd { get; set; }
        //public double Fcu  {get; set;} 
        //public double Ec { get; set; }
        public double cover1 { get; set; }
        public double cover2 { get; set; }
        public double Ns { get; set; }

        /// <summary>
        /// Number of Cables at Right Side
        /// </summary>
        public int Nc_Right { get; set; }
        /// <summary>
        /// Cross Section Area of Cables
        /// </summary>
        public int Cable_Area { get; set; }

        /// <summary>
        /// Number of Cables at Left Side
        /// </summary>
        public int Nc_Left { get; set; }




        public double Ec { get { return (5000.0 * Math.Sqrt(Fcu)); } }
        public double L { get { return (Lo - 2 * L1); } }



        //double Ec = 5000 x rt(40) = 31622.8 N/.mm (Mpa)
        //double L = Lo – 2 x L1 = 47.750m.



        //PSC_Force_Data


        public PSC_Force_Data Section_Theta { get; set; }

        public PSC_Force_Data Section_D { get; set; }
        public PSC_Force_Data Section_Dw { get; set; }
        public PSC_Force_Data Section_Td { get; set; }
        public PSC_Force_Data Section_C1 { get; set; }
        public PSC_Force_Data Section_C2 { get; set; }
        public PSC_Force_Data Section_Tip { get; set; }
        public PSC_Force_Data Section_Tp { get { return Section_Tip; } set { Section_Tip = value; } }
        public PSC_Force_Data Section_Tf { get; set; }
        public PSC_Force_Data Section_lw { get; set; }
        public PSC_Force_Data Section_D1 { get; set; }
        public PSC_Force_Data Section_Tw { get; set; }
        public PSC_Force_Data Section_SW { get; set; }
        public PSC_Force_Data Section_Ts { get; set; }
        public PSC_Force_Data Section_D2 { get; set; }
        public PSC_Force_Data Section_K1 { get; set; }
        public PSC_Force_Data Section_K2 { get; set; }
        public PSC_Force_Data Section_HW1 { get; set; }
        public PSC_Force_Data Section_HH1 { get; set; }
        public PSC_Force_Data Section_CH1 { get; set; }
        public PSC_Force_Data Section_HW2 { get; set; }
        public PSC_Force_Data Section_HH2 { get; set; }
        public PSC_Force_Data Section_HW3 { get; set; }
        public PSC_Force_Data Section_HH3 { get; set; }
        #endregion Variable Declaration


        public double L_support { get; set; }
        public double L_Deff { get; set; }
        public double L_8
        {
            get
            {
                return (L / 8.0);
            }
        }
        public double L_4
        {
            get
            {
                return (L / 4.0);
            }
        }
        public double L3_8
        {
            get
            {
                return (L * 3.0) / 8.0;
            }
        }

        public double L_2
        {
            get
            {
                return L / 2.0;
            }
        }

        //Chiranjit [2013 06 19]
        public string Cable_Type { get; set; }
        #region


        public PSC_Force_Data A = new PSC_Force_Data(6);
        public PSC_Force_Data Yt = new PSC_Force_Data(6);
        public PSC_Force_Data Yb = new PSC_Force_Data(6);
        public PSC_Force_Data Zt = new PSC_Force_Data(6);
        public PSC_Force_Data Zb = new PSC_Force_Data(6);
        public PSC_Force_Data A_Yt = new PSC_Force_Data(6);
        public PSC_Force_Data A_YT_Yt = new PSC_Force_Data(6);
        public PSC_Force_Data Iself = new PSC_Force_Data(6);
        public PSC_Force_Data Iself_A_Yt_Yt = new PSC_Force_Data(6);
        public PSC_Force_Data Iyy = new PSC_Force_Data(6);
        public PSC_Force_Data Ixx = new PSC_Force_Data(6);



        #endregion


        public PSC_Box_Segmental_Girder(IApplication iApp)
        {
            this.iApp = iApp;



            #region Variable Declaration
            Lo = 48.750;
            L1 = 0.500;
            L2 = 0.500;
            exg = 0.040;
            // L = Lo – 2 x L1 = 47.750m.
            //L = 47.750;
            Dw = 9.750;
            D = 2.500;
            Fcu = 40;
            act = 14;
            mct = 87;
            sct = 34.8;
            acsidl = 56;
            mtcsidl = 100;
            T_loss = 20;
            wct = 0.065;
            ds = 0.225;
            df = 0.175;
            bt = 1.000;

            FactDL = 1.250;
            FactSIDL = 2.000;
            FactLL = 2.500;

            alpha = 0.0000117;


            Tr1 = 17.8;
            Tr2 = 4.0;
            Tr3 = 2.1;


            Tf1 = 10.6;
            Tf2 = 0.7;
            Tf3 = 0.8;
            Tf4 = 6.6;


            //Prestressing Input Data:   [Tab 2]

            //A)                 Construction Schedule and Prestressing Stages

            //    Job                                                                                                 Day after casting                 fcj   N/sq.mm (Mpa)
            //(i)                Completion of casting of Box Girder                                0                day
            //(ii)                First Stage Prestress                                                                14                day                                fcj14 = 34.80
            //(iii)                Completion of Wearing Course & Crash Barrier                56                day                                fcj56 = 40.00

            //B)                Cable and Prestressing Data

            //D                = 15.200 mm.                                   
            //A = 140.000 Sq.mm.
            //Pu = 1.100 Kg/m
            //Fy = 1670.000 N/Sq.mm. (Mpa)
            //Fu = 1860.000 N/Sq.mm. (Mpa)
            //Pn = 260.700 kN
            //Eps = 195 Gpa
            //Pj = 76.5 %
            //s = 6 mm.
            //µ = 0.17 per radian
            //k = 0.002 per metre
            //Re1 = 35.0 N/Sq.mm (Mpa)
            //Re2 = 0.0 N/Sq.mm (Mpa)
            //td1 = 14 days                     (Taken From Tab 1)
            //qd = 110 mm.
            //Fcu = 40 N/Sq.mm (Mpa)                                                  (Taken  From Tab 1)
            //Ec = 5000 x Sqrt(40) = 31622.8 N/Sq.mm (Mpa)


            ND = 15.200;
            NA = 140.000;
            Pu = 1.100;
            Tab2_Fy = 1670.000;
            Fu = 1860.000;
            Pn = 260.700;
            Eps = 195;
            Pj = 76.5;
            s = 6;
            mu = 0.17;
            k = 0.002;
            Re1 = 35.0;
            Re2 = 0.0;
            td1 = 14;
            qd = 110;
            // Fcu = 40;
            //Ec = 31622.8;
            //double Ec = 5000 x rt(40) = 31622.8 N/.mm (Mpa)
            #endregion Variable Declaration


            Section_Theta = new PSC_Force_Data();
            Section_D = new PSC_Force_Data();
            Section_Dw = new PSC_Force_Data();
            Section_Td = new PSC_Force_Data();
            Section_C1 = new PSC_Force_Data();
            Section_C2 = new PSC_Force_Data();
            Section_Tip = new PSC_Force_Data();
            Section_Tf = new PSC_Force_Data();
            Section_lw = new PSC_Force_Data();
            Section_D1 = new PSC_Force_Data();
            Section_Tw = new PSC_Force_Data();
            Section_SW = new PSC_Force_Data();
            Section_Ts = new PSC_Force_Data();
            Section_D2 = new PSC_Force_Data();
            Section_K1 = new PSC_Force_Data();
            Section_K2 = new PSC_Force_Data();
            Section_HW1 = new PSC_Force_Data();
            Section_HH1 = new PSC_Force_Data();
            Section_CH1 = new PSC_Force_Data();
            Section_HW2 = new PSC_Force_Data();
            Section_HH2 = new PSC_Force_Data();
            Section_HW3 = new PSC_Force_Data();
            Section_HH3 = new PSC_Force_Data();
        }
        public List<string> Get_Step_1(ref PSC_Box_Section_Data psc_setion)
        {
            #region STEP 1 :  Section Properties of various parts in the Cross Section at relevant Sections
            List<string> list = new List<string>();

            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Cross Section Dimension Input Data :   [Tab 3]"));
            //list.Add(string.Format("----------------------------------------------"));


            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("STEP 1 :  Section Properties of various parts in the Cross Section at relevant Sections "));
            list.Add(string.Format("----------------------------------------------------------------------------------------"));
            list.Add(string.Format(""));

            list.Add(string.Format("Refer to Cross Section Diagram"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            string format = "{0,-16:f3} {1,8:f3} {2,12:f3} {3,12:f3} {4,12:f3} {5,12:f3} {6,12:f3} {7,12:f3}";
            string format2 = "{0,-16:f3} {1,8:f3} {2,12:f3}°{3,12:f3}°{4,12:f3}°{5,12:f3}°{6,12:f3}°{7,12:f3}°";
            list.Add(string.Format("TABLE 2: User’s  Cross Section Dimension Input Data "));
            list.Add(string.Format("----------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("".PadLeft(108, '-')));
            list.Add(string.Format(format, "", "", "", "D away", "", "", "", ""));
            list.Add(string.Format(format, "SECTION", "", "Support", "from", "L/8", "L/4", "3L/8", "L/2"));
            list.Add(string.Format(format, "", "", "", "support", "", "", "", ""));
            list.Add(string.Format("".PadLeft(108, '-')));
            list.Add(string.Format(format2, "Web inclination", " (θ)deg", Section_Theta[0], Section_Theta[1], Section_Theta[2], Section_Theta[3], Section_Theta[4], Section_Theta[5]));
            list.Add(string.Format("".PadLeft(108, '_')));
            list.Add(string.Format(format, "Total Depth", "D", Section_D[0], Section_D[1], Section_D[2], Section_D[3], Section_D[4], Section_D[5]));
            list.Add(string.Format("".PadLeft(108, '_')));
            list.Add(string.Format(format, "Top Flange", "Dw", Section_Dw[0], Section_Dw[1], Section_Dw[2], Section_Dw[3], Section_Dw[4], Section_Dw[5]));
            list.Add(string.Format(format, "", "Td", Section_Td[0], Section_Td[1], Section_Td[2], Section_Td[3], Section_Td[4], Section_Td[5]));
            list.Add(string.Format("".PadLeft(108, '_')));

            list.Add(string.Format(format, "Cantilever", "C1", Section_C1[0], Section_C1[1], Section_C1[2], Section_C1[3], Section_C1[4], Section_C1[5]));
            list.Add(string.Format(format, "", "C2", Section_C2[0], Section_C2[1], Section_C2[2], Section_C2[3], Section_C2[4], Section_C2[5]));
            list.Add(string.Format(format, "", "Tp", Section_Tip[0], Section_Tip[1], Section_Tip[2], Section_Tip[3], Section_Tip[4], Section_Tip[5]));
            list.Add(string.Format(format, "", "Tt", Section_Tf[0], Section_Tf[1], Section_Tf[2], Section_Tf[3], Section_Tf[4], Section_Tf[5]));
            list.Add(string.Format("".PadLeft(108, '_')));

            list.Add(string.Format(format, "Web", "lw", Section_lw[0], Section_lw[1], Section_lw[2], Section_lw[3], Section_lw[4], Section_lw[5]));
            list.Add(string.Format(format, "", "D1", Section_D1[0], Section_D1[1], Section_D1[2], Section_D1[3], Section_D1[4], Section_D1[5]));
            list.Add(string.Format(format, "", "Tw", Section_Tw[0], Section_Tw[1], Section_Tw[2], Section_Tw[3], Section_Tw[4], Section_Tw[5]));
            list.Add(string.Format("".PadLeft(108, '_')));

            list.Add(string.Format(format, "Soffit Slab", "SW", Section_D[0], Section_D[1], Section_D[2], Section_D[3], Section_D[4], Section_D[5]));
            list.Add(string.Format(format, "", "Ts", Section_Ts[0], Section_Ts[1], Section_Ts[2], Section_Ts[3], Section_Ts[4], Section_Ts[5]));
            list.Add(string.Format(format, "", "D2", Section_D2[0], Section_D2[1], Section_D2[2], Section_D2[3], Section_D2[4], Section_D2[5]));
            list.Add(string.Format(format, "", "K1", Section_K1[0], Section_K1[1], Section_K1[2], Section_K1[3], Section_K1[4], Section_K1[5]));
            list.Add(string.Format(format, "", "K2", Section_K2[0], Section_K2[1], Section_K2[2], Section_K2[3], Section_K2[4], Section_K2[5]));
            list.Add(string.Format("".PadLeft(108, '_')));

            list.Add(string.Format(format, "t. hnch1", "HW1", Section_HW1[0], Section_HW1[1], Section_HW1[2], Section_HW1[3], Section_HW1[4], Section_HW1[5]));
            list.Add(string.Format(format, "", "HH1", Section_HH1[0], Section_HH1[1], Section_HH1[2], Section_HH1[3], Section_HH1[4], Section_HH1[5]));
            list.Add(string.Format(format, "", "CH1", Section_CH1[0], Section_CH1[1], Section_CH1[2], Section_CH1[3], Section_CH1[4], Section_CH1[5]));
            list.Add(string.Format("".PadLeft(108, '_')));

            list.Add(string.Format(format, "t. hnch2", "HW2", Section_HW2[0], Section_HW2[1], Section_HW2[2], Section_HW2[3], Section_HW2[4], Section_HW2[5]));
            list.Add(string.Format(format, "", "HH2", Section_HH2[0], Section_HH2[1], Section_HH2[2], Section_HH2[3], Section_HH2[4], Section_HH2[5]));
            list.Add(string.Format("".PadLeft(108, '_')));

            list.Add(string.Format(format, "bot. hnch", "HW3", Section_HW3[0], Section_HW3[1], Section_HW3[2], Section_HW3[3], Section_HW3[4], Section_HW3[5]));
            list.Add(string.Format(format, "", "HH3", Section_HH3[0], Section_HH3[1], Section_HH3[2], Section_HH3[3], Section_HH3[4], Section_HH3[5]));
            list.Add(string.Format("".PadLeft(108, '_')));

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            PSC_Force_Data theta = new PSC_Force_Data(0);
            PSC_Force_Data D2 = new PSC_Force_Data(0);
            PSC_Force_Data K1 = new PSC_Force_Data(0);
            PSC_Force_Data K2 = new PSC_Force_Data(0);

            list.Add(string.Format("Calculated values: "));
            list.Add(string.Format(""));
            for (int i = 0; i < Section_lw.Count; i++)
            {
                theta.Add(Math.Atan(Section_lw[i] / Section_D1[i]));
                D2.Add(Section_D[i] - Section_Tf[i] - Section_D1[i]);
                K1.Add(D2[i] * Math.Tan(theta[i]));
                K2.Add(Section_Ts[i] * Math.Tan(theta[i]));

                //list.Add(string.Format("Calculated values:    (Cells shaded above are with these calculated values)"));
                list.Add(string.Format("Web Inclination = θ = atan (Iw / D1) = atan ({0} / {1}) = atan({2:f3}) = {3:f3}°(degrees) = {4:f3} radian",
                   Section_lw[i], Section_D1[i], (Section_lw[i] / Section_D1[i]), Section_Theta[i], theta[i]));

                list.Add(string.Format("and  D2 = D - Tf - D1 = {0:f3} - {1:f3} - {2:f3} = {3:f3}", Section_D[i], Section_Tf[i], Section_D1[i], D2[i]));
                list.Add(string.Format("K1 = D2 x tan(θ) = {0:f3} x tan({1:f3}) = {2:f3}", D2[i], Section_Theta[i], K1[0]));
                list.Add(string.Format("K2 = Ts x tan(θ) = {0:f3} x tan({1:f3}) = {2:f3}", Section_Ts[i], Section_Theta[i], K2[0]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            List<PSC_Force_Data> list_A = new List<PSC_Force_Data>();
            List<PSC_Force_Data> list_Yt = new List<PSC_Force_Data>();
            List<PSC_Force_Data> list_A_Yt = new List<PSC_Force_Data>();
            List<PSC_Force_Data> list_A_YT_Yt = new List<PSC_Force_Data>();
            List<PSC_Force_Data> list_Iself = new List<PSC_Force_Data>();
            List<PSC_Force_Data> list_Iself_A_Yt_Yt = new List<PSC_Force_Data>();
            List<PSC_Force_Data> list_Iyy = new List<PSC_Force_Data>();




            PSC_Force_Data A = new PSC_Force_Data(6);
            PSC_Force_Data Yt = new PSC_Force_Data(6);
            PSC_Force_Data Yb = new PSC_Force_Data(6);
            PSC_Force_Data Zt = new PSC_Force_Data(6);
            PSC_Force_Data Zb = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt = new PSC_Force_Data(6);
            PSC_Force_Data Iself = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt = new PSC_Force_Data(6);
            PSC_Force_Data Iyy = new PSC_Force_Data(6);
            PSC_Force_Data Ixx = new PSC_Force_Data(6);



            PSC_Force_Data A1 = new PSC_Force_Data(6);
            PSC_Force_Data Yt1 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt1 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt1 = new PSC_Force_Data(6);
            PSC_Force_Data Iself1 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt1 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy1 = new PSC_Force_Data(6);


            list_A.Add(A1);
            list_Yt.Add(Yt1);
            list_A_Yt.Add(A_Yt1);
            list_A_YT_Yt.Add(A_YT_Yt1);
            list_Iself.Add(Iself1);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt1);
            list_Iyy.Add(Iyy1);



            PSC_Force_Data A2 = new PSC_Force_Data(6);
            PSC_Force_Data Yt2 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt2 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt2 = new PSC_Force_Data(6);
            PSC_Force_Data Iself2 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt2 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy2 = new PSC_Force_Data(6);



            list_A.Add(A2);
            list_Yt.Add(Yt2);
            list_A_Yt.Add(A_Yt2);
            list_A_YT_Yt.Add(A_YT_Yt2);
            list_Iself.Add(Iself2);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt2);
            list_Iyy.Add(Iyy2);





            PSC_Force_Data A3 = new PSC_Force_Data(6);
            PSC_Force_Data Yt3 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt3 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt3 = new PSC_Force_Data(6);
            PSC_Force_Data Iself3 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt3 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy3 = new PSC_Force_Data(6);



            list_A.Add(A3);
            list_Yt.Add(Yt3);
            list_A_Yt.Add(A_Yt3);
            list_A_YT_Yt.Add(A_YT_Yt3);
            list_Iself.Add(Iself3);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt3);
            list_Iyy.Add(Iyy3);



            PSC_Force_Data A4 = new PSC_Force_Data(6);
            PSC_Force_Data Yt4 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt4 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt4 = new PSC_Force_Data(6);
            PSC_Force_Data Iself4 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt4 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy4 = new PSC_Force_Data(6);

            list_A.Add(A4);
            list_Yt.Add(Yt4);
            list_A_Yt.Add(A_Yt4);
            list_A_YT_Yt.Add(A_YT_Yt4);
            list_Iself.Add(Iself4);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt4);
            list_Iyy.Add(Iyy4);



            PSC_Force_Data A5 = new PSC_Force_Data(6);
            PSC_Force_Data Yt5 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt5 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt5 = new PSC_Force_Data(6);
            PSC_Force_Data Iself5 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt5 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy5 = new PSC_Force_Data(6);


            list_A.Add(A5);
            list_Yt.Add(Yt5);
            list_A_Yt.Add(A_Yt5);
            list_A_YT_Yt.Add(A_YT_Yt5);
            list_Iself.Add(Iself5);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt5);
            list_Iyy.Add(Iyy5);


            PSC_Force_Data A6 = new PSC_Force_Data(6);
            PSC_Force_Data Yt6 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt6 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt6 = new PSC_Force_Data(6);
            PSC_Force_Data Iself6 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt6 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy6 = new PSC_Force_Data(6);


            list_A.Add(A6);
            list_Yt.Add(Yt6);
            list_A_Yt.Add(A_Yt6);
            list_A_YT_Yt.Add(A_YT_Yt6);
            list_Iself.Add(Iself6);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt6);
            list_Iyy.Add(Iyy6);


            PSC_Force_Data A7 = new PSC_Force_Data(6);
            PSC_Force_Data Yt7 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt7 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt7 = new PSC_Force_Data(6);
            PSC_Force_Data Iself7 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt7 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy7 = new PSC_Force_Data(6);


            list_A.Add(A7);
            list_Yt.Add(Yt7);
            list_A_Yt.Add(A_Yt7);
            list_A_YT_Yt.Add(A_YT_Yt7);
            list_Iself.Add(Iself7);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt7);
            list_Iyy.Add(Iyy7);


            PSC_Force_Data A8 = new PSC_Force_Data(6);
            PSC_Force_Data Yt8 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt8 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt8 = new PSC_Force_Data(6);
            PSC_Force_Data Iself8 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt8 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy8 = new PSC_Force_Data(6);


            list_A.Add(A8);
            list_Yt.Add(Yt8);
            list_A_Yt.Add(A_Yt8);
            list_A_YT_Yt.Add(A_YT_Yt8);
            list_Iself.Add(Iself8);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt8);
            list_Iyy.Add(Iyy8);


            PSC_Force_Data A9 = new PSC_Force_Data(6);
            PSC_Force_Data Yt9 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt9 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt9 = new PSC_Force_Data(6);
            PSC_Force_Data Iself9 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt9 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy9 = new PSC_Force_Data(6);


            list_A.Add(A9);
            list_Yt.Add(Yt9);
            list_A_Yt.Add(A_Yt9);
            list_A_YT_Yt.Add(A_YT_Yt9);
            list_Iself.Add(Iself9);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt9);
            list_Iyy.Add(Iyy9);


            PSC_Force_Data A10 = new PSC_Force_Data(6);
            PSC_Force_Data Yt10 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt10 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt10 = new PSC_Force_Data(6);
            PSC_Force_Data Iself10 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt10 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy10 = new PSC_Force_Data(6);

            list_A.Add(A10);
            list_Yt.Add(Yt10);
            list_A_Yt.Add(A_Yt10);
            list_A_YT_Yt.Add(A_YT_Yt10);
            list_Iself.Add(Iself10);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt10);
            list_Iyy.Add(Iyy10);


            PSC_Force_Data A11 = new PSC_Force_Data(6);
            PSC_Force_Data Yt11 = new PSC_Force_Data(6);
            PSC_Force_Data A_Yt11 = new PSC_Force_Data(6);
            PSC_Force_Data A_YT_Yt11 = new PSC_Force_Data(6);
            PSC_Force_Data Iself11 = new PSC_Force_Data(6);
            PSC_Force_Data Iself_A_Yt_Yt11 = new PSC_Force_Data(6);
            PSC_Force_Data Iyy11 = new PSC_Force_Data(6);



            list_A.Add(A11);
            list_Yt.Add(Yt11);
            list_A_Yt.Add(A_Yt11);
            list_A_YT_Yt.Add(A_YT_Yt11);
            list_Iself.Add(Iself11);
            list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt11);
            list_Iyy.Add(Iyy11);




            int c = 0;
            string part_text = "";
            do
            {
                if (c == 0) part_text = "SUPPORT";
                else if (c == 1) part_text = "D away from Support";
                else if (c == 2) part_text = "L/8";
                else if (c == 3) part_text = "L/4";
                else if (c == 4) part_text = "3L/8";
                else if (c == 5) part_text = "L/2";

                list.Add(string.Format(""));
                list.Add(string.Format("-----------------------------------------------------------"));
                list.Add(string.Format("DESIGN CALCULATIONS OF CROSS SECTION AT {0}", part_text));
                list.Add(string.Format("-----------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 1, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));

                A1[c] = (Section_Dw[c] - 2 * (Section_C1[c] + Section_C2[c])) * Section_Td[c];
                list.Add(string.Format("Area = A = (Dw - 2 x (C1 + C2)) x Td "));
                list.Add(string.Format("         = ({0:f3} - 2 x ({1:f3} + {2:f3})) x {3:f3}", Section_Dw[c], Section_C1[c], Section_C2[c], Section_Td[c]));
                list.Add(string.Format("         = {0:f3}", A1[c]));
                list.Add(string.Format(""));
                Yt1[c] = Section_Td[c] / 2.0;
                list.Add(string.Format("Yt = Td/2.0 = {0:f3} / 2.0 = {1:f3}", Section_Td[c], Yt1[c]));

                A_Yt1[c] = A1[c] * Yt1[c];
                list.Add(string.Format("A x Yt = 1.3275 x 0.1125 = 0.1493"));

                A_YT_Yt1[c] = A_Yt1[c] * Yt1[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A1[0], Yt1[0], A_YT_Yt1[0]));


                Iself1[c] = A1[c] * Section_Td[c] * Section_Td[c] / 12.0;
                list.Add(string.Format("Iself (xx) = Moment of Inertia = A x Td^2 / 12 = {0:f4} x {1:f4}^2 / 12 = {2:f3}", A1[c], Section_Td[c], Iself1[0]));

                Iself_A_Yt_Yt1[c] = Iself1[c] * A_YT_Yt1[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself1[c], A_YT_Yt1[c], Iself_A_Yt_Yt1[c]));

                Iyy1[c] = (Math.Pow((Section_Dw[c] - 2 * (Section_C1[c] + Section_C2[c])), 3)) * Section_Td[c] / 12;

                list.Add(string.Format("I(yy) = ((Dw - 2 x (C1+C2))^3) x Td / 12 "));
                list.Add(string.Format("      = (({0:f4} - 2 x ({1:f4}+{2:f4}))^3) x {3:f4} / 12", Section_Dw[c], Section_C1[c], Section_C2[c], Section_Td[c]));
                list.Add(string.Format("      = {0:f4}", Iyy1[c]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 2, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));

                A2[c] = (Section_C1[c] + Section_C2[c]) * Section_Tip[c] * 2.0;
                list.Add(string.Format("Area = A = (C1 + C2) x Ttip x 2"));
                list.Add(string.Format("         = ({0:f4} + {1:f4}) x {2:f4} x 2", Section_C1[c], Section_C2[c], Section_Tip[c]));
                list.Add(string.Format("         = {0:f4}", A2[c]));
                list.Add(string.Format(""));


                Yt2[c] = Section_Tip[c] / 2.0;
                list.Add(string.Format("Yt = Ttip/2.0 = {0:f3} / 2.0 = {1:f4}", Section_Tip[c], Yt2[c]));
                list.Add(string.Format(""));

                A_Yt2[c] = A2[c] * Yt2[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A2[c], Yt2[c], A_Yt2[c]));
                list.Add(string.Format(""));
                A_YT_Yt2[c] = A2[c] * Yt2[c] * Yt2[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A2[c], Yt2[c], A_YT_Yt2[c]));
                list.Add(string.Format(""));

                Iself2[c] = A2[c] * Section_Tip[c] * Section_Tip[c] / 12.0;
                list.Add(string.Format("Iself (xx) = Moment of Inertia = A x Ttip^2 / 12 = {0:f4} x {1:f4}^2 / 12 = {2:f4}", A2[c], Section_Tip[c], Iself2[c]));

                list.Add(string.Format(""));
                Iself_A_Yt_Yt2[c] = Iself2[c] + A_YT_Yt2[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself2[c], A_YT_Yt2[c], Iself_A_Yt_Yt2[c]));
                list.Add(string.Format(""));


                Iyy2[c] = (A2[c] * Math.Pow((Section_C1[c] + Section_C2[c]), 2)) / 12.0 +
                            A2[c] * Math.Pow((Section_Dw[c] / 2.0 - ((Section_C1[c] + Section_C2[c]) / 2)), 2.0);

                list.Add(string.Format("I(yy) = (A x (C1+C2)^2)/12  + (A x (Dw/2 - (C1+C2)/2)^2"));
                list.Add(string.Format("      = ({0:f4}x({1:f3}+{2:f3})^2) /12 + ({0:f4} x ({3:f3}/2 - ({1:f3}+{2:f3})/2)^2  ",
                    A2[c], Section_C1[c], Section_C2[c], Section_Dw[c]));
                //list.Add(string.Format("      = 0.2378 + 11.787"));
                list.Add(string.Format("      = {0:f4}", Iyy2[c]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 3, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));

                A3[c] = (Section_C1[c] * (Section_Tf[c] - Section_Tip[c]));
                list.Add(string.Format("Area = A = C1 x (Tf - Ttip)"));
                list.Add(string.Format("         = {0:f3} x ({1:f3} - {2:f3})", Section_C1[c], Section_Tf[c], Section_Tip[c]));
                list.Add(string.Format("         = {0:f4}", A3[c]));
                list.Add(string.Format(""));

                Yt3[c] = (Section_Tf[c] - Section_Tip[c]) / 3.0 + Section_Tip[c];
                list.Add(string.Format("Yt = (Tf - Ttip)/3.0 + Ttip = ({0:f3} -{1:f3})/3.0 + {1:f3} = {2:f3}", Section_Tf[c], Section_Tip[c], Yt3[c]));
                list.Add(string.Format(""));
                A_Yt3[c] = A3[c] * Yt3[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A3[c], Yt3[c], A_Yt3[c]));
                list.Add(string.Format(""));

                A_YT_Yt3[c] = A_Yt3[c] * Yt3[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A3[c], Yt3[c], A_YT_Yt3[c]));
                list.Add(string.Format(""));

                Iself3[c] = (Section_C1[c] * Math.Pow((Section_Tf[c] - Section_Tip[c]), 3.0)) / 18.0;
                list.Add(string.Format("Iself (xx) = Moment of Inertia  = (C1 x (Tf - Ttip)^3) / 18 "));
                list.Add(string.Format("                                = ({0:f3} x ({1:f3} - {2:f3})^3)/18", Section_C1[c], Section_Tf[c], Section_Tip[c]));
                list.Add(string.Format("                                = {0:f5}", Iself3[c]));
                list.Add(string.Format(""));
                Iself_A_Yt_Yt3[c] = Iself3[c] + A_YT_Yt3[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself3[c], A_YT_Yt3[c], Iself_A_Yt_Yt3[c]));
                list.Add(string.Format(""));

                Iyy3[c] = (((Section_Tf[c] - Section_Tip[c]) * Math.Pow(Section_C1[c], 3)) / 18.0) +
                         (Math.Pow(((Section_Dw[c] / 2.0) - Section_C2[c] - (Section_C1[c] / 3) * 2), 2)) * A3[c];


                list.Add(string.Format("I(yy) = ((Tf - Ttip) x C1^3)/18 + (((Dw/2)-C2-(C1/3) x 2)^2) x A"));
                list.Add(string.Format("      = (({0:f3} - {1:f3}) x {2:f3}^3)/18 + (({3:f3} /2) - {4:f3} - ({2:f3}/3) x 2)^2) x {5:f3}",
                   Section_Tf[c], Section_Tip[c], Section_C1[c], Section_Dw[c], Section_C2[c], A3[c]));
                //list.Add(string.Format("      = 0.0396 + 2.4833"));
                list.Add(string.Format("      = {0:f4}", Iyy3[c]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 4, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));
                A4[c] = (Section_Tf[c] - Section_Tip[c]) * (Section_Tw[c] / Math.Cos(theta[c]) * 2);
                list.Add(string.Format("Area = A = (Tf - Ttip) x Tw / COS(θ) x 2"));
                list.Add(string.Format("         = ({0:f3} - {1:f3}) x {2:f3}/COS({3:f3}) x 2", Section_Tf[c], Section_Tip[c], Section_Tw[c], theta[c]));
                list.Add(string.Format("         = {0:f4}", A4[c]));
                list.Add(string.Format(""));

                Yt4[c] = (Section_Tf[c] - Section_Tip[c]) / 2.0 + Section_Tip[c];
                list.Add(string.Format("Yt = (Tf - Ttip)/2.0 + Ttip = ({0:f3} - {1:f3})/2.0 + {1:f3} = {2:f4}", Section_Tf[c], Section_Tip[c], Yt4[c]));
                list.Add(string.Format(""));

                A_Yt4[c] = A4[c] * Yt4[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A4[c], Yt4[c], A_Yt4[c]));
                list.Add(string.Format(""));
                A_YT_Yt4[c] = A_Yt4[c] * Yt4[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A4[c], Yt4[c], A_YT_Yt4[c]));
                list.Add(string.Format(""));

                Iself4[c] = (A4[c] * Math.Pow((Section_Tf[c] - Section_Tip[c]), 2.0)) / 12.0;
                list.Add(string.Format("Iself (xx) = Moment of Inertia  = (A x (Tf - Ttip)^2) / 12 "));
                list.Add(string.Format("                                = ({0:f4} x ({1:f4} - {2:f3})^2)/12",
                        A4[c], Section_Tf[c], Section_Tip[c]));
                list.Add(string.Format("                                = {0:f6}", Iself4[c]));
                list.Add(string.Format(""));
                Iself_A_Yt_Yt4[c] = Iself4[c] + A_YT_Yt4[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself4[c], A_YT_Yt4[c], Iself_A_Yt_Yt4[c]));
                list.Add(string.Format(""));

                Iyy4[c] = (A4[c] * Math.Pow((A4[c] / 2 / (Section_Tf[c] - Section_Tip[c])), 2) / 12.0) +

                    Math.Pow((Section_Dw[c] / 2 - (Section_C1[c] + Section_C2[c]) - Section_Tw[c] / Math.Cos(theta[c]) / 2), 2) * A4[c];

                list.Add(string.Format("I(yy)  = (A x (A/2/( Tf - Ttip))^2/12 + (Dw/2 - (C1+C2) - Tw/COS(θ)/2)^2 x A"));
                list.Add(string.Format("       = ({0:f3}x({0:f3}/2/({1:f3}-{2:f3}))^2/12 + ({3:f3}/2-({4:f3}+{5:f3})-{6:f3}/COS({7:f3})/2)^2 x {0:f3}",
                    A4[c], Section_Tf[c], Section_Tip[c], Section_Dw[c], Section_C1[c], Section_C2[c], Section_Tw[c], theta[c]));
                //list.Add(string.Format("       = 0.0042 + 0.8743"));
                list.Add(string.Format("       = {0:f4}", Iyy4[c]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 5, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));

                A5[c] = (Section_HW1[c] + 2 * Section_HW2[c]) * Section_HH1[c];

                list.Add(string.Format("Area = A  = (HW1 + 2 x HW2) x HH1"));
                list.Add(string.Format("          = ({0:f4} + 2 x {1:f4}) x {2:f4}", Section_HW1[c], Section_HW2[c], Section_HH1[c]));
                list.Add(string.Format("          = {0:f4}", A5[c]));
                list.Add(string.Format(""));

                Yt5[c] = Section_HH1[c] / 3 + Section_Td[c];
                list.Add(string.Format("Yt = HH1/3 + Td = {0:f4}/3 + {1:f4} = {2:f4}", Section_HH1[c], Section_Td[c], Yt5[c]));
                list.Add(string.Format(""));
                A_Yt5[c] = A5[c] * Yt5[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A5[c], Yt5[c], A_Yt5[c]));
                list.Add(string.Format(""));
                A_YT_Yt5[c] = A5[c] * Yt5[c] * Yt5[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A5[c], Yt5[c], A_YT_Yt5[c]));
                list.Add(string.Format(""));
                Iself5[c] = (A5[c] * Math.Pow((Section_HH1[c]), 2)) / 18.0;
                list.Add(string.Format("Iself (xx) = Moment of Inertia = (A x (HH1)^2) / 18 = ({0:f4} x ({1:f4})^2) / 18 = {2:E3}", A5[c], Section_HH1[c], Iself5[c]));
                list.Add(string.Format(""));

                Iself_A_Yt_Yt5[c] = Iself5[c] + A_YT_Yt5[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:E3} + {1:f4} = {2:E3}", Iself5[c], A_YT_Yt5[c], Iself_A_Yt_Yt5[c]));
                list.Add(string.Format(""));

                Iyy5[c] = (Section_HH1[c] * Math.Pow((Section_HW1[c] + Section_HW2[c]), 3)) / 18.0 +
                        (A5[c] * Math.Pow((Section_CH1[c] + (Section_HW1[c] + Section_HW2[c]) / 3 * 2), 2));

                list.Add(string.Format("I(yy)   = (HH1 x (HW1+HW2)^3)/18 + (A x (CH1 + (HW1 + HW2)/3 x 2)^2)"));
                list.Add(string.Format("        = ({0:f4} x ({1:f4} + {2:f4})^3)/18 + ({3:f4} x ({4:f4} + ({1:f4} + {2:f4})/3 x 2)^2)",
                                                Section_HH1[c], Section_HW1[c], Section_HW2[c], A5[c], Section_CH1[c]));
                //list.Add(string.Format("        = 0.00031548 + 0.1527"));
                list.Add(string.Format("        = {0:f4}", Iyy5[c]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 6, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));

                A6[c] = Section_HH2[c] * Section_HW2[c];
                list.Add(string.Format("Area = A = HH2 x HW2  = {0:f4} x {1:f4} = {2:f4}", Section_HH2[c], Section_HW2[c], A6[c]));
                list.Add(string.Format(""));

                Yt6[c] = (Section_HH2[c] / 3.0) + Section_HH1[c] + Section_Td[c];

                list.Add(string.Format("Yt = HH2/3 x HH1 + Td = {0:f4}/3 + {1:f4} + {2:f4} = {3:f4}", Section_HH2[c], Section_HH1[c], Section_Td[c], Yt6[c]));

                A_Yt6[c] = A6[c] * Yt6[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A6[c], Yt6[c], A_Yt6[c]));

                A_YT_Yt6[c] = A6[c] * Yt6[c] * Yt6[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A6[c], Yt6[c], A_YT_Yt6[c]));

                Iself6[c] = (A6[c] * Math.Pow((Section_HH2[c]), 2)) / 18.0;
                list.Add(string.Format("Iself (xx) = Moment of Inertia = (A x (HH2)^2) / 18 = ({0:f4} x ({1:f4})^2) / 18 = {2:f4}", A6[c], Section_HH2[c], Iself6[c]));

                list.Add(string.Format(""));

                Iself_A_Yt_Yt6[c] = Iself6[c] + A_YT_Yt6[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself6[c], A_YT_Yt6[c], Iself_A_Yt_Yt6[c]));

                Iyy6[c] = ((Section_HH2[c] * Math.Pow(Section_HW2[c], 3)) / 18.00) +
                                 (A6[c] * Math.Pow((Section_CH1[c] + Section_HW1[c] + Section_HW2[c] / 3 * 2), 2));

                list.Add(string.Format("I(yy)   = (HH2 x HW2^3)/18 + (A x (CH1 + HW1 + HW2/3 x 2)^2)"));
                list.Add(string.Format("        = ({0:f4} x {1:f4}^3)/18 + ({2:f4} x ({3:f4} + {4:f4} + {1:f4}/3 x 2)^2)",
                                                Section_HH2[c], Section_HW2[c], A6[c], Section_CH1[c], Section_HW1[c]));
                //list.Add(string.Format("        = 0.0 + 0.0"));
                list.Add(string.Format("        = {0:f4}", Iyy6[c]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 7, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));

                A7[c] = 2 * (Section_D1[c] + Section_D2[c] - Section_Ts[c]) * Section_Tw[c] / Math.Cos(theta[c]);

                list.Add(string.Format("Area = A = 2 x (D1+D2-Ts) x Tw/ COS(θ)"));
                list.Add(string.Format("         = 2 x ({0:f4}+{1:f4}-{2:f4}) x {3:f4} / COS({4:f4})",
                    Section_D1[c], Section_D2[c], Section_Ts[c], Section_Tw[c], theta[c]));
                list.Add(string.Format("         = {0:f4}", A7[c]));
                list.Add(string.Format(""));

                Yt7[c] = Section_Tf[c] + (Section_D1[c] + Section_D2[c] - Section_Ts[c]) / 2.0;
                list.Add(string.Format("Yt = Tf + (D1 + D2 - Ts)/2 = {0:f4} + ({1:f4} + {2:f4} - {3:f4})/2 = {4:f4}",
                    Section_Tf[c], Section_D1[c], Section_D2[c], Section_Ts[c], Yt7[c]));

                A_Yt7[c] = A7[c] * Yt7[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A7[c], Yt7[c], A_Yt7[c]));
                A_YT_Yt7[c] = A7[c] * Yt7[c] * Yt7[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A7[c], Yt7[c], A_Yt7[c]));

                Iself7[c] = ((Section_Tw[c] / Math.Cos(theta[c])) * Math.Pow((Section_D1[c] + Section_D2[c] - Section_Ts[c]), 3) / 6);

                list.Add(string.Format("Iself (xx) = Moment of Inertia "));
                list.Add(string.Format("           = ((Tw/COS(θ)) x (D1+D2-Ts)^3/6"));
                list.Add(string.Format("           = (({0:f4}/COS({1:f4})) x ({2:f4} + {3:f4} - {4:f4})^3/6",
                    Section_Tw[c], theta[c], Section_D1[c], Section_D2[c], Section_Ts[c]));
                list.Add(string.Format("           = {0:f6}", Iself7[c]));
                list.Add(string.Format(""));

                Iself_A_Yt_Yt7[c] = Iself7[c] + A_YT_Yt7[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}",
                    Iself7[c], A_YT_Yt7[c], Iself_A_Yt_Yt7[c]));


                Iyy7[c] = ((Section_D1[c] + Section_D2[c] - Section_Ts[c]) * Math.Pow((Section_Tw[c] / Math.Cos(theta[c])), 3)) / 6

                            + A7[c] * Math.Pow((Section_Dw[c] / 2 - Section_C1[c] - Section_C2[c] -
                            (Section_D1[c] + Section_D2[c] - Section_Ts[c]) * Math.Tan(theta[c]) / 2 - Section_Tw[c] / 2 / Math.Cos(theta[c])), 2);


                list.Add(string.Format(""));
                list.Add(string.Format("I(yy)   = ((D1+D2-Ts) x (Tw/COS(θ))^3)/6 "));
                list.Add(string.Format("           + A x (Dw/2 - C1 - C2 - (D1+D2-Ts) x TAN(θ)/2 - Tw/2/COS(D θ))^2"));
                list.Add(string.Format(""));

                list.Add(string.Format("        = (({0:f4} + {1:f4} - {2:f4}) x ({3:f4}/COS({4:f4}))^3)/6 ",
                                                Section_D1[c], Section_D2[c], Section_Ts[c], Section_Tw[c], theta[c]));

                list.Add(string.Format("          + {0:f4} x ({1:f4}/2 - {2:f4} - {3:f4} - ({4:f4} + {5:f4} - {6:f4}) x TAN({7:f4})/2 - {8:f4}/2/COS({7:f4}))^2",
                                                A7[c], Section_Dw[c], Section_C1[c], Section_C2[c], Section_D1[c], Section_D2[c], Section_Ts[c], theta[c], Section_Tw[c]));
                list.Add(string.Format("        = {0:f4}", Iyy7[c]));
                //list.Add(string.Format("        = 0.0686 + 11.6972"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 8, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));

                A8[c] = (Section_SW[c] - Section_K1[c] * 2) * Section_Ts[c];

                list.Add(string.Format("Area = A = (Sw-K1 x 2) x Ts = ({0:f4}-{1:f4} x 2) x {2:f4} = {3:f4}", Section_SW[c], Section_K1[c], Section_Ts[c], A8[c]));

                list.Add(string.Format(""));
                Yt8[c] = Section_D[c] - Section_Ts[c] / 2.0;
                list.Add(string.Format("Yt = D - Ts/2 = {0:f4} - {1:f4}/2 = {2:f4}", Section_D[c], Section_Ts[c], Yt8[c]));

                A_Yt8[c] = A8[c] * Yt8[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A8[c], Yt8[c], A_Yt8[c]));

                A_YT_Yt8[c] = A8[c] * Yt8[c] * Yt8[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A8[c], Yt8[c], A_Yt8[c]));


                Iself8[c] = (A8[c] * Math.Pow(Section_Ts[c], 2)) / 12.0;
                list.Add(string.Format("Iself (xx) = Moment of Inertia"));
                //list.Add(string.Format("  = (D95 x D34^2) / 12"));
                list.Add(string.Format("           = (A x Ts^2) / 12"));
                list.Add(string.Format("           = ({0:f4} x {1:f4}^2) / 12", A8[c], Section_Ts[c]));
                list.Add(string.Format("           = {0:f6}", Iself8[c]));
                list.Add(string.Format(""));

                Iself_A_Yt_Yt8[c] = Iself8[c] + A_YT_Yt8[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself8[c], A_YT_Yt8[c], Iself_A_Yt_Yt8[c]));

                Iyy8[c] = (Section_Ts[c] * Math.Pow((Section_SW[c] - 2 * Section_K1[c]), 3)) / 12.0;

                list.Add(string.Format("I(yy)   = (Ts x (Sw - 2 x K1)^3) / 12"));
                list.Add(string.Format("        = {0:f4} x ({1:f4} - 2 x {2:f4})^3 / 12", Section_Ts[c], Section_SW[c], Section_K1[c]));
                list.Add(string.Format("        = {0:f4}", Iyy8[c]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 9, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));

                A9[c] = Section_K1[c] * Section_D2[c];
                list.Add(string.Format("Area = A = K1 x D2 = {0:f4} x {1:f4} = {2:f4}", Section_K1[c], Section_D2[c], A9[c]));
                list.Add(string.Format(""));

                Yt9[c] = Section_D[c] - Section_D2[c] / 3.0;
                list.Add(string.Format("Yt = D - D2/3 = {0:f4} - {1:f4}/2 = {2:f4}", Section_D[c], Section_D2[c], Yt9[c]));

                A_Yt9[c] = A9[c] * Yt9[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A9[c], Yt9[c], A_Yt9[c]));
                A_YT_Yt9[c] = A9[c] * Yt9[c] * Yt9[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4}  x {1:f4} = {2:f4}", A9[c], Yt9[c], A_YT_Yt9[c]));

                Iself9[c] = (Section_K1[c] * Math.Pow(Section_D2[c], 3)) / 18;

                list.Add(string.Format("Iself (xx) = Moment of Inertia         "));
                list.Add(string.Format("           = (K1 x D2^3) / 18"));
                list.Add(string.Format("           = ({0:f4} x {1:f4}^2) / 18", Section_K1[c], Section_D2[c]));
                list.Add(string.Format("           = {0:f6}", Iself9[c]));
                list.Add(string.Format(""));

                Iself_A_Yt_Yt9[c] = Iself9[c] + A_YT_Yt9[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself9[c], A_YT_Yt9[c], Iself_A_Yt_Yt9[c]));



                Iyy9[c] = (Section_D2[c] * Math.Pow(Section_K1[c], 3)) / 18.0 + A9[c] * Math.Pow((Section_SW[c] / 2 - Section_K1[c] / 3), 2);
                list.Add(string.Format("I(yy)   = (D2 x K1^3) / 18 + A x (Sw/2 - K1/3)^2"));
                list.Add(string.Format("        = ({0:f4} x {1:f4}^3) / 18 + {2:f4} x ({3:f4}/2 -{1:f4}/3)^2",
                                                    Section_D2[c], Section_K1[c], A9[c], Section_SW[c]));
                list.Add(string.Format("        = {0:f4}", Iyy9[c]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 10, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));

                A10[c] = Section_Ts[c] * Section_K2[c];
                list.Add(string.Format("Area = A = Ts x K2"));
                list.Add(string.Format("         = {0:f4} x {1:f4}", Section_Ts[c], Section_K2[c]));
                list.Add(string.Format("         = {0:f4}", A10[c]));
                list.Add(string.Format(""));

                Yt10[c] = Section_D[c] - (Section_Ts[c] / 3) * 2.0;

                list.Add(string.Format("Yt = D - (Ts/3) x 2 = {0:f4} - ({1:f4}/3) x 2 = {2:f4}",
                    Section_D[c], Section_Ts[c], Yt10[c]));

                A_Yt10[c] = A10[c] * Yt10[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A10[c], Yt10[c], A_Yt10[c]));
                A_YT_Yt10[c] = A10[c] * Yt10[c] * Yt10[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A10[c], Yt10[c], A_YT_Yt10[c]));


                Iself10[c] = (Section_K2[c] * Math.Pow(Section_Ts[c], 3)) / 18.0;

                list.Add(string.Format("Iself (xx) = Moment of Inertia "));
                list.Add(string.Format("           = (K2 x Ts^3) / 18"));
                list.Add(string.Format("           = ({0:f4} x {1:f4}^3) / 18", Section_K2[c], Section_Ts[c]));
                list.Add(string.Format("           = {0:f5}", Iself10[c]));
                list.Add(string.Format(""));

                Iself_A_Yt_Yt10[c] = Iself10[c] + A_YT_Yt10[c];


                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f5} + {1:f4} = {2:f5}", Iself10[c], A_YT_Yt10[c], Iself_A_Yt_Yt10[c]));


                Iyy10[c] = (Section_Ts[c] * Math.Pow(Section_K2[c], 3)) / 18.0 + A10[c] * Math.Pow((Section_SW[c] / 2 - Section_K1[c] + Section_K2[c] / 3), 2);

                list.Add(string.Format("I(yy)   = (Ts x K2^3) / 18 + A x (Sw/2 - K1 + K2/3)^2"));
                list.Add(string.Format("        = ({0:f4} x {1:f4}^3) / 18 + {2:f4} x ({3:f4}/2 - {4:f4} + {1:f4}/3)^2",
                                               Section_Ts[c], Section_K2[c], A10[c], Section_SW[c], Section_K1[c]));
                list.Add(string.Format("        = {0:f4}", Iyy10[c]));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("Cross Section Part 11, at {0}:", part_text));
                list.Add(string.Format("---------------------------------------------------"));


                A11[c] = Section_HW3[c] * Section_HH3[c];
                list.Add(string.Format("Area = A = HW3 x HH3 = {0:f4} x {1:f4} = {2:f4}", Section_HW3[c], Section_HH3[c], A11[c]));
                list.Add(string.Format(""));

                Yt11[c] = Section_D[c] - Section_Ts[c] - (Section_HH3[c] / 3);


                list.Add(string.Format("Yt = D - Ts - (HH3/3) = {0:f4} - {1:f4} - ({2:f4}/3) = {3:f4}",
                    Section_D[c], Section_Ts[c], Section_HH3[c], Yt11[c]));

                A_Yt11[c] = A11[c] * Yt11[c];
                list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A11[c], Yt11[c], A_Yt11[c]));
                A_YT_Yt11[c] = A11[c] * Yt11[c] * Yt11[c];
                list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A11[c], Yt11[c], A_YT_Yt11[c]));

                list.Add(string.Format("Iself (xx) = Moment of Inertia         "));

                Iself11[c] = (Section_HW3[c] * Math.Pow(Section_HH3[c], 3)) / 18.0;

                list.Add(string.Format("  = (HW3 x HH3^3) / 18"));
                list.Add(string.Format("  = ({0:f4} x {1:f4}^3) / 18", Section_HW3[c], Section_HH3[c]));
                list.Add(string.Format("  = {0:f6}", Iself11[c]));
                list.Add(string.Format(""));

                Iself_A_Yt_Yt11[c] = Iself11[c] + A_YT_Yt11[c];
                list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself11[c], A_YT_Yt11[c], Iself_A_Yt_Yt11[c]));


                Iyy11[c] = (Section_HH3[c] * Math.Pow(Section_HW3[c], 3) / 18) +
                           A11[c] * Math.Pow((Section_SW[c] / 2 - Section_K1[c] + Section_K2[c] - Section_Tw[c] / Math.Cos(theta[c]) - Section_HW3[c] / 3), 2);


                list.Add(string.Format("I(yy)   = (HH3 xHW3^3)/18 + A x (Sw/2 - K1 + K2 - Tw/COS(θ) - HW3/3)^2"));
                list.Add(string.Format("        = ({0:f4} x {1:f4}^3)/18 + {2:f4} x ({3:f4}/2 - {4:f4} + {5:f4} - {6:f4}/COS({7:f4}) - {1:f4}/3)^2",
                            Section_HH3[c], Section_HW3[c], A11[c], Section_SW[c], Section_K1[c], Section_K2[c], Section_Tw[c], theta[c]));
                list.Add(string.Format("        = {0:f4}", Iyy11[c]));
                list.Add(string.Format(""));

                c++;
            }
            while (c < 6);

            list.Add(string.Format("TABLE  3:  Calculated values for Section Properties of various parts in the Cross Section at relevant Sections"));
            list.Add(string.Format("---------------------------------------------------------------------------------------------------------------"));
            list.Add(string.Format(""));


            format = "{0,-8:f4} {1,-18:f4} {2,12:f4} {3,12:f4} {4,12:f4} {5,12:f4} {6,12:f4} {7,12:f4}";
            //list.Add(string.Format("                At Support    At ‘D’        L/8          L/4           3L/8          L/2"));
            list.Add(string.Format(format, "", "", "At Support", "At 'D'", "L/8", "L/4", "3L/8", "L/2"));



            for (int i = 0; i < list_A.Count; i++)
            {

                A1 = new PSC_Force_Data();

                A1 = list_A[i];
                Yt1 = list_Yt[i];
                A_Yt1 = list_A_Yt[i];
                A_YT_Yt1 = list_A_YT_Yt[i];
                Iself1 = list_Iself[i];
                Iself_A_Yt_Yt1 = list_Iself_A_Yt_Yt[i];
                Iyy1 = list_Iyy[i];

                list.Add(string.Format("".PadLeft(108, '-')));
                list.Add(string.Format(format, "Part " + (i + 1), "AREA", A1[0], A1[1], A1[2], A1[3], A1[4], A1[5]));
                list.Add(string.Format(format, "", "Yt", Yt1[0], Yt1[1], Yt1[2], Yt1[3], Yt1[4], Yt1[5]));
                list.Add(string.Format(format, "", "A.Yt", A_Yt1[0], A_Yt1[1], A_Yt1[2], A_Yt1[3], A_Yt1[4], A_Yt1[5]));
                list.Add(string.Format(format, "", "A.Yt^2", A_YT_Yt1[0], A_YT_Yt1[1], A_YT_Yt1[2], A_YT_Yt1[3], A_YT_Yt1[4], A_YT_Yt1[5]));
                list.Add(string.Format(format, "", "Iself -(xx)", Iself1[0], Iself1[1], Iself1[2], Iself1[3], Iself1[4], Iself1[5]));
                list.Add(string.Format(format, "", "Iself + A.Yt^2", Iself_A_Yt_Yt1[0], Iself_A_Yt_Yt1[1], Iself_A_Yt_Yt1[2], Iself_A_Yt_Yt1[3], Iself_A_Yt_Yt1[4], Iself_A_Yt_Yt1[5]));
                list.Add(string.Format(format, "", "Iself-(yy)", Iyy1[0], Iyy1[1], Iyy1[2], Iyy1[3], Iyy1[4], Iyy1[5]));
            }
            list.Add(string.Format("".PadLeft(108, '-')));

            A1 = list_A[0];
            Yt1 = list_Yt[0];
            A_Yt1 = list_A_Yt[0];
            A_YT_Yt1 = list_A_YT_Yt[0];
            Iself1 = list_Iself[0];
            Iself_A_Yt_Yt1 = list_Iself_A_Yt_Yt[0];
            Iyy1 = list_Iyy[0];
            #endregion STEP 1
            #region STEP 2 :  Section Properties:

            list.Add(string.Format(""));
            //list.Add(string.Format("(This will continue for all 11 Parts, at SUPPORT, as calculated below)"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("STEP 2 :  Section Properties :"));
            list.Add(string.Format("------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Calculations :"));
            list.Add(string.Format("--------------"));

            c = 0;

            for (int i = 0; i < list_A.Count; i++)
            {
                A += list_A[i];
                Yt += list_Yt[i];
                A_Yt += list_A_Yt[i];
                A_YT_Yt += list_A_YT_Yt[i];
                Iself += list_Iself[i];
                Iself_A_Yt_Yt += list_Iself_A_Yt_Yt[i];
                Iyy += list_Iyy[i];
            }
            do
            {

                if (c == 0) part_text = "SUPPORT";
                else if (c == 1) part_text = "'D'";
                else if (c == 2) part_text = "L/8";
                else if (c == 3) part_text = "L/4";
                else if (c == 4) part_text = "3L/8";
                else if (c == 5) part_text = "L/2";

                list.Add(string.Format(""));
                list.Add(string.Format("Values at {0} :", part_text));
                list.Add(string.Format(""));
                list.Add(string.Format("Total [AREA] = A = A1+A2+A3+A4+A5+A6+A7+A8+A9+A10+A11 = {0:f5}", A[c]));
                list.Add(string.Format(""));
                list.Add(string.Format("Total [A x Yt] = [A x Yt]1 + [A x Yt]2 + [A x Yt]3 + [A x Yt]4 + [A x Yt]5"));
                list.Add(string.Format("                 + [A x Yt]6 + [A x Yt]7 + [A x Yt]8 + [A x Yt]9 + [A x Yt]10  "));
                list.Add(string.Format("                 + [A x Yt]11"));
                list.Add(string.Format(""));
                list.Add(string.Format("                 = {0:f4}", A_Yt[c]));
                list.Add(string.Format(""));
                list.Add(string.Format("Total [Iself + A x Yt^2] = [Iself + A x Yt^2]1 + [Iself + A x Yt^2]2 + [Iself + A x Yt^2]3 + [Iself + A x Yt^2]4"));
                list.Add(string.Format("                           + [Iself + A x Yt^2]5 + [Iself + A x Yt^2]6 + [Iself + A x Yt^2]7 + [Iself + A x Yt^2]8"));
                list.Add(string.Format("                           + [Iself + A x Yt^2]9  + [Iself + A x Yt^2]10 + [Iself + A x Yt^2]11 "));
                list.Add(string.Format(""));
                list.Add(string.Format("                          = {0:f4} ", Iself_A_Yt_Yt[c]));
                list.Add(string.Format(""));

                Yt[c] = A_Yt[c] / A[c];
                list.Add(string.Format("Yt = Total [A x Yt] / Total [AREA] = {0:f4}", Yt[c]));
                list.Add(string.Format(""));

                Yb[c] = Section_D[c] - Yt[c];
                list.Add(string.Format("Yb = D - Yt = {0:f4} - {1:f4} = {2:f4}", Section_D[c], Yt[c], Yb[c]));
                list.Add(string.Format(""));
                Ixx[c] = Iself_A_Yt_Yt[c] - A[c] * Yt[c] * Yt[c];
                list.Add(string.Format("Ixx = (Total [Iself + A x Yt^2) - (Total [AREA]) x (Yt)^2 = {0:f4}", Ixx[c]));
                list.Add(string.Format(""));
                list.Add(string.Format("Iyy = [Iyy]1 + [Iyy]2 + [Iyy]3 + [Iyy]4 + [Iyy]5"));
                list.Add(string.Format("      + [Iyy]6 + [Iyy]7 + [Iyy]8 + [Iyy]9 + [Iyy]10 + [Iyy]11"));
                list.Add(string.Format("    = {0:f4}", Iyy[c]));
                list.Add(string.Format(""));

                Zt[c] = Ixx[c] / Yt[c];
                list.Add(string.Format("Zt = Ixx / Yt = {0:F5} / {1:f5} = {2:f5}", Ixx[c], Yt[c], Zt[c]));
                list.Add(string.Format(""));
                Zb[c] = Ixx[c] / Yb[c];
                list.Add(string.Format("Zb = Ixx / Yb = {0:F5} / {1:f5} = {2:f5}", Ixx[c], Yb[c], Zb[c]));
                list.Add(string.Format(""));

                c++;
            }
            while (c < 6);
            list.Add(string.Format(""));
            format = "{0,-14:f4} {1,-12:f4} {2,12:f4} {3,12:f4} {4,12:f4} {5,12:f4} {6,12:f4} {7,12:f4}";
            list.Add(string.Format("-------------------------------------------"));
            list.Add(string.Format("TABLE  4:  Final Section Properties Table :"));
            list.Add(string.Format("-------------------------------------------"));
            list.Add(string.Format("".PadLeft(108, '-')));
            list.Add(string.Format(format, "", "Unit", "At Support", "At 'D'", "L/8", "L/4", "3L/8", "L/2"));
            list.Add(string.Format("".PadLeft(108, '-')));
            list.Add(string.Format(format, "AREA", "sq.m", A[0], A[1], A[2], A[3], A[4], A[5]));
            list.Add(string.Format(""));
            list.Add(string.Format(format, SYMBOLS.SIGMA_SUM + "A.Yt", "m^3", A_Yt[0], A_Yt[1], A_Yt[2], A_Yt[3], A_Yt[4], A_Yt[5]));
            list.Add(string.Format(""));
            list.Add(string.Format(format, SYMBOLS.SIGMA_SUM + "Iself+A.Yt^2", "sq.sq.m", Iself_A_Yt_Yt[0], Iself_A_Yt_Yt[1], Iself_A_Yt_Yt[2], Iself_A_Yt_Yt[3], Iself_A_Yt_Yt[4], Iself_A_Yt_Yt[5]));
            list.Add(string.Format(""));
            list.Add(string.Format(format, "Yt", "m", Yt[0], Yt[1], Yt[2], Yt[3], Yt[4], Yt[5]));
            list.Add(string.Format(""));
            list.Add(string.Format(format, "Yb", "m", Yb[0], Yb[1], Yb[2], Yb[3], Yb[4], Yb[5]));
            list.Add(string.Format(""));
            list.Add(string.Format(format, "Ix-x", "sq.sq.m", Ixx[0], Ixx[1], Ixx[2], Ixx[3], Ixx[4], Ixx[5]));
            list.Add(string.Format(""));
            list.Add(string.Format(format, "Iy-y", "sq.sq.m", Iyy[0], Iyy[1], Iyy[2], Iyy[3], Iyy[4], Iyy[5]));
            list.Add(string.Format(""));
            list.Add(string.Format(format, "Zt", "m^3", Zt[0], Zt[1], Zt[2], Zt[3], Zt[4], Zt[5]));
            list.Add(string.Format(""));
            list.Add(string.Format(format, "Zb", "m^3", Zb[0], Zb[1], Zb[2], Zb[3], Zb[4], Zb[5]));
            list.Add(string.Format(""));
            list.Add(string.Format("".PadLeft(108, '-')));
            list.Add(string.Format(""));

            psc_setion = new PSC_Box_Section_Data(A, Ixx, Iyy, Iself_A_Yt_Yt);
            #endregion STEP 2

            return list;
        }
        public void Calculate_Program(string filename, PSC_Box_Forces forces)
        {
            List<string> list = new List<string>();
            try
            {
                #region Chiranjit [2012 09 14]


                #region TechSOFT Banner

                list.Add("");
                list.Add("");

                list.Add(string.Format("\t\t***********************************************"));
                list.Add(string.Format("\t\t*            ASTRA Pro Release 21             *"));
                list.Add(string.Format("\t\t*        TechSOFT Engineering Services        *"));
                list.Add(string.Format("\t\t*                                             *"));
                list.Add(string.Format("\t\t*    DESIGN OF PRE STRESSED CONCRETE (PSC)    *"));
                list.Add(string.Format("\t\t*             BOX GIRDER BRIDGE               *"));
                list.Add(string.Format("\t\t***********************************************"));
                list.Add(string.Format("\t\t----------------------------------------------"));
                list.Add(string.Format("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " "));
                list.Add(string.Format("\t\t----------------------------------------------"));
                #endregion

                #region User Input Data
                //list.Add(string.Format("  DESIGN OF PRE STRESSED CONCRETE (PSC) SEGMENTAL BOX GIRDER BRIDGE"));
                list.Add(string.Format(""));
                list.Add(string.Format("User’s Input Data:   [Tab 1]"));
                list.Add(string.Format(""));
                list.Add(string.Format("General Design Input Data :"));
                list.Add(string.Format("---------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Overall Span (Centre to Centre spacing of exp. joint) = Lo = {0:f3} m", Lo));
                list.Add(string.Format("Girder end to bearing centre line = L1 = {0:f3} m", L1));
                list.Add(string.Format("Distance between Centre Line of Bearing and Centre Line of Expansion Joint = L2 = {0:f3} m", L2));
                list.Add(string.Format("Expansion gap = exg = {0:f3} m.", exg));
                list.Add(string.Format("Effective Span (Centre to Centre spacing of Bearing) = L = Lo - 2 x L1 = {0:f3} m.", L));
                list.Add(string.Format("Width of deck = Dw = {0:f3} m.", Dw));
                list.Add(string.Format("Depth of Box Girder = D = {0:f3} m.", D));
                list.Add(string.Format("Grade of Concrete of Girder = Fcu = {0} Mpa (N/Sq.mm)", Fcu));
                list.Add(string.Format("Age of concrete for at transfer = {0} days", act));
                list.Add(string.Format("Maturity of concrete for at transfer = {0}%", mct));
                list.Add(string.Format("Strength concrete at the time of transfer = {0} Mpa (N/Sq.mm)", sct));
                list.Add(string.Format("Age of girder at the time of casting of SIDL = {0} days", acsidl));
                list.Add(string.Format("Maturity of girder at the time of casting of SIDL = {0}%", mtcsidl));
                list.Add(string.Format("Extra time dependent loss to be considered = T_loss = {0}%", T_loss));
                list.Add(string.Format("Wearing coat thickness = {0} m.", wct));
                list.Add(string.Format("Average Thickness of Top Slab = ds = {0} m.", ds));
                list.Add(string.Format("Thickness of Top Flange of Equivalent Girder = df =  {0} m", df));
                list.Add(string.Format("Width of Top Flange of Equivalent Girder = bt = {0:f3} m.", bt));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Dead Load factor = FactDL = {0}", FactDL));
                list.Add(string.Format("Ultimate Super Imposed Dead Load factor = FactSIDL = {0:f3}", FactSIDL));
                list.Add(string.Format("Ultimate Live Load factor = FactLL = {0:f3}", FactLL));
                list.Add(string.Format(""));
                list.Add(string.Format("Coefficient of Thermal Expansion of Concrete = alpha (α) = {0}", alpha));
                list.Add(string.Format(""));
                list.Add(string.Format("For Rise in Temperature"));
                list.Add(string.Format("Temperature = Tr1 = {0}°C", Tr1));
                list.Add(string.Format("Temperature = Tr2 = {0}°C", Tr2));
                list.Add(string.Format("Temperature = Tr3 = {0}°C", Tr3));
                list.Add(string.Format(""));
                list.Add(string.Format("For Fall in Temperature"));
                list.Add(string.Format("Temperature = Tf1 = {0}°C", Tf1));
                list.Add(string.Format("Temperature = Tf2 = {0}°C", Tf2));
                list.Add(string.Format("Temperature = Tf3 = {0}°C", Tf3));
                list.Add(string.Format("Temperature = Tf4 = {0}°C", Tf4));
                //list.Add(string.Format("Temperature = Tf4 = {0} Centigrade Prestressing Input Data:   [Tab 2]"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("User’s Input Data:   [Tab 2]"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Prestressing Input Data :"));
                list.Add(string.Format("-------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("  A)  Construction Schedule and Prestressing Stages"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("      Job                                            Day after casting       fcj   N/sq.mm (Mpa)"));
                list.Add(string.Format("      ---------------------------------------------  -----------------       -------------------"));
                list.Add(string.Format("(i)   Completion of casting of Box Girder              {0}      day            fcj{0,-3} = {1}", ccbg_day, ccbg_fcj));
                list.Add(string.Format("(ii)  First Stage Prestress                            {0}      day            fcj{0,-3} = {1}", fsp_day, fsp_fcj));
                list.Add(string.Format("(iii) Completion of Wearing Course & Crash Barrier     {0}      day            fcj{0,-3} = {1}", cwccb_day, cwccb_fcj));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("  B)  Cable and Prestressing Data "));
                list.Add(string.Format(""));
                list.Add(string.Format("1)   Nominal Diameter [D] = {0:f3} mm. (From Specifications  Reference Table below)", ND));
                list.Add(string.Format("2)   Nominal Area [A] = {0:f3} Sq.mm.", NA));
                list.Add(string.Format("3)   Nominal mass [Pu] = {0:f3} Kg/m", Pu));
                list.Add(string.Format("4)   Yield Strength [Fy] = {0:f3} N/Sq.mm. (Mpa)", Tab2_Fy));
                list.Add(string.Format("5)   Tensile Strength [Fu] = {0:f3} N/Sq.mm. (Mpa)", Fu));
                list.Add(string.Format("6)   Minimum Breaking Load [Pn] = {0:f3} kN", Pn));
                list.Add(string.Format("7)   Elastic Modulus [Eps] = {0:f3} Gpa", Eps));
                list.Add(string.Format("8)   Jacking Force at Transfer (% of Breaking Load) [Pj] = {0:f3} %", Pj));
                list.Add(string.Format("9)   Slip at Jacking End [s] = {0:f3} mm.", s));
                list.Add(string.Format("10)  Coefficient of Friction [µ] = {0} per radian", mu));
                list.Add(string.Format("11)  Wobble Friction coefficient [k] = {0} per metre", k));
                list.Add(string.Format("12)  Relaxation of Prestressing Steel at 70% uts [Re1] = {0} N/Sq.mm (Mpa)", Re1));
                list.Add(string.Format("13)  Relaxation of Prestressing Steel at 50% uts [Re2] = {0} N/Sq.mm (Mpa)", Re2));
                list.Add(string.Format("14)  Age of Concrete for First Stage Prestressing  [td1] = {0} days  (Taken From Tab 1)", td1));
                list.Add(string.Format("15)  Diameter of Prestressing Duct [qd] = {0} mm.", qd));
                list.Add(string.Format("16)  Concrete Grade [Fcu] = {0} N/Sq.mm (Mpa) (Taken  From Tab 1)", Fcu));
                list.Add(string.Format("17)  Elastic Modulus of Concrete (At 28 days) [Ec] = 5000 x Sqrt({0}) = {1:f3} N/Sq.mm (Mpa)", Fcu, Ec));
                list.Add(string.Format("18)  Cover2 = {0:f3} mm.     Cover1 = {1:f3} mm. < Cover2", cover2, cover1));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("(Calculated value, disabled)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                #endregion


                #region TABLE 1 : Specifications  Reference Table

                list.Add(string.Format("------------------------------------------"));
                list.Add(string.Format("TABLE 1 : Specifications  Reference Table "));
                list.Add(string.Format("------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("-------------------------------------------------------------------------------"));
                list.Add(string.Format("Strand Type             Unit      13mm (.5\")                15mm (.6\")   "));
                list.Add(string.Format("                              BS:5896   Grade 270        BS:5896    Grade 270 "));
                list.Add(string.Format("-------------------------------------------------------------------------------"));
                list.Add(string.Format("Nominal Dia.             mm     12.9      12.7             15.7        15.2 "));
                list.Add(string.Format("Nominal Area          sq.mm      100      98.7              150         140 "));
                list.Add(string.Format("Nominal Mass           Kg/m     0.785     0.775            1.18         1.1 "));
                list.Add(string.Format("Yield Strength          MPa     1580      1670             1500        1670 "));
                list.Add(string.Format("Tensile Strength        MPa     1860      1860             1770        1860 "));
                list.Add(string.Format("Minimum Breaking Load   kN      186.0     183.7           265.0       260.7 "));
                list.Add(string.Format("-------------------------------------------------------------------------------"));
                #endregion TABLE 1

                #region STEP 1 : Section Properties of various parts in the Cross Section at relevant Sections

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("Cross Section Dimension Input Data"));
                //list.Add(string.Format("----------------------------------"));


                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 1 : Section Properties of various parts in the Cross Section at relevant Sections "));
                list.Add(string.Format("----------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));

                Properties.Resources.SectionDiagram.Save(Path.Combine(file_path, "SectionDiagram.jpg"));
                list.Add(string.Format("Refer to Cross Section Diagram in file 'SectionDiagram.jpg'"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                string format = "{0,-16:f3} {1,8:f3} {2,12:f3} {3,12:f3} {4,12:f3} {5,12:f3} {6,12:f3} {7,12:f3}";
                string format2 = "{0,-16:f3} {1,8:f3} {2,12:f3}°{3,12:f3}°{4,12:f3}°{5,12:f3}°{6,12:f3}°{7,12:f3}°";
                list.Add(string.Format("TABLE 2: User’s  Cross Section Dimension Input Data "));
                list.Add(string.Format("----------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("".PadLeft(108, '-')));
                list.Add(string.Format(format, "", "", "", "D away", "", "", "", ""));
                list.Add(string.Format(format, "SECTION", "", "Support", "from", "L/8", "L/4", "3L/8", "L/2"));
                list.Add(string.Format(format, "", "", "", "support", "", "", "", ""));
                list.Add(string.Format("".PadLeft(108, '-')));
                list.Add(string.Format(format2, "Web inclination", " (θ)deg", Section_Theta[0], Section_Theta[1], Section_Theta[2], Section_Theta[3], Section_Theta[4], Section_Theta[5]));
                list.Add(string.Format("".PadLeft(108, '_')));
                list.Add(string.Format(format, "Total Depth", "D", Section_D[0], Section_D[1], Section_D[2], Section_D[3], Section_D[4], Section_D[5]));
                list.Add(string.Format("".PadLeft(108, '_')));
                list.Add(string.Format(format, "Top Flange", "Dw", Section_Dw[0], Section_Dw[1], Section_Dw[2], Section_Dw[3], Section_Dw[4], Section_Dw[5]));
                list.Add(string.Format(format, "", "Td", Section_Td[0], Section_Td[1], Section_Td[2], Section_Td[3], Section_Td[4], Section_Td[5]));
                list.Add(string.Format("".PadLeft(108, '_')));

                list.Add(string.Format(format, "Cantilever", "C1", Section_C1[0], Section_C1[1], Section_C1[2], Section_C1[3], Section_C1[4], Section_C1[5]));
                list.Add(string.Format(format, "", "C2", Section_C2[0], Section_C2[1], Section_C2[2], Section_C2[3], Section_C2[4], Section_C2[5]));
                list.Add(string.Format(format, "", "Tp", Section_Tip[0], Section_Tip[1], Section_Tip[2], Section_Tip[3], Section_Tip[4], Section_Tip[5]));
                list.Add(string.Format(format, "", "Tt", Section_Tf[0], Section_Tf[1], Section_Tf[2], Section_Tf[3], Section_Tf[4], Section_Tf[5]));
                list.Add(string.Format("".PadLeft(108, '_')));

                list.Add(string.Format(format, "Web", "lw", Section_lw[0], Section_lw[1], Section_lw[2], Section_lw[3], Section_lw[4], Section_lw[5]));
                list.Add(string.Format(format, "", "D1", Section_D1[0], Section_D1[1], Section_D1[2], Section_D1[3], Section_D1[4], Section_D1[5]));
                list.Add(string.Format(format, "", "Tw", Section_Tw[0], Section_Tw[1], Section_Tw[2], Section_Tw[3], Section_Tw[4], Section_Tw[5]));
                list.Add(string.Format("".PadLeft(108, '_')));

                list.Add(string.Format(format, "Soffit Slab", "SW", Section_D[0], Section_D[1], Section_D[2], Section_D[3], Section_D[4], Section_D[5]));
                list.Add(string.Format(format, "", "Ts", Section_Ts[0], Section_Ts[1], Section_Ts[2], Section_Ts[3], Section_Ts[4], Section_Ts[5]));
                list.Add(string.Format(format, "", "D2", Section_D2[0], Section_D2[1], Section_D2[2], Section_D2[3], Section_D2[4], Section_D2[5]));
                list.Add(string.Format(format, "", "K1", Section_K1[0], Section_K1[1], Section_K1[2], Section_K1[3], Section_K1[4], Section_K1[5]));
                list.Add(string.Format(format, "", "K2", Section_K2[0], Section_K2[1], Section_K2[2], Section_K2[3], Section_K2[4], Section_K2[5]));
                list.Add(string.Format("".PadLeft(108, '_')));

                list.Add(string.Format(format, "t. hnch1", "HW1", Section_HW1[0], Section_HW1[1], Section_HW1[2], Section_HW1[3], Section_HW1[4], Section_HW1[5]));
                list.Add(string.Format(format, "", "HH1", Section_HH1[0], Section_HH1[1], Section_HH1[2], Section_HH1[3], Section_HH1[4], Section_HH1[5]));
                list.Add(string.Format(format, "", "CH1", Section_CH1[0], Section_CH1[1], Section_CH1[2], Section_CH1[3], Section_CH1[4], Section_CH1[5]));
                list.Add(string.Format("".PadLeft(108, '_')));

                list.Add(string.Format(format, "t. hnch2", "HW2", Section_HW2[0], Section_HW2[1], Section_HW2[2], Section_HW2[3], Section_HW2[4], Section_HW2[5]));
                list.Add(string.Format(format, "", "HH2", Section_HH2[0], Section_HH2[1], Section_HH2[2], Section_HH2[3], Section_HH2[4], Section_HH2[5]));
                list.Add(string.Format("".PadLeft(108, '_')));

                list.Add(string.Format(format, "bot. hnch", "HW3", Section_HW3[0], Section_HW3[1], Section_HW3[2], Section_HW3[3], Section_HW3[4], Section_HW3[5]));
                list.Add(string.Format(format, "", "HH3", Section_HH3[0], Section_HH3[1], Section_HH3[2], Section_HH3[3], Section_HH3[4], Section_HH3[5]));
                list.Add(string.Format("".PadLeft(108, '_')));

                list.Add(string.Format(""));
                list.Add(string.Format(""));

                PSC_Force_Data theta = new PSC_Force_Data(0);
                PSC_Force_Data D2 = new PSC_Force_Data(0);
                PSC_Force_Data K1 = new PSC_Force_Data(0);
                PSC_Force_Data K2 = new PSC_Force_Data(0);

                list.Add(string.Format("Calculated values: "));
                list.Add(string.Format(""));
                for (int i = 0; i < Section_lw.Count; i++)
                {
                    theta.Add(Math.Atan(Section_lw[i] / Section_D1[i]));
                    D2.Add(Section_D[i] - Section_Tf[i] - Section_D1[i]);
                    K1.Add(D2[i] * Math.Tan(theta[i]));
                    K2.Add(Section_Ts[i] * Math.Tan(theta[i]));

                    //list.Add(string.Format("Calculated values:    (Cells shaded above are with these calculated values)"));
                    list.Add(string.Format("Web Inclination = θ = atan (lw / D1) = atan ({0} / {1}) = atan({2:f3}) = {3:f3}°(degrees) = {4:f3} radian",
                       Section_lw[i], Section_D1[i], (Section_lw[i] / Section_D1[i]), Section_Theta[i], theta[i]));

                    list.Add(string.Format("and  D2 = D - Tf - D1 = {0:f3} - {1:f3} - {2:f3} = {3:f3}", Section_D[i], Section_Tf[i], Section_D1[i], D2[i]));
                    list.Add(string.Format("K1 = D2 x tan(θ) = {0:f3} x tan({1:f3}) = {2:f3}", D2[i], Section_Theta[i], K1[0]));
                    list.Add(string.Format("K2 = Ts x tan(θ) = {0:f3} x tan({1:f3}) = {2:f3}", Section_Ts[i], Section_Theta[i], K2[0]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                }
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                List<PSC_Force_Data> list_A = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_Yt = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_A_Yt = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_A_YT_Yt = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_Iself = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_Iself_A_Yt_Yt = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_Iyy = new List<PSC_Force_Data>();




                PSC_Force_Data A = new PSC_Force_Data(6);
                PSC_Force_Data Yt = new PSC_Force_Data(6);
                PSC_Force_Data Yb = new PSC_Force_Data(6);
                PSC_Force_Data Zt = new PSC_Force_Data(6);
                PSC_Force_Data Zb = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt = new PSC_Force_Data(6);
                PSC_Force_Data Iself = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt = new PSC_Force_Data(6);
                PSC_Force_Data Iyy = new PSC_Force_Data(6);
                PSC_Force_Data Ixx = new PSC_Force_Data(6);



                PSC_Force_Data A1 = new PSC_Force_Data(6);
                PSC_Force_Data Yt1 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt1 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt1 = new PSC_Force_Data(6);
                PSC_Force_Data Iself1 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt1 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy1 = new PSC_Force_Data(6);


                list_A.Add(A1);
                list_Yt.Add(Yt1);
                list_A_Yt.Add(A_Yt1);
                list_A_YT_Yt.Add(A_YT_Yt1);
                list_Iself.Add(Iself1);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt1);
                list_Iyy.Add(Iyy1);



                PSC_Force_Data A2 = new PSC_Force_Data(6);
                PSC_Force_Data Yt2 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt2 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt2 = new PSC_Force_Data(6);
                PSC_Force_Data Iself2 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt2 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy2 = new PSC_Force_Data(6);



                list_A.Add(A2);
                list_Yt.Add(Yt2);
                list_A_Yt.Add(A_Yt2);
                list_A_YT_Yt.Add(A_YT_Yt2);
                list_Iself.Add(Iself2);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt2);
                list_Iyy.Add(Iyy2);





                PSC_Force_Data A3 = new PSC_Force_Data(6);
                PSC_Force_Data Yt3 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt3 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt3 = new PSC_Force_Data(6);
                PSC_Force_Data Iself3 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt3 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy3 = new PSC_Force_Data(6);



                list_A.Add(A3);
                list_Yt.Add(Yt3);
                list_A_Yt.Add(A_Yt3);
                list_A_YT_Yt.Add(A_YT_Yt3);
                list_Iself.Add(Iself3);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt3);
                list_Iyy.Add(Iyy3);



                PSC_Force_Data A4 = new PSC_Force_Data(6);
                PSC_Force_Data Yt4 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt4 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt4 = new PSC_Force_Data(6);
                PSC_Force_Data Iself4 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt4 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy4 = new PSC_Force_Data(6);

                list_A.Add(A4);
                list_Yt.Add(Yt4);
                list_A_Yt.Add(A_Yt4);
                list_A_YT_Yt.Add(A_YT_Yt4);
                list_Iself.Add(Iself4);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt4);
                list_Iyy.Add(Iyy4);



                PSC_Force_Data A5 = new PSC_Force_Data(6);
                PSC_Force_Data Yt5 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt5 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt5 = new PSC_Force_Data(6);
                PSC_Force_Data Iself5 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt5 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy5 = new PSC_Force_Data(6);


                list_A.Add(A5);
                list_Yt.Add(Yt5);
                list_A_Yt.Add(A_Yt5);
                list_A_YT_Yt.Add(A_YT_Yt5);
                list_Iself.Add(Iself5);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt5);
                list_Iyy.Add(Iyy5);


                PSC_Force_Data A6 = new PSC_Force_Data(6);
                PSC_Force_Data Yt6 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt6 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt6 = new PSC_Force_Data(6);
                PSC_Force_Data Iself6 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt6 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy6 = new PSC_Force_Data(6);


                list_A.Add(A6);
                list_Yt.Add(Yt6);
                list_A_Yt.Add(A_Yt6);
                list_A_YT_Yt.Add(A_YT_Yt6);
                list_Iself.Add(Iself6);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt6);
                list_Iyy.Add(Iyy6);


                PSC_Force_Data A7 = new PSC_Force_Data(6);
                PSC_Force_Data Yt7 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt7 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt7 = new PSC_Force_Data(6);
                PSC_Force_Data Iself7 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt7 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy7 = new PSC_Force_Data(6);


                list_A.Add(A7);
                list_Yt.Add(Yt7);
                list_A_Yt.Add(A_Yt7);
                list_A_YT_Yt.Add(A_YT_Yt7);
                list_Iself.Add(Iself7);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt7);
                list_Iyy.Add(Iyy7);


                PSC_Force_Data A8 = new PSC_Force_Data(6);
                PSC_Force_Data Yt8 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt8 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt8 = new PSC_Force_Data(6);
                PSC_Force_Data Iself8 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt8 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy8 = new PSC_Force_Data(6);


                list_A.Add(A8);
                list_Yt.Add(Yt8);
                list_A_Yt.Add(A_Yt8);
                list_A_YT_Yt.Add(A_YT_Yt8);
                list_Iself.Add(Iself8);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt8);
                list_Iyy.Add(Iyy8);


                PSC_Force_Data A9 = new PSC_Force_Data(6);
                PSC_Force_Data Yt9 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt9 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt9 = new PSC_Force_Data(6);
                PSC_Force_Data Iself9 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt9 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy9 = new PSC_Force_Data(6);


                list_A.Add(A9);
                list_Yt.Add(Yt9);
                list_A_Yt.Add(A_Yt9);
                list_A_YT_Yt.Add(A_YT_Yt9);
                list_Iself.Add(Iself9);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt9);
                list_Iyy.Add(Iyy9);


                PSC_Force_Data A10 = new PSC_Force_Data(6);
                PSC_Force_Data Yt10 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt10 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt10 = new PSC_Force_Data(6);
                PSC_Force_Data Iself10 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt10 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy10 = new PSC_Force_Data(6);

                list_A.Add(A10);
                list_Yt.Add(Yt10);
                list_A_Yt.Add(A_Yt10);
                list_A_YT_Yt.Add(A_YT_Yt10);
                list_Iself.Add(Iself10);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt10);
                list_Iyy.Add(Iyy10);


                PSC_Force_Data A11 = new PSC_Force_Data(6);
                PSC_Force_Data Yt11 = new PSC_Force_Data(6);
                PSC_Force_Data A_Yt11 = new PSC_Force_Data(6);
                PSC_Force_Data A_YT_Yt11 = new PSC_Force_Data(6);
                PSC_Force_Data Iself11 = new PSC_Force_Data(6);
                PSC_Force_Data Iself_A_Yt_Yt11 = new PSC_Force_Data(6);
                PSC_Force_Data Iyy11 = new PSC_Force_Data(6);



                list_A.Add(A11);
                list_Yt.Add(Yt11);
                list_A_Yt.Add(A_Yt11);
                list_A_YT_Yt.Add(A_YT_Yt11);
                list_Iself.Add(Iself11);
                list_Iself_A_Yt_Yt.Add(Iself_A_Yt_Yt11);
                list_Iyy.Add(Iyy11);




                int c = 0;
                string part_text = "";
                do
                {
                    if (c == 0) part_text = "SUPPORT";
                    else if (c == 1) part_text = "D away from Support";
                    else if (c == 2) part_text = "L/8";
                    else if (c == 3) part_text = "L/4";
                    else if (c == 4) part_text = "3L/8";
                    else if (c == 5) part_text = "L/2";

                    list.Add(string.Format(""));
                    list.Add(string.Format("-----------------------------------------------------------"));
                    list.Add(string.Format("DESIGN CALCULATIONS OF CROSS SECTION AT {0}", part_text));
                    list.Add(string.Format("-----------------------------------------------------------"));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));

                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 1, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));

                    A1[c] = (Section_Dw[c] - 2 * (Section_C1[c] + Section_C2[c])) * Section_Td[c];
                    list.Add(string.Format("Area = A = (Dw - 2 x (C1 + C2)) x Td "));
                    list.Add(string.Format("         = ({0:f3} - 2 x ({1:f3} + {2:f3})) x {3:f3}", Section_Dw[c], Section_C1[c], Section_C2[c], Section_Td[c]));
                    list.Add(string.Format("         = {0:f3}", A1[c]));
                    list.Add(string.Format(""));
                    Yt1[c] = Section_Td[c] / 2.0;
                    list.Add(string.Format("Yt = Td/2.0 = {0:f3} / 2.0 = {1:f3}", Section_Td[c], Yt1[c]));

                    A_Yt1[c] = A1[c] * Yt1[c];
                    list.Add(string.Format("A x Yt = 1.3275 x 0.1125 = 0.1493"));

                    A_YT_Yt1[c] = A_Yt1[c] * Yt1[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A1[0], Yt1[0], A_YT_Yt1[0]));


                    Iself1[c] = A1[c] * Section_Td[c] * Section_Td[c] / 12.0;
                    list.Add(string.Format("Iself (xx) = Moment of Inertia = A x Td^2 / 12 = {0:f4} x {1:f4}^2 / 12 = {2:f3}", A1[c], Section_Td[c], Iself1[0]));

                    Iself_A_Yt_Yt1[c] = Iself1[c] * A_YT_Yt1[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself1[c], A_YT_Yt1[c], Iself_A_Yt_Yt1[c]));

                    Iyy1[c] = (Math.Pow((Section_Dw[c] - 2 * (Section_C1[c] + Section_C2[c])), 3)) * Section_Td[c] / 12;

                    list.Add(string.Format("I(yy) = ((Dw - 2 x (C1+C2))^3) x Td / 12 "));
                    list.Add(string.Format("      = (({0:f4} - 2 x ({1:f4}+{2:f4}))^3) x {3:f4} / 12", Section_Dw[c], Section_C1[c], Section_C2[c], Section_Td[c]));
                    list.Add(string.Format("      = {0:f4}", Iyy1[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));

                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 2, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));

                    A2[c] = (Section_C1[c] + Section_C2[c]) * Section_Tip[c] * 2.0;
                    list.Add(string.Format("Area = A = (C1 + C2) x Ttip x 2"));
                    list.Add(string.Format("         = ({0:f4} + {1:f4}) x {2:f4} x 2", Section_C1[c], Section_C2[c], Section_Tip[c]));
                    list.Add(string.Format("         = {0:f4}", A2[c]));
                    list.Add(string.Format(""));


                    Yt2[c] = Section_Tip[c] / 2.0;
                    list.Add(string.Format("Yt = Ttip/2.0 = {0:f3} / 2.0 = {1:f4}", Section_Tip[c], Yt2[c]));
                    list.Add(string.Format(""));

                    A_Yt2[c] = A2[c] * Yt2[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A2[c], Yt2[c], A_Yt2[c]));
                    list.Add(string.Format(""));
                    A_YT_Yt2[c] = A2[c] * Yt2[c] * Yt2[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A2[c], Yt2[c], A_YT_Yt2[c]));
                    list.Add(string.Format(""));

                    Iself2[c] = A2[c] * Section_Tip[c] * Section_Tip[c] / 12.0;
                    list.Add(string.Format("Iself (xx) = Moment of Inertia = A x Ttip^2 / 12 = {0:f4} x {1:f4}^2 / 12 = {2:f4}", A2[c], Section_Tip[c], Iself2[c]));

                    list.Add(string.Format(""));
                    Iself_A_Yt_Yt2[c] = Iself2[c] + A_YT_Yt2[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself2[c], A_YT_Yt2[c], Iself_A_Yt_Yt2[c]));
                    list.Add(string.Format(""));


                    Iyy2[c] = (A2[c] * Math.Pow((Section_C1[c] + Section_C2[c]), 2)) / 12.0 +
                                A2[c] * Math.Pow((Section_Dw[c] / 2.0 - ((Section_C1[c] + Section_C2[c]) / 2)), 2.0);

                    list.Add(string.Format("I(yy) = (A x (C1+C2)^2)/12  + (A x (Dw/2 - (C1+C2)/2)^2"));
                    list.Add(string.Format("      = ({0:f4}x({1:f3}+{2:f3})^2) /12 + ({0:f4} x ({3:f3}/2 - ({1:f3}+{2:f3})/2)^2  ",
                        A2[c], Section_C1[c], Section_C2[c], Section_Dw[c]));
                    //list.Add(string.Format("      = 0.2378 + 11.787"));
                    list.Add(string.Format("      = {0:f4}", Iyy2[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 3, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));

                    A3[c] = (Section_C1[c] * (Section_Tf[c] - Section_Tip[c]));
                    list.Add(string.Format("Area = A = C1 x (Tf - Ttip)"));
                    list.Add(string.Format("         = {0:f3} x ({1:f3} - {2:f3})", Section_C1[c], Section_Tf[c], Section_Tip[c]));
                    list.Add(string.Format("         = {0:f4}", A3[c]));
                    list.Add(string.Format(""));

                    Yt3[c] = (Section_Tf[c] - Section_Tip[c]) / 3.0 + Section_Tip[c];
                    list.Add(string.Format("Yt = (Tf - Ttip)/3.0 + Ttip = ({0:f3} -{1:f3})/3.0 + {1:f3} = {2:f3}", Section_Tf[c], Section_Tip[c], Yt3[c]));
                    list.Add(string.Format(""));
                    A_Yt3[c] = A3[c] * Yt3[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A3[c], Yt3[c], A_Yt3[c]));
                    list.Add(string.Format(""));

                    A_YT_Yt3[c] = A_Yt3[c] * Yt3[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A3[c], Yt3[c], A_YT_Yt3[c]));
                    list.Add(string.Format(""));

                    Iself3[c] = (Section_C1[c] * Math.Pow((Section_Tf[c] - Section_Tip[c]), 3.0)) / 18.0;
                    list.Add(string.Format("Iself (xx) = Moment of Inertia  = (C1 x (Tf - Ttip)^3) / 18 "));
                    list.Add(string.Format("                                = ({0:f3} x ({1:f3} - {2:f3})^3)/18", Section_C1[c], Section_Tf[c], Section_Tip[c]));
                    list.Add(string.Format("                                = {0:f5}", Iself3[c]));
                    list.Add(string.Format(""));
                    Iself_A_Yt_Yt3[c] = Iself3[c] + A_YT_Yt3[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself3[c], A_YT_Yt3[c], Iself_A_Yt_Yt3[c]));
                    list.Add(string.Format(""));

                    Iyy3[c] = (((Section_Tf[c] - Section_Tip[c]) * Math.Pow(Section_C1[c], 3)) / 18.0) +
                             (Math.Pow(((Section_Dw[c] / 2.0) - Section_C2[c] - (Section_C1[c] / 3) * 2), 2)) * A3[c];


                    list.Add(string.Format("I(yy) = ((Tf - Ttip) x C1^3)/18 + (((Dw/2)-C2-(C1/3) x 2)^2) x A"));
                    list.Add(string.Format("      = (({0:f3} - {1:f3}) x {2:f3}^3)/18 + (({3:f3} /2) - {4:f3} - ({2:f3}/3) x 2)^2) x {5:f3}",
                       Section_Tf[c], Section_Tip[c], Section_C1[c], Section_Dw[c], Section_C2[c], A3[c]));
                    //list.Add(string.Format("      = 0.0396 + 2.4833"));
                    list.Add(string.Format("      = {0:f4}", Iyy3[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));

                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 4, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));
                    A4[c] = (Section_Tf[c] - Section_Tip[c]) * (Section_Tw[c] / Math.Cos(theta[c]) * 2);
                    list.Add(string.Format("Area = A = (Tf - Ttip) x Tw / COS(θ) x 2"));
                    list.Add(string.Format("         = ({0:f3} - {1:f3}) x {2:f3}/COS({3:f3}) x 2", Section_Tf[c], Section_Tip[c], Section_Tw[c], theta[c]));
                    list.Add(string.Format("         = {0:f4}", A4[c]));
                    list.Add(string.Format(""));

                    Yt4[c] = (Section_Tf[c] - Section_Tip[c]) / 2.0 + Section_Tip[c];
                    list.Add(string.Format("Yt = (Tf - Ttip)/2.0 + Ttip = ({0:f3} - {1:f3})/2.0 + {1:f3} = {2:f4}", Section_Tf[c], Section_Tip[c], Yt4[c]));
                    list.Add(string.Format(""));

                    A_Yt4[c] = A4[c] * Yt4[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A4[c], Yt4[c], A_Yt4[c]));
                    list.Add(string.Format(""));
                    A_YT_Yt4[c] = A_Yt4[c] * Yt4[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A4[c], Yt4[c], A_YT_Yt4[c]));
                    list.Add(string.Format(""));

                    Iself4[c] = (A4[c] * Math.Pow((Section_Tf[c] - Section_Tip[c]), 2.0)) / 12.0;
                    list.Add(string.Format("Iself (xx) = Moment of Inertia  = (A x (Tf - Ttip)^2) / 12 "));
                    list.Add(string.Format("                                = ({0:f4} x ({1:f4} - {2:f3})^2)/12",
                            A4[c], Section_Tf[c], Section_Tip[c]));
                    list.Add(string.Format("                                = {0:f6}", Iself4[c]));
                    list.Add(string.Format(""));
                    Iself_A_Yt_Yt4[c] = Iself4[c] + A_YT_Yt4[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself4[c], A_YT_Yt4[c], Iself_A_Yt_Yt4[c]));
                    list.Add(string.Format(""));

                    Iyy4[c] = (A4[c] * Math.Pow((A4[c] / 2 / (Section_Tf[c] - Section_Tip[c])), 2) / 12.0) +

                        Math.Pow((Section_Dw[c] / 2 - (Section_C1[c] + Section_C2[c]) - Section_Tw[c] / Math.Cos(theta[c]) / 2), 2) * A4[c];

                    list.Add(string.Format("I(yy)  = (A x (A/2/( Tf - Ttip))^2/12 + (Dw/2 - (C1+C2) - Tw/COS(θ)/2)^2 x A"));
                    list.Add(string.Format("       = ({0:f3}x({0:f3}/2/({1:f3}-{2:f3}))^2/12 + ({3:f3}/2-({4:f3}+{5:f3})-{6:f3}/COS({7:f3})/2)^2 x {0:f3}",
                        A4[c], Section_Tf[c], Section_Tip[c], Section_Dw[c], Section_C1[c], Section_C2[c], Section_Tw[c], theta[c]));
                    //list.Add(string.Format("       = 0.0042 + 0.8743"));
                    list.Add(string.Format("       = {0:f4}", Iyy4[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 5, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));

                    A5[c] = (Section_HW1[c] + 2 * Section_HW2[c]) * Section_HH1[c];

                    list.Add(string.Format("Area = A  = (HW1 + 2 x HW2) x HH1"));
                    list.Add(string.Format("          = ({0:f4} + 2 x {1:f4}) x {2:f4}", Section_HW1[c], Section_HW2[c], Section_HH1[c]));
                    list.Add(string.Format("          = {0:f4}", A5[c]));
                    list.Add(string.Format(""));

                    Yt5[c] = Section_HH1[c] / 3 + Section_Td[c];
                    list.Add(string.Format("Yt = HH1/3 + Td = {0:f4}/3 + {1:f4} = {2:f4}", Section_HH1[c], Section_Td[c], Yt5[c]));
                    list.Add(string.Format(""));
                    A_Yt5[c] = A5[c] * Yt5[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A5[c], Yt5[c], A_Yt5[c]));
                    list.Add(string.Format(""));
                    A_YT_Yt5[c] = A5[c] * Yt5[c] * Yt5[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A5[c], Yt5[c], A_YT_Yt5[c]));
                    list.Add(string.Format(""));
                    Iself5[c] = (A5[c] * Math.Pow((Section_HH1[c]), 2)) / 18.0;
                    list.Add(string.Format("Iself (xx) = Moment of Inertia = (A x (HH1)^2) / 18 = ({0:f4} x ({1:f4})^2) / 18 = {2:E3}", A5[c], Section_HH1[c], Iself5[c]));
                    list.Add(string.Format(""));

                    Iself_A_Yt_Yt5[c] = Iself5[c] + A_YT_Yt5[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:E3} + {1:f4} = {2:E3}", Iself5[c], A_YT_Yt5[c], Iself_A_Yt_Yt5[c]));
                    list.Add(string.Format(""));

                    Iyy5[c] = (Section_HH1[c] * Math.Pow((Section_HW1[c] + Section_HW2[c]), 3)) / 18.0 +
                            (A5[c] * Math.Pow((Section_CH1[c] + (Section_HW1[c] + Section_HW2[c]) / 3 * 2), 2));

                    list.Add(string.Format("I(yy)   = (HH1 x (HW1+HW2)^3)/18 + (A x (CH1 + (HW1 + HW2)/3 x 2)^2)"));
                    list.Add(string.Format("        = ({0:f4} x ({1:f4} + {2:f4})^3)/18 + ({3:f4} x ({4:f4} + ({1:f4} + {2:f4})/3 x 2)^2)",
                                                    Section_HH1[c], Section_HW1[c], Section_HW2[c], A5[c], Section_CH1[c]));
                    //list.Add(string.Format("        = 0.00031548 + 0.1527"));
                    list.Add(string.Format("        = {0:f4}", Iyy5[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 6, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));

                    A6[c] = Section_HH2[c] * Section_HW2[c];
                    list.Add(string.Format("Area = A = HH2 x HW2  = {0:f4} x {1:f4} = {2:f4}", Section_HH2[c], Section_HW2[c], A6[c]));
                    list.Add(string.Format(""));

                    Yt6[c] = (Section_HH2[c] / 3.0) + Section_HH1[c] + Section_Td[c];

                    list.Add(string.Format("Yt = HH2/3 x HH1 + Td = {0:f4}/3 + {1:f4} + {2:f4} = {3:f4}", Section_HH2[c], Section_HH1[c], Section_Td[c], Yt6[c]));

                    A_Yt6[c] = A6[c] * Yt6[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A6[c], Yt6[c], A_Yt6[c]));

                    A_YT_Yt6[c] = A6[c] * Yt6[c] * Yt6[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A6[c], Yt6[c], A_YT_Yt6[c]));

                    Iself6[c] = (A6[c] * Math.Pow((Section_HH2[c]), 2)) / 18.0;
                    list.Add(string.Format("Iself (xx) = Moment of Inertia = (A x (HH2)^2) / 18 = ({0:f4} x ({1:f4})^2) / 18 = {2:f4}", A6[c], Section_HH2[c], Iself6[c]));

                    list.Add(string.Format(""));

                    Iself_A_Yt_Yt6[c] = Iself6[c] + A_YT_Yt6[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself6[c], A_YT_Yt6[c], Iself_A_Yt_Yt6[c]));

                    Iyy6[c] = ((Section_HH2[c] * Math.Pow(Section_HW2[c], 3)) / 18.00) +
                                     (A6[c] * Math.Pow((Section_CH1[c] + Section_HW1[c] + Section_HW2[c] / 3 * 2), 2));

                    list.Add(string.Format("I(yy)   = (HH2 x HW2^3)/18 + (A x (CH1 + HW1 + HW2/3 x 2)^2)"));
                    list.Add(string.Format("        = ({0:f4} x {1:f4}^3)/18 + ({2:f4} x ({3:f4} + {4:f4} + {1:f4}/3 x 2)^2)",
                                                    Section_HH2[c], Section_HW2[c], A6[c], Section_CH1[c], Section_HW1[c]));
                    //list.Add(string.Format("        = 0.0 + 0.0"));
                    list.Add(string.Format("        = {0:f4}", Iyy6[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));

                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 7, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));

                    A7[c] = 2 * (Section_D1[c] + Section_D2[c] - Section_Ts[c]) * Section_Tw[c] / Math.Cos(theta[c]);

                    list.Add(string.Format("Area = A = 2 x (D1+D2-Ts) x Tw/ COS(θ)"));
                    list.Add(string.Format("         = 2 x ({0:f4}+{1:f4}-{2:f4}) x {3:f4} / COS({4:f4})",
                        Section_D1[c], Section_D2[c], Section_Ts[c], Section_Tw[c], theta[c]));
                    list.Add(string.Format("         = {0:f4}", A7[c]));
                    list.Add(string.Format(""));

                    Yt7[c] = Section_Tf[c] + (Section_D1[c] + Section_D2[c] - Section_Ts[c]) / 2.0;
                    list.Add(string.Format("Yt = Tf + (D1 + D2 - Ts)/2 = {0:f4} + ({1:f4} + {2:f4} - {3:f4})/2 = {4:f4}",
                        Section_Tf[c], Section_D1[c], Section_D2[c], Section_Ts[c], Yt7[c]));

                    A_Yt7[c] = A7[c] * Yt7[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A7[c], Yt7[c], A_Yt7[c]));
                    A_YT_Yt7[c] = A7[c] * Yt7[c] * Yt7[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A7[c], Yt7[c], A_Yt7[c]));

                    Iself7[c] = ((Section_Tw[c] / Math.Cos(theta[c])) * Math.Pow((Section_D1[c] + Section_D2[c] - Section_Ts[c]), 3) / 6);

                    list.Add(string.Format("Iself (xx) = Moment of Inertia "));
                    list.Add(string.Format("           = ((Tw/COS(θ)) x (D1+D2-Ts)^3/6"));
                    list.Add(string.Format("           = (({0:f4}/COS({1:f4})) x ({2:f4} + {3:f4} - {4:f4})^3/6",
                        Section_Tw[c], theta[c], Section_D1[c], Section_D2[c], Section_Ts[c]));
                    list.Add(string.Format("           = {0:f6}", Iself7[c]));
                    list.Add(string.Format(""));

                    Iself_A_Yt_Yt7[c] = Iself7[c] + A_YT_Yt7[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}",
                        Iself7[c], A_YT_Yt7[c], Iself_A_Yt_Yt7[c]));


                    Iyy7[c] = ((Section_D1[c] + Section_D2[c] - Section_Ts[c]) * Math.Pow((Section_Tw[c] / Math.Cos(theta[c])), 3)) / 6

                                + A7[c] * Math.Pow((Section_Dw[c] / 2 - Section_C1[c] - Section_C2[c] -
                                (Section_D1[c] + Section_D2[c] - Section_Ts[c]) * Math.Tan(theta[c]) / 2 - Section_Tw[c] / 2 / Math.Cos(theta[c])), 2);


                    list.Add(string.Format(""));
                    list.Add(string.Format("I(yy)   = ((D1+D2-Ts) x (Tw/COS(θ))^3)/6 "));
                    list.Add(string.Format("           + A x (Dw/2 - C1 - C2 - (D1+D2-Ts) x TAN(θ)/2 - Tw/2/COS(D θ))^2"));
                    list.Add(string.Format(""));

                    list.Add(string.Format("        = (({0:f4} + {1:f4} - {2:f4}) x ({3:f4}/COS({4:f4}))^3)/6 ",
                                                    Section_D1[c], Section_D2[c], Section_Ts[c], Section_Tw[c], theta[c]));

                    list.Add(string.Format("          + {0:f4} x ({1:f4}/2 - {2:f4} - {3:f4} - ({4:f4} + {5:f4} - {6:f4}) x TAN({7:f4})/2 - {8:f4}/2/COS({7:f4}))^2",
                                                    A7[c], Section_Dw[c], Section_C1[c], Section_C2[c], Section_D1[c], Section_D2[c], Section_Ts[c], theta[c], Section_Tw[c]));
                    list.Add(string.Format("        = {0:f4}", Iyy7[c]));
                    //list.Add(string.Format("        = 0.0686 + 11.6972"));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 8, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));

                    A8[c] = (Section_SW[c] - Section_K1[c] * 2) * Section_Ts[c];

                    list.Add(string.Format("Area = A = (Sw-K1 x 2) x Ts = ({0:f4}-{1:f4} x 2) x {2:f4} = {3:f4}", Section_SW[c], Section_K1[c], Section_Ts[c], A8[c]));

                    list.Add(string.Format(""));
                    Yt8[c] = Section_D[c] - Section_Ts[c] / 2.0;
                    list.Add(string.Format("Yt = D - Ts/2 = {0:f4} - {1:f4}/2 = {2:f4}", Section_D[c], Section_Ts[c], Yt8[c]));

                    A_Yt8[c] = A8[c] * Yt8[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A8[c], Yt8[c], A_Yt8[c]));

                    A_YT_Yt8[c] = A8[c] * Yt8[c] * Yt8[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A8[c], Yt8[c], A_Yt8[c]));


                    Iself8[c] = (A8[c] * Math.Pow(Section_Ts[c], 2)) / 12.0;
                    list.Add(string.Format("Iself (xx) = Moment of Inertia"));
                    //list.Add(string.Format("  = (D95 x D34^2) / 12"));
                    list.Add(string.Format("           = (A x Ts^2) / 12"));
                    list.Add(string.Format("           = ({0:f4} x {1:f4}^2) / 12", A8[c], Section_Ts[c]));
                    list.Add(string.Format("           = {0:f6}", Iself8[c]));
                    list.Add(string.Format(""));

                    Iself_A_Yt_Yt8[c] = Iself8[c] + A_YT_Yt8[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself8[c], A_YT_Yt8[c], Iself_A_Yt_Yt8[c]));

                    Iyy8[c] = (Section_Ts[c] * Math.Pow((Section_SW[c] - 2 * Section_K1[c]), 3)) / 12.0;

                    list.Add(string.Format("I(yy)   = (Ts x (Sw - 2 x K1)^3) / 12"));
                    list.Add(string.Format("        = {0:f4} x ({1:f4} - 2 x {2:f4})^3 / 12", Section_Ts[c], Section_SW[c], Section_K1[c]));
                    list.Add(string.Format("        = {0:f4}", Iyy8[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 9, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));

                    A9[c] = Section_K1[c] * Section_D2[c];
                    list.Add(string.Format("Area = A = K1 x D2 = {0:f4} x {1:f4} = {2:f4}", Section_K1[c], Section_D2[c], A9[c]));
                    list.Add(string.Format(""));

                    Yt9[c] = Section_D[c] - Section_D2[c] / 3.0;
                    list.Add(string.Format("Yt = D - D2/3 = {0:f4} - {1:f4}/2 = {2:f4}", Section_D[c], Section_D2[c], Yt9[c]));

                    A_Yt9[c] = A9[c] * Yt9[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A9[c], Yt9[c], A_Yt9[c]));
                    A_YT_Yt9[c] = A9[c] * Yt9[c] * Yt9[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4}  x {1:f4} = {2:f4}", A9[c], Yt9[c], A_YT_Yt9[c]));

                    Iself9[c] = (Section_K1[c] * Math.Pow(Section_D2[c], 3)) / 18;

                    list.Add(string.Format("Iself (xx) = Moment of Inertia         "));
                    list.Add(string.Format("           = (K1 x D2^3) / 18"));
                    list.Add(string.Format("           = ({0:f4} x {1:f4}^2) / 18", Section_K1[c], Section_D2[c]));
                    list.Add(string.Format("           = {0:f6}", Iself9[c]));
                    list.Add(string.Format(""));

                    Iself_A_Yt_Yt9[c] = Iself9[c] + A_YT_Yt9[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself9[c], A_YT_Yt9[c], Iself_A_Yt_Yt9[c]));



                    Iyy9[c] = (Section_D2[c] * Math.Pow(Section_K1[c], 3)) / 18.0 + A9[c] * Math.Pow((Section_SW[c] / 2 - Section_K1[c] / 3), 2);
                    list.Add(string.Format("I(yy)   = (D2 x K1^3) / 18 + A x (Sw/2 - K1/3)^2"));
                    list.Add(string.Format("        = ({0:f4} x {1:f4}^3) / 18 + {2:f4} x ({3:f4}/2 -{1:f4}/3)^2",
                                                        Section_D2[c], Section_K1[c], A9[c], Section_SW[c]));
                    list.Add(string.Format("        = {0:f4}", Iyy9[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 10, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format(""));

                    A10[c] = Section_Ts[c] * Section_K2[c];
                    list.Add(string.Format("Area = A = Ts x K2"));
                    list.Add(string.Format("         = {0:f4} x {1:f4}", Section_Ts[c], Section_K2[c]));
                    list.Add(string.Format("         = {0:f4}", A10[c]));
                    list.Add(string.Format(""));

                    Yt10[c] = Section_D[c] - (Section_Ts[c] / 3) * 2.0;

                    list.Add(string.Format("Yt = D - (Ts/3) x 2 = {0:f4} - ({1:f4}/3) x 2 = {2:f4}",
                        Section_D[c], Section_Ts[c], Yt10[c]));

                    A_Yt10[c] = A10[c] * Yt10[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A10[c], Yt10[c], A_Yt10[c]));
                    A_YT_Yt10[c] = A10[c] * Yt10[c] * Yt10[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A10[c], Yt10[c], A_YT_Yt10[c]));


                    Iself10[c] = (Section_K2[c] * Math.Pow(Section_Ts[c], 3)) / 18.0;

                    list.Add(string.Format("Iself (xx) = Moment of Inertia "));
                    list.Add(string.Format("           = (K2 x Ts^3) / 18"));
                    list.Add(string.Format("           = ({0:f4} x {1:f4}^3) / 18", Section_K2[c], Section_Ts[c]));
                    list.Add(string.Format("           = {0:f5}", Iself10[c]));
                    list.Add(string.Format(""));

                    Iself_A_Yt_Yt10[c] = Iself10[c] + A_YT_Yt10[c];


                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f5} + {1:f4} = {2:f5}", Iself10[c], A_YT_Yt10[c], Iself_A_Yt_Yt10[c]));


                    Iyy10[c] = (Section_Ts[c] * Math.Pow(Section_K2[c], 3)) / 18.0 + A10[c] * Math.Pow((Section_SW[c] / 2 - Section_K1[c] + Section_K2[c] / 3), 2);

                    list.Add(string.Format("I(yy)   = (Ts x K2^3) / 18 + A x (Sw/2 - K1 + K2/3)^2"));
                    list.Add(string.Format("        = ({0:f4} x {1:f4}^3) / 18 + {2:f4} x ({3:f4}/2 - {4:f4} + {1:f4}/3)^2",
                                                   Section_Ts[c], Section_K2[c], A10[c], Section_SW[c], Section_K1[c]));
                    list.Add(string.Format("        = {0:f4}", Iyy10[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("---------------------------------------------------"));
                    list.Add(string.Format("Cross Section Part 11, at {0}:", part_text));
                    list.Add(string.Format("---------------------------------------------------"));


                    A11[c] = Section_HW3[c] * Section_HH3[c];
                    list.Add(string.Format("Area = A = HW3 x HH3 = {0:f4} x {1:f4} = {2:f4}", Section_HW3[c], Section_HH3[c], A11[c]));
                    list.Add(string.Format(""));

                    Yt11[c] = Section_D[c] - Section_Ts[c] - (Section_HH3[c] / 3);


                    list.Add(string.Format("Yt = D - Ts - (HH3/3) = {0:f4} - {1:f4} - ({2:f4}/3) = {3:f4}",
                        Section_D[c], Section_Ts[c], Section_HH3[c], Yt11[c]));

                    A_Yt11[c] = A11[c] * Yt11[c];
                    list.Add(string.Format("A x Yt = {0:f4} x {1:f4} = {2:f4}", A11[c], Yt11[c], A_Yt11[c]));
                    A_YT_Yt11[c] = A11[c] * Yt11[c] * Yt11[c];
                    list.Add(string.Format("A x Yt x Yt = {0:f4} x {1:f4} x {1:f4} = {2:f4}", A11[c], Yt11[c], A_YT_Yt11[c]));

                    list.Add(string.Format("Iself (xx) = Moment of Inertia         "));

                    Iself11[c] = (Section_HW3[c] * Math.Pow(Section_HH3[c], 3)) / 18.0;

                    list.Add(string.Format("  = (HW3 x HH3^3) / 18"));
                    list.Add(string.Format("  = ({0:f4} x {1:f4}^3) / 18", Section_HW3[c], Section_HH3[c]));
                    list.Add(string.Format("  = {0:f6}", Iself11[c]));
                    list.Add(string.Format(""));

                    Iself_A_Yt_Yt11[c] = Iself11[c] + A_YT_Yt11[c];
                    list.Add(string.Format("Iself (xx) + A x Yt x Yt = {0:f4} + {1:f4} = {2:f4}", Iself11[c], A_YT_Yt11[c], Iself_A_Yt_Yt11[c]));


                    Iyy11[c] = (Section_HH3[c] * Math.Pow(Section_HW3[c], 3) / 18) +
                               A11[c] * Math.Pow((Section_SW[c] / 2 - Section_K1[c] + Section_K2[c] - Section_Tw[c] / Math.Cos(theta[c]) - Section_HW3[c] / 3), 2);


                    list.Add(string.Format("I(yy)   = (HH3 xHW3^3)/18 + A x (Sw/2 - K1 + K2 - Tw/COS(θ) - HW3/3)^2"));
                    list.Add(string.Format("        = ({0:f4} x {1:f4}^3)/18 + {2:f4} x ({3:f4}/2 - {4:f4} + {5:f4} - {6:f4}/COS({7:f4}) - {1:f4}/3)^2",
                                Section_HH3[c], Section_HW3[c], A11[c], Section_SW[c], Section_K1[c], Section_K2[c], Section_Tw[c], theta[c]));
                    list.Add(string.Format("        = {0:f4}", Iyy11[c]));
                    list.Add(string.Format(""));

                    c++;
                }
                while (c < 6);

                list.Add(string.Format("TABLE 3:  Calculated values for Section Properties of various parts in the Cross Section at relevant Sections"));
                list.Add(string.Format("---------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));


                format = "{0,-18:f4} {1,-15:f4} {2,12:f4} {3,12:f4} {4,12:f4} {5,12:f4} {6,12:f4} {7,12:f4}";
                //list.Add(string.Format("                At Support    At ‘D’        L/8          L/4           3L/8          L/2"));
                list.Add(string.Format(format, "", "", "At Support", "At 'D'", "L/8", "L/4", "3L/8", "L/2"));



                for (int i = 0; i < list_A.Count; i++)
                {

                    A1 = new PSC_Force_Data();

                    A1 = list_A[i];
                    Yt1 = list_Yt[i];
                    A_Yt1 = list_A_Yt[i];
                    A_YT_Yt1 = list_A_YT_Yt[i];
                    Iself1 = list_Iself[i];
                    Iself_A_Yt_Yt1 = list_Iself_A_Yt_Yt[i];
                    Iyy1 = list_Iyy[i];

                    list.Add(string.Format("".PadLeft(108, '-')));
                    list.Add(string.Format(format, "Part " + (i + 1), "AREA", A1[0], A1[1], A1[2], A1[3], A1[4], A1[5]));
                    list.Add(string.Format(format, "", "Yt", Yt1[0], Yt1[1], Yt1[2], Yt1[3], Yt1[4], Yt1[5]));
                    list.Add(string.Format(format, "", "A.Yt", A_Yt1[0], A_Yt1[1], A_Yt1[2], A_Yt1[3], A_Yt1[4], A_Yt1[5]));
                    list.Add(string.Format(format, "", "A.Yt^2", A_YT_Yt1[0], A_YT_Yt1[1], A_YT_Yt1[2], A_YT_Yt1[3], A_YT_Yt1[4], A_YT_Yt1[5]));
                    list.Add(string.Format(format, "", "Iself -(xx)", Iself1[0], Iself1[1], Iself1[2], Iself1[3], Iself1[4], Iself1[5]));
                    list.Add(string.Format(format, "", "Iself + A.Yt^2", Iself_A_Yt_Yt1[0], Iself_A_Yt_Yt1[1], Iself_A_Yt_Yt1[2], Iself_A_Yt_Yt1[3], Iself_A_Yt_Yt1[4], Iself_A_Yt_Yt1[5]));
                    list.Add(string.Format(format, "", "Iself-(yy)", Iyy1[0], Iyy1[1], Iyy1[2], Iyy1[3], Iyy1[4], Iyy1[5]));
                }
                list.Add(string.Format("".PadLeft(108, '-')));

                A1 = list_A[0];
                Yt1 = list_Yt[0];
                A_Yt1 = list_A_Yt[0];
                A_YT_Yt1 = list_A_YT_Yt[0];
                Iself1 = list_Iself[0];
                Iself_A_Yt_Yt1 = list_Iself_A_Yt_Yt[0];
                Iyy1 = list_Iyy[0];
                #endregion STEP 1

                #region STEP 2 : Section Properties:

                list.Add(string.Format(""));
                //list.Add(string.Format("(This will continue for all 11 Parts, at SUPPORT, as calculated below)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 2 : Section Properties :"));
                list.Add(string.Format("------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Calculations :"));
                list.Add(string.Format("--------------"));

                c = 0;

                for (int i = 0; i < list_A.Count; i++)
                {
                    A += list_A[i];
                    Yt += list_Yt[i];
                    A_Yt += list_A_Yt[i];
                    A_YT_Yt += list_A_YT_Yt[i];
                    Iself += list_Iself[i];
                    Iself_A_Yt_Yt += list_Iself_A_Yt_Yt[i];
                    Iyy += list_Iyy[i];
                }
                do
                {

                    if (c == 0) part_text = "SUPPORT";
                    else if (c == 1) part_text = "'D'";
                    else if (c == 2) part_text = "L/8";
                    else if (c == 3) part_text = "L/4";
                    else if (c == 4) part_text = "3L/8";
                    else if (c == 5) part_text = "L/2";

                    list.Add(string.Format(""));
                    list.Add(string.Format("Values at {0} :", part_text));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Total [AREA] = A = A1+A2+A3+A4+A5+A6+A7+A8+A9+A10+A11 = {0:f5}", A[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Total [A x Yt] = [A x Yt]1 + [A x Yt]2 + [A x Yt]3 + [A x Yt]4 + [A x Yt]5"));
                    list.Add(string.Format("                 + [A x Yt]6 + [A x Yt]7 + [A x Yt]8 + [A x Yt]9 + [A x Yt]10  "));
                    list.Add(string.Format("                 + [A x Yt]11"));
                    list.Add(string.Format(""));
                    list.Add(string.Format("                 = {0:f4}", A_Yt[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Total [Iself + A x Yt^2] = [Iself + A x Yt^2]1 + [Iself + A x Yt^2]2 + [Iself + A x Yt^2]3 + [Iself + A x Yt^2]4"));
                    list.Add(string.Format("                           + [Iself + A x Yt^2]5 + [Iself + A x Yt^2]6 + [Iself + A x Yt^2]7 + [Iself + A x Yt^2]8"));
                    list.Add(string.Format("                           + [Iself + A x Yt^2]9  + [Iself + A x Yt^2]10 + [Iself + A x Yt^2]11 "));
                    list.Add(string.Format(""));
                    list.Add(string.Format("                          = {0:f4} ", A_YT_Yt[c]));
                    list.Add(string.Format(""));

                    Yt[c] = A_Yt[c] / A[c];
                    list.Add(string.Format("Yt = Total [A x Yt] / Total [AREA] = {0:f4}", Yt[c]));
                    list.Add(string.Format(""));

                    Yb[c] = Section_D[c] - Yt[c];
                    list.Add(string.Format("Yb = D - Yt = {0:f4} - {1:f4} = {2:f4}", Section_D[c], Yt[c], Yb[c]));
                    list.Add(string.Format(""));
                    Ixx[c] = Iself_A_Yt_Yt[c] - A[c] * Yt[c] * Yt[c];
                    list.Add(string.Format("Ixx = (Total [Iself + A x Yt^2) - (Total [AREA]) x (Yt)^2 = {0:f4}", Ixx[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Iyy = [Iyy]1 + [Iyy]2 + [Iyy]3 + [Iyy]4 + [Iyy]5"));
                    list.Add(string.Format("      + [Iyy]6 + [Iyy]7 + [Iyy]8 + [Iyy]9 + [Iyy]10 + [Iyy]11"));
                    list.Add(string.Format("    = {0:f4}", Iyy[c]));
                    list.Add(string.Format(""));

                    Zt[c] = Ixx[c] / Yt[c];
                    list.Add(string.Format("Zt = Ixx / Yt = {0:F5} / {1:f5} = {2:f5}", Ixx[c], Yt[c], Zt[c]));
                    list.Add(string.Format(""));
                    Zb[c] = Ixx[c] / Yb[c];
                    list.Add(string.Format("Zb = Ixx / Yb = {0:F5} / {1:f5} = {2:f5}", Ixx[c], Yb[c], Zb[c]));
                    list.Add(string.Format(""));

                    c++;
                }
                while (c < 6);
                list.Add(string.Format(""));
                list.Add(string.Format("-------------------------------------------"));
                list.Add(string.Format("TABLE 4:  Final Section Properties Table :"));
                list.Add(string.Format("-------------------------------------------"));
                list.Add(string.Format("".PadLeft(112, '-')));
                list.Add(string.Format(format, "", "Unit", "At Support", "At 'D'", "L/8", "L/4", "3L/8", "L/2"));
                list.Add(string.Format("".PadLeft(112, '-')));
                list.Add(string.Format(format, "AREA", "sq.m", A[0], A[1], A[2], A[3], A[4], A[5]));
                list.Add(string.Format(format, SYMBOLS.SIGMA_SUM + "A.Yt", "m^3", A_Yt[0], A_Yt[1], A_Yt[2], A_Yt[3], A_Yt[4], A_Yt[5]));
                list.Add(string.Format(format, SYMBOLS.SIGMA_SUM + "Iself+A.Yt^2", "sq.sq.m", Iself_A_Yt_Yt[0], Iself_A_Yt_Yt[1], Iself_A_Yt_Yt[2], Iself_A_Yt_Yt[3], Iself_A_Yt_Yt[4], Iself_A_Yt_Yt[5]));
                list.Add(string.Format(format, "Yt", "m", Yt[0], Yt[1], Yt[2], Yt[3], Yt[4], Yt[5]));
                list.Add(string.Format(format, "Yb", "m", Yb[0], Yb[1], Yb[2], Yb[3], Yb[4], Yb[5]));
                list.Add(string.Format(format, "Ix-x", "sq.sq.m", Ixx[0], Ixx[1], Ixx[2], Ixx[3], Ixx[4], Ixx[5]));
                list.Add(string.Format(format, "Iy-y", "sq.sq.m", Iyy[0], Iyy[1], Iyy[2], Iyy[3], Iyy[4], Iyy[5]));
                list.Add(string.Format(format, "Zt", "m^3", Zt[0], Zt[1], Zt[2], Zt[3], Zt[4], Zt[5]));
                list.Add(string.Format(format, "Zb", "m^3", Zb[0], Zb[1], Zb[2], Zb[3], Zb[4], Zb[5]));
                list.Add(string.Format("".PadLeft(112, '-')));

                #endregion STEP 2

                #region STEP 3 : Design Bending Moments and Shear Forces

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format("STEP 3 : Design Bending Moments and Shear Forces "));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));
                format = "{0,-38:f4} {1,12:f3} {2,12:f3} {3,12:f3} {4,12:f3} {5,12:f3} {6,12:f3}";
                list.Add(string.Format(""));
                list.Add(string.Format("TABLE 5: Bending Moments at Various Span Sections (Ton Metres)"));
                list.Add(string.Format("--------------------------------------------------------------"));

                list.Add(string.Format("".PadLeft(120, '-')));
                list.Add(string.Format(format,
                    "       Span Section ---->",
                    "At Support",
                    "Deff  from",
                    "1/8 th",
                    "1/4 th",
                    "3/8 th",
                    "Mid Span"));


                list.Add(string.Format(format,
                    "Load Type",
                    "Section ",
                    "Support",
                    "Section",
                    "Section",
                    "Section",
                    "Section"));
                list.Add(string.Format("".PadLeft(120, '-')));


                //list.Add(string.Format("Dead Load / Self Weight (DL)        0.0        779.0        1695.0        2865.0        3563.0        3795.0        "));
                list.Add(string.Format(format,
                    "Dead Load / Self Weight (DL)",
                    forces.FRC_DL_Moment[0],
                    forces.FRC_DL_Moment[1],
                    forces.FRC_DL_Moment[2],
                    forces.FRC_DL_Moment[3],
                    forces.FRC_DL_Moment[4],
                    forces.FRC_DL_Moment[5]));




                //list.Add(string.Format("Superimposed Dead Load (SIDL)        0.0        203.2        448.4        769.1        961.5        1025.6        "));
                list.Add(string.Format(format,
                  "Superimposed Dead Load (SIDL)",
                  forces.FRC_SIDL_Moment[0],
                  forces.FRC_SIDL_Moment[1],
                  forces.FRC_SIDL_Moment[2],
                  forces.FRC_SIDL_Moment[3],
                  forces.FRC_SIDL_Moment[4],
                  forces.FRC_SIDL_Moment[5]));

                //list.Add(string.Format("Live Load / Moving Vehicle Load (LL)        0.0        210.2        562.4        933.8        1148.9        1186.6        "));
                list.Add(string.Format(format,
                  "Live Load / Moving Vehicle Load (LL)",
                  forces.FRC_LL_Moment[0],
                  forces.FRC_LL_Moment[1],
                  forces.FRC_LL_Moment[2],
                  forces.FRC_LL_Moment[3],
                  forces.FRC_LL_Moment[4],
                  forces.FRC_LL_Moment[5]));

                //list.Add(string.Format("Total Bending Moment        0.0        1192.0        2706.0        4568.0        5673.0        6007.0        "));

                list.Add(string.Format("".PadLeft(120, '-')));
                list.Add(string.Format(format,
                 "Total Bending Moment",
                 forces.FRC_Total_Moment[0],
                 forces.FRC_Total_Moment[1],
                 forces.FRC_Total_Moment[2],
                 forces.FRC_Total_Moment[3],
                 forces.FRC_Total_Moment[4],
                 forces.FRC_Total_Moment[5]));
                list.Add(string.Format("".PadLeft(120, '-')));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("TABLE 6: Shear Forces at Various Span Sections (Ton)"));
                list.Add(string.Format("--------------------------------------------------------------------------"));
                list.Add(string.Format("".PadLeft(120, '-')));


                list.Add(string.Format(format,
                    "       Span Section ---->",
                    "At Support",
                    "Deff  from",
                    "1/8 th",
                    "1/4 th",
                    "3/8 th",
                    "Mid Span"));


                list.Add(string.Format(format,
                    "Load Type",
                    "Section ",
                    "Support",
                    "Section",
                    "Section",
                    "Section",
                    "Section"));
                list.Add(string.Format("".PadLeft(120, '-')));




                //list.Add(string.Format("Dead Load / Self Weight (DL)        0.0        779.0        1695.0        2865.0        3563.0        3795.0        "));
                list.Add(string.Format(format,
                    "Dead Load / Self Weight (DL)",
                    forces.FRC_DL_Shear[0],
                    forces.FRC_DL_Shear[1],
                    forces.FRC_DL_Shear[2],
                    forces.FRC_DL_Shear[3],
                    forces.FRC_DL_Shear[4],
                    forces.FRC_DL_Shear[5]));




                //list.Add(string.Format("Superimposed Dead Load (SIDL)        0.0        203.2        448.4        769.1        961.5        1025.6        "));
                list.Add(string.Format(format,
                  "Superimposed Dead Load (SIDL)",
                  forces.FRC_SIDL_Shear[0],
                  forces.FRC_SIDL_Shear[1],
                  forces.FRC_SIDL_Shear[2],
                  forces.FRC_SIDL_Shear[3],
                  forces.FRC_SIDL_Shear[4],
                  forces.FRC_SIDL_Shear[5]));

                //list.Add(string.Format("Live Load / Moving Vehicle Load (LL)        0.0        210.2        562.4        933.8        1148.9        1186.6        "));
                list.Add(string.Format(format,
                  "Live Load / Moving Vehicle Load (LL)",
                  forces.FRC_LL_Shear[0],
                  forces.FRC_LL_Shear[1],
                  forces.FRC_LL_Shear[2],
                  forces.FRC_LL_Shear[3],
                  forces.FRC_LL_Shear[4],
                  forces.FRC_LL_Shear[5]));

                //list.Add(string.Format("Total Bending Moment        0.0        1192.0        2706.0        4568.0        5673.0        6007.0        "));

                list.Add(string.Format("".PadLeft(120, '-')));
                list.Add(string.Format(format,
                 "Total Shear Forces",
                 forces.FRC_Total_Shear[0],
                 forces.FRC_Total_Shear[1],
                 forces.FRC_Total_Shear[2],
                 forces.FRC_Total_Shear[3],
                 forces.FRC_Total_Shear[4],
                 forces.FRC_Total_Shear[5]));
                list.Add(string.Format(""));
                list.Add(string.Format("".PadLeft(120, '-')));





                //list.Add(string.Format("                          Span Section Load Type        At Support Section        Deff  from Support        1/8 th Span Section        1/4 th Span Section        3/8 th Span Section        Mid Span Section        "));
                //list.Add(string.Format("Dead Load / Self Weight (DL)        336.0        291.0        239.0        156.0        78.0        0.0        "));
                //list.Add(string.Format("Superimposed Dead Load (SIDL)        87.8        77.0        64.5        43.0        21.5        0.0        "));
                //list.Add(string.Format("Live Load / Moving Vehicle Load (LL)        113.1        97.9        80.6        69.9        31.0        10.2        "));
                //list.Add(string.Format("Total Shear Forces        536.9        465.9        384.1        268.9        130.5        10.2        "));
                //list.Add(string.Format("                           Span Section   Load Type        At Support Section        Deff  from Support        1/8 th Span Section        1/4 th Span Section        3/8 th Span Section        Mid Span Section        "));
                //list.Add(string.Format("Dead Load / Self Weight (DL)        0.0        779.0        1695.0        2865.0        3563.0        3795.0        "));
                //list.Add(string.Format("Superimposed Dead Load (SIDL)        0.0        203.2        448.4        769.1        961.5        1025.6        "));
                //list.Add(string.Format("Live Load / Moving Vehicle Load (LL)        0.0        210.2        562.4        933.8        1148.9        1186.6        "));
                //list.Add(string.Format("Total Bending Moment        0.0        1192.0        2706.0        4568.0        5673.0        6007.0        "));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                           Span Section   Load Type        At Support Section        Deff  from Support        1/8 th Span Section        1/4 th Span Section        3/8 th Span Section        Mid Span Section        "));
                //list.Add(string.Format("Dead Load / Self Weight (DL)        0.0        779.0        1695.0        2865.0        3563.0        3795.0        "));
                //list.Add(string.Format("Superimposed Dead Load (SIDL)        0.0        203.2        448.4        769.1        961.5        1025.6        "));
                //list.Add(string.Format("Live Load / Moving Vehicle Load (LL)        0.0        210.2        562.4        933.8        1148.9        1186.6        "));
                //list.Add(string.Format("Total Bending Moments        0.0        1192.0        2706.0        4568.0        5673.0        6007.0        "));



                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("TABLE 7: Torsional Moments at Various Span Sections (Ton Metres)"));
                list.Add(string.Format("----------------------------------------------------------------"));
                list.Add(string.Format("".PadLeft(120, '-')));


                list.Add(string.Format(format,
                    "       Span Section ---->",
                    "At Support",
                    "Deff  from",
                    "1/8 th",
                    "1/4 th",
                    "3/8 th",
                    "Mid Span"));


                list.Add(string.Format(format,
                    "Load Type",
                    "Section ",
                    "Support",
                    "Section",
                    "Section",
                    "Section",
                    "Section"));
                list.Add(string.Format("".PadLeft(120, '-')));




                //list.Add(string.Format("Dead Load / Self Weight (DL)        0.0        779.0        1695.0        2865.0        3563.0        3795.0        "));
                list.Add(string.Format(format,
                    "Dead Load / Self Weight (DL)",
                    forces.FRC_DL_Torsion[0],
                    forces.FRC_DL_Torsion[1],
                    forces.FRC_DL_Torsion[2],
                    forces.FRC_DL_Torsion[3],
                    forces.FRC_DL_Torsion[4],
                    forces.FRC_DL_Torsion[5]));




                //list.Add(string.Format("Superimposed Dead Load (SIDL)        0.0        203.2        448.4        769.1        961.5        1025.6        "));
                list.Add(string.Format(format,
                  "Superimposed Dead Load (SIDL)",
                  forces.FRC_SIDL_Torsion[0],
                  forces.FRC_SIDL_Torsion[1],
                  forces.FRC_SIDL_Torsion[2],
                  forces.FRC_SIDL_Torsion[3],
                  forces.FRC_SIDL_Torsion[4],
                  forces.FRC_SIDL_Torsion[5]));

                //list.Add(string.Format("Live Load / Moving Vehicle Load (LL)        0.0        210.2        562.4        933.8        1148.9        1186.6        "));
                list.Add(string.Format(format,
                  "Live Load / Moving Vehicle Load (LL)",
                  forces.FRC_LL_Torsion[0],
                  forces.FRC_LL_Torsion[1],
                  forces.FRC_LL_Torsion[2],
                  forces.FRC_LL_Torsion[3],
                  forces.FRC_LL_Torsion[4],
                  forces.FRC_LL_Torsion[5]));

                //list.Add(string.Format("Total Bending Moment        0.0        1192.0        2706.0        4568.0        5673.0        6007.0        "));

                list.Add(string.Format("".PadLeft(120, '-')));
                list.Add(string.Format(format,
                 "Total Torsional Moments",
                 forces.FRC_Total_Torsion[0],
                 forces.FRC_Total_Torsion[1],
                 forces.FRC_Total_Torsion[2],
                 forces.FRC_Total_Torsion[3],
                 forces.FRC_Total_Torsion[4],
                 forces.FRC_Total_Torsion[5]));
                list.Add(string.Format("".PadLeft(120, '-')));
                list.Add(string.Format("".PadLeft(120, '-')));



                //list.Add(string.Format(""));
                //list.Add(string.Format("                        Span Section Load Type        At Support Section        Deff  from Support        1/8 th Span Section        1/4 th Span Section        3/8 th Span Section        Mid Span Section        "));
                //list.Add(string.Format("Dead Load / Self Weight (DL)                                                        "));
                //list.Add(string.Format("Superimposed Dead Load (SIDL)                                                        "));
                //list.Add(string.Format("Live Load / Moving Vehicle Load (LL)                                                        "));
                //list.Add(string.Format("Total Torsional Moments                                                        "));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Load factors : "));
                list.Add(string.Format("-----------------------"));
                list.Add(string.Format(""));

                PSC_Force_Data M_ult = new PSC_Force_Data(6); // Bending Moments
                PSC_Force_Data V_ult = new PSC_Force_Data(6); // Shear Forces
                PSC_Force_Data T_ult = new PSC_Force_Data(6); // Torsion

                list.Add(string.Format("FactDL = {0:f4}", FactDL));
                list.Add(string.Format("FactSIDL = {0:f4}", FactSIDL));
                list.Add(string.Format("FactLL = {0:f4}", FactLL));
                list.Add(string.Format(""));
                //list.Add(string.Format("Sample Calculation for Ultimate BM, SF and TM at Section at Deff from the Support"));
                list.Add(string.Format(""));

                c = 0;

                do
                {
                    if (c == 0) part_text = "Support";
                    else if (c == 1) part_text = "Deff from Support";
                    else if (c == 2) part_text = "1/8 th Span Section";
                    else if (c == 3) part_text = "1/4 th Span Section";
                    else if (c == 4) part_text = "3/8 th Span Section";
                    else if (c == 5) part_text = "Mid Section";


                    list.Add(string.Format(""));
                    list.Add(string.Format("".PadLeft(100, '-')));
                    list.Add(string.Format("Calculation for Ultimate BM, SF and TM at {0}", part_text));
                    list.Add(string.Format("".PadLeft(100, '-')));
                    list.Add(string.Format(""));
                    list.Add(string.Format("For Bending Moment (BM)"));
                    list.Add(string.Format("-----------------------"));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Bending Moment for Dead Load (DL) at {0} = {1:f4} T-m.", part_text, forces.FRC_DL_Moment[c]));
                    list.Add(string.Format("Bending Moment for Super Imposed Dead Load (SIDL) at {0} = {1:f4} T-m.", part_text, forces.FRC_SIDL_Moment[c]));
                    list.Add(string.Format("Bending Moment for Live Load (LL) at {0} = {1:f4} T-m.", part_text, forces.FRC_LL_Moment[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Therefore Design Ultimate Bending Moment at Section at {0}", part_text));

                    M_ult[c] = forces.FRC_DL_Moment[c] * 1.25 + forces.FRC_SIDL_Moment[c] * 2.0 + forces.FRC_LL_Moment[c] * 2.50;
                    list.Add(string.Format("    = {0:f4} x 1.25 + {1:f4} x 2.0 + {2:f4} x 2.5 = {3:f4} T-m.",
                         forces.FRC_DL_Moment[c], forces.FRC_SIDL_Moment[c], forces.FRC_LL_Moment[c], M_ult[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("For Shear Force (SF)"));
                    list.Add(string.Format("--------------------"));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Shear Force for Dead Load (DL) at {0} = {1:f4} T-m.", part_text, forces.FRC_DL_Shear[c]));
                    list.Add(string.Format("Shear Force for Super Imposed Dead Load (SIDL) at {0} = {1:f4} T-m.", part_text, forces.FRC_SIDL_Shear[c]));
                    list.Add(string.Format("Shear Force for Live Load (LL) at {0} = {1:f4} T-m.", part_text, forces.FRC_LL_Shear[c]));
                    list.Add(string.Format(""));
                    V_ult[c] = forces.FRC_DL_Shear[c] * 1.25 + forces.FRC_SIDL_Shear[c] * 2.0 + forces.FRC_LL_Shear[c] * 2.50;
                    list.Add(string.Format("Therefore Design Ultimate Shear Force at Section at {0}", part_text));
                    list.Add(string.Format("    = {0:f4} x 1.25 + {1:f4} x 2.0 + {2:f4} x 2.5 =  {3:f4} T",
                         forces.FRC_DL_Shear[c], forces.FRC_SIDL_Shear[c], forces.FRC_LL_Shear[c], V_ult[c]));

                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("For Torsional Moment (TM)"));
                    list.Add(string.Format("-------------------------"));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Torsional Moment for Dead Load (DL) at {0} = {1:f4} T-m.", part_text, forces.FRC_DL_Torsion[c]));
                    list.Add(string.Format("Torsional Moment for Super Imposed Dead Load (SIDL) at {0} = {1:f4} T-m.", part_text, forces.FRC_SIDL_Torsion[c]));
                    list.Add(string.Format("Torsional Moment for Live Load (LL) at {0} = {1:f4} T-m.", part_text, forces.FRC_LL_Torsion[c]));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Therefore Design Ultimate Torsional Moment at Section at {0}", part_text));
                    T_ult[c] = forces.FRC_DL_Torsion[c] * 1.25 + forces.FRC_SIDL_Torsion[c] * 2.0 + forces.FRC_LL_Torsion[c] * 2.50;
                    list.Add(string.Format("    = {0:f4} x 1.25 + {1:f4} x 2.0 + {2:f4} x 2.5 = {3:f4} T-m.",
                         forces.FRC_DL_Torsion[c], forces.FRC_SIDL_Torsion[c], forces.FRC_LL_Torsion[c], T_ult[c]));
                    list.Add(string.Format(""));

                    c++;
                }
                while (c < 6);
                list.Add(string.Format("".PadLeft(100, '-')));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("TABLE 8: Ultimate Design Forces at Various Span Sections (Ton Metres)"));
                list.Add(string.Format("---------------------------------------------------------------------"));
                list.Add(string.Format(""));

                format = "{0,-27} {1,12:f4} {2,12:f4} {3,12:f4} {4,12:f4} {5,12:f4} {6,12:f4}";



                //list.Add(string.Format("Span Section Ult. Design Forces         Support Section        Deff  from Support        1/8 th Span Section        1/4 th Span Section        3/8 th Span Section        Mid Span Section        "));
                list.Add(string.Format("".PadLeft(108, '-')));
                list.Add(string.Format(format, "Span", "Support", "Deff from", "1/8 th", "1/4 th", "3/8 th", "Mid"));
                list.Add(string.Format(format, "", "Section", "Support", "Section", "Section", "Section", "Section"));
                list.Add(string.Format("".PadLeft(108, '-')));

                //list.Add(string.Format(format, "Span Section Ult. Design Forces         Support Section        Deff  from Support        1/8 th Span Section        1/4 th Span Section        3/8 th Span Section        Mid Span Section        "));

                list.Add(string.Format(format, "Ultimate Design BM  (M_ult)", M_ult[0], M_ult[1], M_ult[2], M_ult[3], M_ult[4], M_ult[5]));
                list.Add(string.Format(format, "Ultimate Design SF (V_ult)", V_ult[0], V_ult[1], V_ult[2], V_ult[3], V_ult[4], V_ult[5]));
                list.Add(string.Format(format, "Ultimate Design TM (T_ult)", T_ult[0], T_ult[1], T_ult[2], T_ult[3], T_ult[4], T_ult[5]));
                list.Add(string.Format("".PadLeft(108, '-')));

                //list.Add(string.Format("Ultimate Design SF (V_ult)        878.000        762.000        629.000        456.000        218.000        26.000        "));
                //list.Add(string.Format("Ultimate Design TM (T_ult)        375.000        435.000        359.000        231.000        103.000        34.000        "));
                list.Add(string.Format(""));

                #endregion STEP 3

                #region STEP 4 : Calculation of Prestressing Force and its effects at various sections

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 4 : Calculation of Prestressing Force and its effects at various sections :"));
                list.Add(string.Format("---------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("PRESTRESSING FORCE "));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Prestressing Details:"));
                list.Add(string.Format("---------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Strength / strand     = pn = {0:f3} kN", Pn));
                list.Add(string.Format("Stressing factor               = Pj = {0:f3}% = {1:f3}", Pj, (Pj = Pj / 100)));
                list.Add(string.Format("(Above values are taken from Tab 2 (B))"));
                list.Add(string.Format(""));

                int Nc = Nc_Left + Nc_Right;
                list.Add(string.Format("Number of Cables used   = {0} (left side) + {1} (Right side) = {2}", Nc_Left, Nc_Right, Nc));
                //list.Add(string.Format("Type of Cables used     = {0} T 13 with duct diameter 90 mm", Ns));
                list.Add(string.Format("Type of Cables used     = {0} with duct diameter 90 mm", Cable_Type)); //Chiranjit [2013 06 19]
                list.Add(string.Format("Number of Strands [Ns]  = {0}", Ns));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double fss = Pn * Pj;
                list.Add(string.Format("Factored Strength per Strand  = {0:f4} x {1:f4} = {2:f4} kN", Pn, Pj, fss));
                list.Add(string.Format(""));


                double P = fss * Ns;
                list.Add(string.Format("Force per Cable  = P = {0:f4} x {1} = {2:f3} kN = {3:f4} Ton", fss, Ns, P, (P = P / 10)));
                list.Add(string.Format(""));

                double tpf = P * Nc;
                list.Add(string.Format("Total Prestressing force  = P_tot = {0:f4} x {1} = {2:f4} kN = {3:f4} Ton", P, Nc, tpf, (tpf = tpf / 10.0)));

                list.Add(string.Format(""));
                list.Add(string.Format("Cross section area of Cables  = {0:f4} Sq.mm", Cable_Area));

                double As = Cable_Area * Nc;
                list.Add(string.Format("Total Cross Section area of five cables = As = {0:f4} x {1} = {2:f4} sq.mm.", Cable_Area, Nc, As));

                list.Add(string.Format(""));
                list.Add(string.Format(""));

                D = D * 1000.0;


                double D1 = D - 2 * cover2;
                if (D1 >= 500)
                {
                    list.Add(string.Format("D1 = D - 2 x Cover2 = {0:f3} - 2 x {1:f3} = {2:f3} mm. >= 500.0 mm.",
                        D, cover2, D1));
                }
                else
                {
                    list.Add(string.Format("D1 = D - 2 x Cover2 = {0:f3} - 2 x {1:f3} = {2:f3} mm. < 500.0 mm.",
                        D, cover2, D1));
                }
                list.Add(string.Format("Cover2 = {0:f2} mm.", cover2));
                if (cover1 < cover2)
                    list.Add(string.Format("Cover1 = {0:f2} mm. < Cover2", cover1));
                else
                    list.Add(string.Format("Cover1 = {0:f2} mm. >= Cover2", cover1));


                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Average Forces after friction and Slip in each cable,"));
                list.Add(string.Format(""));
                //list.Add(string.Format("Cable 1"));
                //list.Add(string.Format("-------"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("Total Length of Cable = 48.41 m."));
                //list.Add(string.Format("Area of the Strand = a = 150 Sq.mm"));
                //list.Add(string.Format("Modulus of Elasticity = Es = 195 Gpa"));
                //list.Add(string.Format("Number of Strands = Ns = 19"));
                //list.Add(string.Format("Slip at Jacking End = Sl = 6 mm."));
                //list.Add(string.Format("Type of Sheathing = HDPE"));
                //list.Add(string.Format("Coefficient of Friction (µ) = 0.17"));
                //list.Add(string.Format("Wobble Coefficient (k) = 0.002"));
                list.Add(string.Format(""));

                //PSC_BOX_Cable_Data Cables = new PSC_BOX_Cable_Data();

                //frm_Box_Cable fbc = new frm_Box_Cable(L, L_Deff);

                //fbc.ShowDialog();

                //Cables = fbc.CABLES;


                //list.Add(string.Format(""));
                //list.AddRange(fbc.Cable_Calculations);
                //list.Add(string.Format(""));



                #region Chiranjit [2013 06 19]



                PSC_BOX_Cable_Data Cables = new PSC_BOX_Cable_Data();

                frm_Box_EachCable fbc;

                for (int i = 0; i < Nc_Left; i++)
                {
                    fbc = new frm_Box_EachCable(Lo * 0.99303, L_Deff - 0.5, Nc_Left, (i + 1));

                    fbc.ShowDialog();

                    Cables.Add(fbc.CableData);

                    list.Add(string.Format(""));
                    list.AddRange(fbc.Cable_Calculations);
                    list.Add(string.Format(""));
                }


                #endregion Chiranjit [2013 06 19]














                format = "{0,-24} {1,15} {2,15} {3,15} {4,15} {5,15} {6,15}";
                list.Add(string.Format(""));
                list.Add(string.Format("TABLE 10 : Summary of Cable Forces after Friction & Slip Losses:"));
                list.Add(string.Format("------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                for (int i = 0; i < Nc_Left; i++)
                {

                    list.Add(string.Format("CABLE {0}", (i + 1)));
                    list.Add(string.Format("-------"));

                    list.Add(string.Format(format,
                        "Distance from jack end",
                        "D" + (i + 1) + "1=" + Cables[i].Distance.F1.ToString("f3"),
                        "D" + (i + 1) + "2=" + Cables[i].Distance.F2.ToString("f3"),
                        "D" + (i + 1) + "3=" + Cables[i].Distance.F3.ToString("f3"),
                        "D" + (i + 1) + "4=" + Cables[i].Distance.F4.ToString("f3"),
                        "D" + (i + 1) + "5=" + Cables[i].Distance.F5.ToString("f3"),
                        "D" + (i + 1) + "6=" + Cables[i].Distance.F6.ToString("f3")));

                    list.Add(string.Format(format,
                        "Force after Friction",
                        "=" + Cables[i].Force_after_Friction.F1.ToString("f3"),
                        "=" + Cables[i].Force_after_Friction.F2.ToString("f3"),
                        "=" + Cables[i].Force_after_Friction.F3.ToString("f3"),
                        "=" + Cables[i].Force_after_Friction.F4.ToString("f3"),
                        "=" + Cables[i].Force_after_Friction.F5.ToString("f3"),
                        "=" + Cables[i].Force_after_Friction.F6.ToString("f3")));


                    list.Add(string.Format(format,
                        "Force after Slip",
                        "Fs" + (i + 1) + "1=" + Cables[i].Force_after_Slip.F1.ToString("f3"),
                        "Fs" + (i + 1) + "2=" + Cables[i].Force_after_Slip.F2.ToString("f3"),
                        "Fs" + (i + 1) + "3=" + Cables[i].Force_after_Slip.F3.ToString("f3"),
                        "Fs" + (i + 1) + "4=" + Cables[i].Force_after_Slip.F4.ToString("f3"),
                        "Fs" + (i + 1) + "5=" + Cables[i].Force_after_Slip.F5.ToString("f3"),
                        "Fs" + (i + 1) + "6=" + Cables[i].Force_after_Slip.F6.ToString("f3")));

                    list.Add(string.Format(""));
                    list.Add(string.Format("ELONGATION in Cable {0} (in mm):  {1:f3}", (i + 1), Cables[i].Elongation));
                    list.Add(string.Format(""));
                    list.Add(string.Format("".PadLeft(120, '-')));
                }

                list.Add(string.Format("".PadLeft(120, '-')));

                list.Add(string.Format(""));
                list.Add(string.Format(""));

                #region Chiranjit [2013 06 19]


                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("CABLE 2"));
                //list.Add(string.Format("-------"));

                //list.Add(string.Format(format,
                //    "Distance from jack end",
                //    "D21=" + Cables.CABLE_2.Distance.F1.ToString("f3"),
                //    "D22=" + Cables.CABLE_2.Distance.F2.ToString("f3"),
                //    "D23=" + Cables.CABLE_2.Distance.F3.ToString("f3"),
                //    "D24=" + Cables.CABLE_2.Distance.F4.ToString("f3"),
                //    "D25=" + Cables.CABLE_2.Distance.F5.ToString("f3"),
                //    "D26=" + Cables.CABLE_2.Distance.F6.ToString("f3")));

                //list.Add(string.Format(format,
                //    "Force after Friction",
                //    "=" + Cables.CABLE_2.Force_after_Friction.F1.ToString("f3"),
                //    "=" + Cables.CABLE_2.Force_after_Friction.F2.ToString("f3"),
                //    "=" + Cables.CABLE_2.Force_after_Friction.F3.ToString("f3"),
                //    "=" + Cables.CABLE_2.Force_after_Friction.F4.ToString("f3"),
                //    "=" + Cables.CABLE_2.Force_after_Friction.F5.ToString("f3"),
                //    "=" + Cables.CABLE_2.Force_after_Friction.F6.ToString("f3")));


                //list.Add(string.Format(format,
                //    "Force after Slip",
                //    "Fs21=" + Cables.CABLE_2.Force_after_Slip.F1.ToString("f3"),
                //    "Fs22=" + Cables.CABLE_2.Force_after_Slip.F2.ToString("f3"),
                //    "Fs23=" + Cables.CABLE_2.Force_after_Slip.F3.ToString("f3"),
                //    "Fs24=" + Cables.CABLE_2.Force_after_Slip.F4.ToString("f3"),
                //    "Fs25=" + Cables.CABLE_2.Force_after_Slip.F5.ToString("f3"),
                //    "Fs26=" + Cables.CABLE_2.Force_after_Slip.F6.ToString("f3")));


                //list.Add(string.Format(""));
                //list.Add(string.Format("ELONGATION in Cable 2 (in mm):  {0:f3}", Cables.CABLE_2.Elongation));
                //list.Add(string.Format(""));



                //list.Add(string.Format(""));

                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("CABLE 3"));
                //list.Add(string.Format("-------"));

                //list.Add(string.Format(format,
                //    "Distance from jack end",
                //    "D31=" + Cables.CABLE_3.Distance.F1.ToString("f3"),
                //    "D32=" + Cables.CABLE_3.Distance.F2.ToString("f3"),
                //    "D33=" + Cables.CABLE_3.Distance.F3.ToString("f3"),
                //    "D34=" + Cables.CABLE_3.Distance.F4.ToString("f3"),
                //    "D35=" + Cables.CABLE_3.Distance.F5.ToString("f3"),
                //    "D36=" + Cables.CABLE_3.Distance.F6.ToString("f3")));

                //list.Add(string.Format(format,
                //    "Force after Friction",
                //    "=" + Cables.CABLE_3.Force_after_Friction.F1.ToString("f3"),
                //    "=" + Cables.CABLE_3.Force_after_Friction.F2.ToString("f3"),
                //    "=" + Cables.CABLE_3.Force_after_Friction.F3.ToString("f3"),
                //    "=" + Cables.CABLE_3.Force_after_Friction.F4.ToString("f3"),
                //    "=" + Cables.CABLE_3.Force_after_Friction.F5.ToString("f3"),
                //    "=" + Cables.CABLE_3.Force_after_Friction.F6.ToString("f3")));


                //list.Add(string.Format(format,
                //    "Force after Slip",
                //    "Fs31=" + Cables.CABLE_3.Force_after_Slip.F1.ToString("f3"),
                //    "Fs32=" + Cables.CABLE_3.Force_after_Slip.F2.ToString("f3"),
                //    "Fs33=" + Cables.CABLE_3.Force_after_Slip.F3.ToString("f3"),
                //    "Fs34=" + Cables.CABLE_3.Force_after_Slip.F4.ToString("f3"),
                //    "Fs35=" + Cables.CABLE_3.Force_after_Slip.F5.ToString("f3"),
                //    "Fs36=" + Cables.CABLE_3.Force_after_Slip.F6.ToString("f3")));

                //list.Add(string.Format(""));
                //list.Add(string.Format("ELONGATION in Cable 3 (in mm):  {0:f3}", Cables.CABLE_3.Elongation));
                //list.Add(string.Format(""));

                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("CABLE 4"));
                //list.Add(string.Format("-------"));

                //list.Add(string.Format(format,
                //    "Distance from jack end",
                //    "D41=" + Cables.CABLE_4.Distance.F1.ToString("f3"),
                //    "D42=" + Cables.CABLE_4.Distance.F2.ToString("f3"),
                //    "D43=" + Cables.CABLE_4.Distance.F3.ToString("f3"),
                //    "D44=" + Cables.CABLE_4.Distance.F4.ToString("f3"),
                //    "D45=" + Cables.CABLE_4.Distance.F5.ToString("f3"),
                //    "D46=" + Cables.CABLE_4.Distance.F6.ToString("f3")));

                //list.Add(string.Format(format,
                //    "Force after Friction",
                //    "=" + Cables.CABLE_4.Force_after_Friction.F1.ToString("f3"),
                //    "=" + Cables.CABLE_4.Force_after_Friction.F2.ToString("f3"),
                //    "=" + Cables.CABLE_4.Force_after_Friction.F3.ToString("f3"),
                //    "=" + Cables.CABLE_4.Force_after_Friction.F4.ToString("f3"),
                //    "=" + Cables.CABLE_4.Force_after_Friction.F5.ToString("f3"),
                //    "=" + Cables.CABLE_4.Force_after_Friction.F6.ToString("f3")));


                //list.Add(string.Format(format,
                //    "Force after Slip",
                //    "Fs41=" + Cables.CABLE_4.Force_after_Slip.F1.ToString("f3"),
                //    "Fs42=" + Cables.CABLE_4.Force_after_Slip.F2.ToString("f3"),
                //    "Fs43=" + Cables.CABLE_4.Force_after_Slip.F3.ToString("f3"),
                //    "Fs44=" + Cables.CABLE_4.Force_after_Slip.F4.ToString("f3"),
                //    "Fs45=" + Cables.CABLE_4.Force_after_Slip.F5.ToString("f3"),
                //    "Fs46=" + Cables.CABLE_4.Force_after_Slip.F6.ToString("f3")));

                //list.Add(string.Format(""));
                //list.Add(string.Format("ELONGATION in Cable 4 (in mm):  {0:f3}", Cables.CABLE_4.Elongation));
                //list.Add(string.Format(""));

                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("CABLE 5"));
                //list.Add(string.Format("-------"));

                //list.Add(string.Format(format,
                //    "Distance from jack end",
                //    "D51=" + Cables.CABLE_5.Distance.F1.ToString("f3"),
                //    "D52=" + Cables.CABLE_5.Distance.F2.ToString("f3"),
                //    "D53=" + Cables.CABLE_5.Distance.F3.ToString("f3"),
                //    "D54=" + Cables.CABLE_5.Distance.F4.ToString("f3"),
                //    "D55=" + Cables.CABLE_5.Distance.F5.ToString("f3"),
                //    "D56=" + Cables.CABLE_5.Distance.F6.ToString("f3")));

                //list.Add(string.Format(format,
                //    "Force after Friction",
                //    "=" + Cables.CABLE_5.Force_after_Friction.F1.ToString("f3"),
                //    "=" + Cables.CABLE_5.Force_after_Friction.F2.ToString("f3"),
                //    "=" + Cables.CABLE_5.Force_after_Friction.F3.ToString("f3"),
                //    "=" + Cables.CABLE_5.Force_after_Friction.F4.ToString("f3"),
                //    "=" + Cables.CABLE_5.Force_after_Friction.F5.ToString("f3"),
                //    "=" + Cables.CABLE_5.Force_after_Friction.F6.ToString("f3")));


                //list.Add(string.Format(format,
                //    "Force after Slip",
                //    "Fs51=" + Cables.CABLE_5.Force_after_Slip.F1.ToString("f3"),
                //    "Fs52=" + Cables.CABLE_5.Force_after_Slip.F2.ToString("f3"),
                //    "Fs53=" + Cables.CABLE_5.Force_after_Slip.F3.ToString("f3"),
                //    "Fs54=" + Cables.CABLE_5.Force_after_Slip.F4.ToString("f3"),
                //    "Fs55=" + Cables.CABLE_5.Force_after_Slip.F5.ToString("f3"),
                //    "Fs56=" + Cables.CABLE_5.Force_after_Slip.F6.ToString("f3")));


                //list.Add(string.Format(""));
                //list.Add(string.Format("ELONGATION in Cable 5 (in mm):  {0:f3}", Cables.CABLE_5.Elongation));
                //list.Add(string.Format(""));


                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("CABLE 6"));
                //list.Add(string.Format("-------"));

                //list.Add(string.Format(format,
                //    "Distance from jack end",
                //    "D61=" + Cables.CABLE_6.Distance.F1.ToString("f3"),
                //    "D62=" + Cables.CABLE_6.Distance.F2.ToString("f3"),
                //    "D63=" + Cables.CABLE_5.Distance.F3.ToString("f3"),
                //    "D64=" + Cables.CABLE_6.Distance.F4.ToString("f3"),
                //    "D65=" + Cables.CABLE_6.Distance.F5.ToString("f3"),
                //    "D66=" + Cables.CABLE_6.Distance.F6.ToString("f3")));

                //list.Add(string.Format(format,
                //    "Force after Friction",
                //    "=" + Cables.CABLE_6.Force_after_Friction.F1.ToString("f3"),
                //    "=" + Cables.CABLE_6.Force_after_Friction.F2.ToString("f3"),
                //    "=" + Cables.CABLE_6.Force_after_Friction.F3.ToString("f3"),
                //    "=" + Cables.CABLE_6.Force_after_Friction.F4.ToString("f3"),
                //    "=" + Cables.CABLE_6.Force_after_Friction.F5.ToString("f3"),
                //    "=" + Cables.CABLE_6.Force_after_Friction.F6.ToString("f3")));


                //list.Add(string.Format(format,
                //    "Force after Slip",
                //    "Fs61=" + Cables.CABLE_6.Force_after_Slip.F1.ToString("f3"),
                //    "Fs62=" + Cables.CABLE_6.Force_after_Slip.F2.ToString("f3"),
                //    "Fs63=" + Cables.CABLE_6.Force_after_Slip.F3.ToString("f3"),
                //    "Fs64=" + Cables.CABLE_6.Force_after_Slip.F4.ToString("f3"),
                //    "Fs65=" + Cables.CABLE_6.Force_after_Slip.F5.ToString("f3"),
                //    "Fs66=" + Cables.CABLE_6.Force_after_Slip.F6.ToString("f3")));

                //list.Add(string.Format(""));
                //list.Add(string.Format("ELONGATION in Cable 6 (in mm):  {0:f3}", Cables.CABLE_6.Elongation));
                //list.Add(string.Format(""));


                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("CABLE 7"));
                //list.Add(string.Format("-------"));

                //list.Add(string.Format(format,
                //    "Distance from jack end",
                //    "D71=" + Cables.CABLE_7.Distance.F1.ToString("f3"),
                //    "D72=" + Cables.CABLE_7.Distance.F2.ToString("f3"),
                //    "D73=" + Cables.CABLE_7.Distance.F3.ToString("f3"),
                //    "D74=" + Cables.CABLE_7.Distance.F4.ToString("f3"),
                //    "D75=" + Cables.CABLE_7.Distance.F5.ToString("f3"),
                //    "D76=" + Cables.CABLE_7.Distance.F6.ToString("f3")));

                //list.Add(string.Format(format,
                //    "Force after Friction",
                //    "=" + Cables.CABLE_7.Force_after_Friction.F1.ToString("f3"),
                //    "=" + Cables.CABLE_7.Force_after_Friction.F2.ToString("f3"),
                //    "=" + Cables.CABLE_7.Force_after_Friction.F3.ToString("f3"),
                //    "=" + Cables.CABLE_7.Force_after_Friction.F4.ToString("f3"),
                //    "=" + Cables.CABLE_7.Force_after_Friction.F5.ToString("f3"),
                //    "=" + Cables.CABLE_7.Force_after_Friction.F6.ToString("f3")));


                //list.Add(string.Format(format,
                //    "Force after Slip",
                //    "Fs71=" + Cables.CABLE_7.Force_after_Slip.F1.ToString("f3"),
                //    "Fs72=" + Cables.CABLE_7.Force_after_Slip.F2.ToString("f3"),
                //    "Fs73=" + Cables.CABLE_7.Force_after_Slip.F3.ToString("f3"),
                //    "Fs74=" + Cables.CABLE_7.Force_after_Slip.F4.ToString("f3"),
                //    "Fs75=" + Cables.CABLE_7.Force_after_Slip.F5.ToString("f3"),
                //    "Fs76=" + Cables.CABLE_7.Force_after_Slip.F6.ToString("f3")));
                //list.Add(string.Format(""));
                //list.Add(string.Format("ELONGATION in Cable 7 (in mm):  {0:f3}", Cables.CABLE_7.Elongation));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));

                #endregion Chiranjit [2013 06 19]



                list.Add(string.Format("Calculation for Cable Forces after Friction & Slip Losses at different design Points:"));
                list.Add(string.Format(""));
                D = D / 1000.0;
                cover1 = cover1 / 1000.0;
                list.Add(string.Format("Span = L = {0:f3} m,  Depth = D = {1:f3} m.,  Cover = {2:f3} m", L, D, cover1));
                list.Add(string.Format(""));

                //list.Add(string.Format("Distance from jack end   = L11, L12, L13, L14, L15, L16"));
                //list.Add(string.Format("                         = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3}, {5:f3}",
                //    Cables.CABLE_1.SUM_L.F1,
                //    Cables.CABLE_1.SUM_L.F2,
                //    Cables.CABLE_1.SUM_L.F3,
                //    Cables.CABLE_1.SUM_L.F4,
                //    Cables.CABLE_1.SUM_L.F5,
                //    Cables.CABLE_1.SUM_L.F6));
                //list.Add(string.Format(""));



                #region Chiranjit [2013 06 20]

                list.Add(string.Format("Distance from jack end   = L11, L12, L13, L14, L15, L16"));
                list.Add(string.Format("                         = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3}, {5:f3}",
                    Cables[0].SUM_L.F1,
                    Cables[0].SUM_L.F2,
                    Cables[0].SUM_L.F3,
                    Cables[0].SUM_L.F4,
                    Cables[0].SUM_L.F5,
                    Cables[0].SUM_L.F6));
                list.Add(string.Format(""));
                #endregion Chiranjit [2013 06 20]




                //PSC_Force_Data fas1 = new PSC_Force_Data(6);
                //PSC_Force_Data _fs1 = Cables.CABLE_1.Force_after_Slip;
                //PSC_Force_Data _L1 = Cables.CABLE_1.SUM_L;
                //PSC_Force_Data _D1 = Cables.CABLE_1.Distance;
                //PSC_Force_Data S1 = new PSC_Force_Data(6);

                PSC_Force_Data fas1;
                PSC_Force_Data _fs1;
                PSC_Force_Data _L1;
                PSC_Force_Data _D1;
                PSC_Force_Data S1;

                List<PSC_Force_Data> list_fas = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_fs = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_L = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_D = new List<PSC_Force_Data>();
                List<PSC_Force_Data> list_S = new List<PSC_Force_Data>();


                //list_fas.Add(fas1);
                //list_fs.Add(fas1);
                //list_L.Add(fas1);
                //list_D.Add(fas1);
                //list_S.Add(fas1);

                for (int i = 0; i < Nc_Left; i++)
                {

                    fas1 = new PSC_Force_Data(6);
                    _fs1 = Cables[i].Force_after_Slip;
                    _L1 = Cables[i].SUM_L;
                    _D1 = Cables[i].Distance;

                    fas1 = _fs1;



                    S1 = new PSC_Force_Data(6);

                    S1 = Cables[i].Height_from_sofit;


                    if ((_D1.F1 - _D1.F2) != 0)
                        fas1.F1 = _fs1.F1 + (_fs1.F1 - _fs1.F2) * (_L1.F1 - _D1.F1) / (_D1.F1 - _D1.F2);
                    //if (S1.F1 == 0.0)
                    //    fas1.F1 = 0.0;

                    if ((_D1.F2 - _D1.F3) != 0)
                        fas1.F2 = _fs1.F2 + (_fs1.F2 - _fs1.F3) * (_L1.F2 - _D1.F2) / (_D1.F2 - _D1.F3);

                    //if (S1.F2 == 0.0)
                    //    fas1.F2 = 0.0;

                    if ((_D1.F3 - _D1.F4) != 0)
                        fas1.F3 = _fs1.F3 + (_fs1.F3 - _fs1.F4) * (_L1.F3 - _D1.F3) / (_D1.F3 - _D1.F4);
                    //if (S1.F3 == 0.0)
                    //    fas1.F3 = 0.0;

                    if ((_D1.F4 - _D1.F5) != 0)
                        fas1.F4 = _fs1.F4 + (_fs1.F4 - _fs1.F4) * (_L1.F4 - _D1.F4) / (_D1.F4 - _D1.F5);
                    //if (S1.F4 != 0.0)
                    //    fas1.F4 = 0.0;

                    if ((_D1.F5 - _D1.F6) != 0)
                        fas1.F5 = _fs1.F5 + (_fs1.F5 - _fs1.F6) * (_L1.F5 - _D1.F5) / (_D1.F5 - _D1.F6);
                    //if (S1.F5 == 0.0)
                    //    fas1.F5 = 0.0;

                    //Chiranjit [2012 10 12]
                    //fas1.F6 = _fs1.F6;
                    //Check
                    //fas1.F6 = 345.4;
                    fas1.F6 = _fs1.F6;
                    list.Add(string.Format("CABLE {0}:", (i + 1)));
                    list.Add(string.Format("---------"));
                    list.Add(string.Format("Force after Slip = F{0}1 = Fs{0}1 + (Fs{0}1-Fs{0}2) x (L{0}1-D{0}1) / (D{0}1-D{0}2) = {1:f3}", (i + 1), fas1.F1));
                    list.Add(string.Format("                   F{0}2 = Fs{0}2 + (Fs{0}2-Fs{0}3) x (L{0}2-D{0}2) / (D{0}2-D{0}3) = {1:f3}", (i + 1), fas1.F2));
                    list.Add(string.Format("                   F{0}3 = Fs{0}3 + (Fs{0}3-Fs{0}4) x (L{0}3-D{0}3) / (D{0}3-D{0}4) = {1:f3}", (i + 1), fas1.F3));
                    list.Add(string.Format("                   F{0}4 = Fs{0}4 + (Fs{0}4-Fs{0}5) x (L{0}4-D{0}4) / (D{0}4-D{0}5) = {1:f3}", (i + 1), fas1.F4));
                    list.Add(string.Format("                   F{0}5 = Fs{0}5 + (Fs{0}5-Fs{0}6) x (L{0}5-D{0}5) / (D{0}5-D{0}6) = {1:f3}", (i + 1), fas1.F5));
                    list.Add(string.Format("                   F{0}6 = Fs{0}6 = {1:f3}", (i + 1), fas1.F6));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));



                    //S1.F1 = 0.67 * D;
                    //S1.F2 = 0.60 * D;
                    //S1.F3 = 0.51 * D;
                    //S1.F4 = 0.35 * D;
                    //S1.F5 = 0.19 * D;
                    //S1.F6 = cover1;

                    //list.Add(string.Format("Height from Sofit = S{0}1 = 0.67xD = {1:f3}", (i + 1), S1.F1));
                    //list.Add(string.Format("                    S{0}2 = 0.60xD = {1:f3}", (i + 1), S1.F2));
                    //list.Add(string.Format("                    S{0}3 = 0.51xD = {1:f3}", (i + 1), S1.F3));
                    //list.Add(string.Format("                    S{0}4 = 0.35xD = {1:f3}", (i + 1), S1.F4));
                    //list.Add(string.Format("                    S{0}5 = 0.19xD = {1:f3}", (i + 1), S1.F5));
                    //list.Add(string.Format("                    S{0}6 = Cover  = {1:f3}", (i + 1), S1.F6));
                    //list.Add(string.Format(""));
                    list.Add(string.Format("Height from Sofit = S{0}1 = {1:f3}", (i + 1), S1.F1));
                    list.Add(string.Format("                    S{0}2 = {1:f3}", (i + 1), S1.F2));
                    list.Add(string.Format("                    S{0}3 = {1:f3}", (i + 1), S1.F3));
                    list.Add(string.Format("                    S{0}4 = {1:f3}", (i + 1), S1.F4));
                    list.Add(string.Format("                    S{0}5 = {1:f3}", (i + 1), S1.F5));
                    list.Add(string.Format("                    S{0}6 = {1:f3}", (i + 1), S1.F6));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));

                    list_fas.Add(fas1);
                    list_fs.Add(_fs1);
                    list_L.Add(_L1);
                    list_D.Add(_D1);
                    list_S.Add(S1);
                }

                #region Chiranjit [2013 06 20]

                //PSC_Force_Data fas2 = new PSC_Force_Data(6);
                //PSC_Force_Data _fs2 = Cables.CABLE_2.Force_after_Slip;
                //PSC_Force_Data _L2 = Cables.CABLE_2.SUM_L;
                //PSC_Force_Data _D2 = Cables.CABLE_2.Distance;


                //fas2 = _fs2;

                //if ((_D2.F1 - _D2.F2) != 0)
                //    fas2.F1 = _fs2.F1 + (_fs2.F1 - _fs2.F2) * (_L2.F1 - _D2.F1) / (_D2.F1 - _D2.F2);

                //if ((_D2.F2 - _D2.F3) != 0)
                //    fas2.F2 = _fs2.F2 + (_fs2.F2 - _fs2.F3) * (_L2.F2 - _D2.F2) / (_D2.F2 - _D2.F3);

                //if ((_D2.F3 - _D2.F4) != 0)
                //    fas2.F3 = _fs2.F3 + (_fs2.F3 - _fs2.F4) * (_L2.F3 - _D2.F3) / (_D2.F3 - _D2.F4);

                //if ((_D2.F4 - _D2.F5) != 0)
                //    fas2.F4 = _fs2.F4 + (_fs2.F4 - _fs2.F4) * (_L2.F4 - _D2.F4) / (_D2.F4 - _D2.F5);

                //if ((_D2.F5 - _D2.F6) != 0)
                //    fas2.F5 = _fs2.F5 + (_fs2.F5 - _fs2.F6) * (_L2.F5 - _D2.F5) / (_D2.F5 - _D2.F6);

                ////Chiranjit [2012 10 12]
                ////fas2.F6 = _fs2.F6;
                ////Check
                //fas2.F6 = 333.6;



                //list.Add(string.Format("CABLE 2:"));
                //list.Add(string.Format("-------"));
                //list.Add(string.Format("Force after Slip = F21 = Fs21 + (Fs21-Fs22) x (L21-D21) / (D21-D22) = {0:f3}", fas2.F1));
                //list.Add(string.Format("                   F22 = Fs22 + (Fs22-Fs23) x (L22-D22) / (D22-D23) = {0:f3}", fas2.F2));
                //list.Add(string.Format("                   F23 = Fs23 + (Fs23-Fs24) x (L23-D23) / (D23-D24) = {0:f3}", fas2.F3));
                //list.Add(string.Format("                   F24 = Fs24 + (Fs24-Fs25) x (L24-D24) / (D24-D25) = {0:f3}", fas2.F4));
                //list.Add(string.Format("                   F25 = Fs25 + (Fs25-Fs26) x (L25-D25) / (D25-D26) = {0:f3}", fas2.F5));
                //list.Add(string.Format("                   F26 = Fs26 = {0:f3}", fas2.F6));
                //list.Add(string.Format(""));

                //PSC_Force_Data S2 = new PSC_Force_Data(6);

                //S2.F1 = 0.44 * D;
                //S2.F2 = 0.39 * D;
                //S2.F3 = 0.31 * D;
                //S2.F4 = 0.19 * D;
                //S2.F5 = 0.06 * D;
                //S2.F6 = cover1;

                //list.Add(string.Format("Height from Sofit = S21 = 0.44xD = {0:f3}", S2.F1));
                //list.Add(string.Format("                    S22 = 0.39xD = {0:f3}", S2.F2));
                //list.Add(string.Format("                    S23 = 0.31xD = {0:f3}", S2.F3));
                //list.Add(string.Format("                    S24 = 0.19xD = {0:f3}", S2.F4));
                //list.Add(string.Format("                    S25 = 0.06xD = {0:f3}", S2.F5));
                //list.Add(string.Format("                    S26 = Cover  = {0:f3}", S2.F6));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));

                ////list.Add(string.Format("Height from Sofit =  S21=0.44xD=1.104        S22=0.39xD=0.970        S23=0.31xD=0.783        "));
                ////list.Add(string.Format("                     S24 =0.19xD=0.462        S25=0.06xD=0.147        S26=Cover=0.130"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("CABLE 3:"));
                //list.Add(string.Format("-------"));


                //PSC_Force_Data fas3 = new PSC_Force_Data(6);
                //PSC_Force_Data _fs3 = Cables.CABLE_3.Force_after_Slip;
                //PSC_Force_Data _L3 = Cables.CABLE_3.SUM_L;
                //PSC_Force_Data _D3 = Cables.CABLE_3.Distance;



                //fas3 = _fs3;

                //if ((_D3.F1 - _D3.F2) != 0)
                //    fas3.F1 = _fs3.F1 + (_fs3.F1 - _fs3.F2) * (_L3.F1 - _D3.F1) / (_D3.F1 - _D3.F2);

                //if ((_D3.F2 - _D3.F3) != 0)
                //    fas3.F2 = _fs3.F2 + (_fs3.F2 - _fs3.F3) * (_L3.F2 - _D3.F2) / (_D3.F2 - _D3.F3);

                //if ((_D3.F3 - _D3.F4) != 0)
                //    fas3.F3 = _fs3.F3 + (_fs3.F3 - _fs3.F4) * (_L3.F3 - _D3.F3) / (_D3.F3 - _D3.F4);

                //if ((_D3.F4 - _D3.F5) != 0)
                //    fas3.F4 = _fs3.F4 + (_fs3.F4 - _fs3.F4) * (_L3.F4 - _D3.F4) / (_D3.F4 - _D3.F5);

                //if ((_D3.F5 - _D3.F6) != 0)
                //    fas3.F5 = _fs3.F5 + (_fs3.F5 - _fs3.F6) * (_L3.F5 - _D3.F5) / (_D3.F5 - _D3.F6);


                ////Chiranjit [2012 10 12]
                ////fas3.F6 = _fs3.F6;
                ////Check
                //fas3 = new PSC_Force_Data(6);
                //fas3.F5 = 316.9;
                //fas3.F6 = 334.2;



                //list.Add(string.Format("Force after Slip =  F31 = Fs31 + (Fs31-Fs32) x (L31-D31) / (D31-D32) = {0:f3}", fas3.F1));
                //list.Add(string.Format("                    F32 = Fs32 + (Fs32-Fs33) x (L32-D32) / (D32-D33) = {0:f3}", fas3.F2));
                //list.Add(string.Format("                    F33 = Fs33 + (Fs33-Fs34) x (L33-D33) / (D33-D34) = {0:f3}", fas3.F3));
                //list.Add(string.Format("                    F34 = Fs34 + (Fs34-Fs35) x (L34-D34) / (D34-D35) = {0:f3}", fas3.F4));
                //list.Add(string.Format("                    F35 = Fs35 + (Fs35-Fs36) x (L35-D35) / (D35-D36) = {0:f3}", fas3.F5));
                //list.Add(string.Format("                    F36 = Fs36 = {0:f3}", fas3.F6));
                //list.Add(string.Format(""));


                //PSC_Force_Data S3 = new PSC_Force_Data(6);

                //S3.F1 = 0.00 * D;
                //S3.F2 = 0.00 * D;
                //S3.F3 = 0.00 * D;
                //S3.F4 = 0.00 * D;
                //S3.F5 = 0.07 * D;
                //S3.F6 = cover1;

                //list.Add(string.Format("Height from Sofit = S31 = 0.00xD = {0:f3}", S3.F1));
                //list.Add(string.Format("                    S32 = 0.00xD = {0:f3}", S3.F2));
                //list.Add(string.Format("                    S33 = 0.00xD = {0:f3}", S3.F3));
                //list.Add(string.Format("                    S34 = 0.00xD = {0:f3}", S3.F4));
                //list.Add(string.Format("                    S35 = 0.07xD = {0:f3}", S3.F5));
                //list.Add(string.Format("                    S36 = Cover  = {0:f3}", S3.F6));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));


                ////list.Add(string.Format("Height from Sofit =         S21=0.00xD=0.00        S22=0.00xD=0.00 S23=0.00xD=0.00        "));
                ////list.Add(string.Format("S24 =0.00xD=0.00        S25=0.07xD=0.167        S26=Cover=0.130"));




                //list.Add(string.Format("CABLE 4:"));
                //list.Add(string.Format("-------"));


                //PSC_Force_Data fas4 = new PSC_Force_Data(6);
                //PSC_Force_Data _fs4 = Cables.CABLE_4.Force_after_Slip;
                //PSC_Force_Data _L4 = Cables.CABLE_4.SUM_L;
                //PSC_Force_Data _D4 = Cables.CABLE_4.Distance;

                //fas4 = _fs4;
                //if ((_D4.F1 - _D4.F2) != 0)
                //    fas4.F1 = _fs4.F1 + (_fs4.F1 - _fs4.F2) * (_L4.F1 - _D4.F1) / (_D4.F1 - _D4.F2);

                //if ((_D4.F2 - _D4.F3) != 0)
                //    fas4.F2 = _fs4.F2 + (_fs4.F2 - _fs4.F3) * (_L4.F2 - _D4.F2) / (_D4.F2 - _D4.F3);

                //if ((_D4.F3 - _D4.F4) != 0)
                //    fas4.F3 = _fs4.F3 + (_fs4.F3 - _fs4.F4) * (_L4.F3 - _D4.F3) / (_D4.F3 - _D4.F4);

                //if ((_D4.F4 - _D4.F5) != 0)
                //    fas4.F4 = _fs4.F4 + (_fs4.F4 - _fs4.F4) * (_L4.F4 - _D4.F4) / (_D4.F4 - _D4.F5);

                //if ((_D4.F5 - _D4.F6) != 0)
                //    fas4.F5 = _fs4.F5 + (_fs4.F5 - _fs4.F6) * (_L4.F5 - _D4.F5) / (_D4.F5 - _D4.F6);
                //fas4.F6 = _fs4.F6;

                ////Chiranjit [2012 10 12]
                ////fas4.F6 = _fs4.F6;
                ////Check
                //fas4 = new PSC_Force_Data(6);
                //fas4.F4 = 307.3;
                //fas4.F5 = 338.6;
                //fas4.F6 = 339.5;


                //list.Add(string.Format("Force after Slip = F41 = Fs41 + (Fs41-Fs42) x (L41-D41) / D41-D42) = {0:f3}", fas4.F1));
                //list.Add(string.Format("                   F42 = Fs42 + (Fs42-Fs43) x (L42-D42) / D42-D43) = {0:f3}", fas4.F2));
                //list.Add(string.Format("                   F43 = Fs43 + (Fs43-Fs44) x (L43-D43) / D43-D44) = {0:f3}", fas4.F3));
                //list.Add(string.Format("                   F44 = Fs44 + (Fs44-Fs45) x (L44-D44) / D44-D45) = {0:f3}", fas4.F4));
                //list.Add(string.Format("                   F45 = Fs45 + (Fs45-Fs46) x (L45-D45) / D45-D46) = {0:f3}", fas4.F5));
                //list.Add(string.Format("                   F46 = Fs46 = {0:f3}", fas4.F6));
                //list.Add(string.Format(""));

                //PSC_Force_Data S4 = new PSC_Force_Data(6);

                //S4.F1 = 0.00 * D;
                //S4.F2 = 0.00 * D;
                //S4.F3 = 0.00 * D;
                //S4.F4 = 0.116 * D;
                //S4.F5 = cover1;
                //S4.F6 = cover1;

                //list.Add(string.Format("Height from Sofit = S41 = 0.00xD = {0:f3}", S4.F1));
                //list.Add(string.Format("                    S42 = 0.00xD = {0:f3}", S4.F2));
                //list.Add(string.Format("                    S43 = 0.00xD = {0:f3}", S4.F3));
                //list.Add(string.Format("                    S44 = 0.116xD = {0:f3}", S4.F4));
                //list.Add(string.Format("                    S45 = Cover= {0:f3}", S4.F5));
                //list.Add(string.Format("                    S46 = Cover  = {0:f3}", S4.F6));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                ////list.Add(string.Format("Height from Sofit =         S41=0.00xD=0.00        S42=0.00xD=0.00        S43=0.00xD=0.00        "));
                ////list.Add(string.Format("S44 =0.116xD=0.279        S45= Cover=0.130        S46=Cover=0.130"));
                //list.Add(string.Format(""));


                //PSC_Force_Data fas5 = new PSC_Force_Data(6);
                //PSC_Force_Data _fs5 = Cables.CABLE_5.Force_after_Slip;
                //PSC_Force_Data _L5 = Cables.CABLE_5.SUM_L;
                //PSC_Force_Data _D5 = Cables.CABLE_5.Distance;



                //fas5 = _fs5;
                //if ((_D5.F1 - _D5.F2) != 0)
                //    fas5.F1 = _fs5.F1 + (_fs5.F1 - _fs5.F2) * (_L5.F1 - _D5.F1) / (_D5.F1 - _D5.F2);
                //if ((_D5.F2 - _D5.F3) != 0)
                //    fas5.F2 = _fs5.F2 + (_fs5.F2 - _fs5.F3) * (_L5.F2 - _D5.F2) / (_D5.F2 - _D5.F3);
                //if ((_D5.F3 - _D5.F4) != 0)
                //    fas5.F3 = _fs5.F3 + (_fs5.F3 - _fs5.F4) * (_L5.F3 - _D5.F3) / (_D5.F3 - _D5.F4);
                //if ((_D5.F4 - _D5.F5) != 0)
                //    fas5.F4 = _fs5.F4 + (_fs5.F4 - _fs5.F4) * (_L5.F4 - _D5.F4) / (_D5.F4 - _D5.F5);
                //if ((_D5.F5 - _D5.F6) != 0)
                //    fas5.F5 = _fs5.F5 + (_fs5.F5 - _fs5.F6) * (_L5.F5 - _D5.F5) / (_D5.F5 - _D5.F6);
                //fas5.F6 = _fs5.F6;

                ////Chiranjit [2012 10 12]
                ////fas5.F6 = _fs5.F6;
                ////Check
                //fas5.F6 = 335.6;


                //list.Add(string.Format("CABLE 5:"));
                //list.Add(string.Format("-------"));
                //list.Add(string.Format("Force after Slip = F51 = Fs51 + (Fs51-Fs52) x (L51-D51) / D51-D52) = {0:f3}", fas5.F1));
                //list.Add(string.Format("                   F52 = Fs52 + (Fs52-Fs53) x (L52-D52) / D52-D53) = {0:f3}", fas5.F2));
                //list.Add(string.Format("                   F53 = Fs53 + (Fs53-Fs54) x (L53-D53) / D53-D54) = {0:f3}", fas5.F3));
                //list.Add(string.Format("                   F54 = Fs54 + (Fs54-Fs55) x (L54-D54) / D54-D55) = {0:f3}", fas5.F4));
                //list.Add(string.Format("                   F55 = Fs55 + (Fs55-Fs56) x (L55-D55) / D55-D56) = {0:f3}", fas5.F5));
                //list.Add(string.Format("                   F56 = Fs56 = {0:f3}", fas5.F6));
                //list.Add(string.Format(""));

                //PSC_Force_Data S5 = new PSC_Force_Data(6);

                //S5.F1 = 0.21 * D;
                //S5.F2 = 0.13 * D;
                //S5.F3 = cover1;
                //S5.F4 = cover1;
                //S5.F5 = cover1;
                //S5.F6 = cover1;

                //list.Add(string.Format("Height from Sofit = S51 = 0.21xD = {0:f3}", S5.F1));
                //list.Add(string.Format("                    S52 = 0.13xD = {0:f3}", S5.F2));
                //list.Add(string.Format("                    S53 = Cover  = {0:f3}", S5.F3));
                //list.Add(string.Format("                    S54 = Cover  = {0:f3}", S5.F4));
                //list.Add(string.Format("                    S55 = Cover  = {0:f3}", S5.F5));
                //list.Add(string.Format("                    S56 = Cover  = {0:f3}", S5.F6));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                ////list.Add(string.Format("                   Height from Sofit =    S51=0.21xD=0.522      S52=0.13xD=0.312        S53= Cover=0.130 "));
                ////list.Add(string.Format("                   S54 = Cover=0.130        S55= Cover=0.130        S56=Cover=0.130"));
                //list.Add(string.Format(""));



                //PSC_Force_Data fas6 = new PSC_Force_Data(6);
                //PSC_Force_Data _fs6 = Cables.CABLE_5.Force_after_Slip;
                //PSC_Force_Data _L6 = Cables.CABLE_5.SUM_L;
                //PSC_Force_Data _D6 = Cables.CABLE_5.Distance;


                //fas6 = _fs6;
                //if ((_D6.F1 - _D6.F2) != 0)
                //    fas6.F1 = _fs6.F1 + (_fs6.F1 - _fs6.F2) * (_L6.F1 - _D6.F1) / (_D6.F1 - _D6.F2);
                //if ((_D6.F2 - _D6.F3) != 0)
                //    fas6.F2 = _fs6.F2 + (_fs6.F2 - _fs6.F3) * (_L6.F2 - _D6.F2) / (_D6.F2 - _D6.F3);
                //if ((_D6.F3 - _D6.F4) != 0)
                //    fas6.F3 = _fs6.F3 + (_fs6.F3 - _fs6.F4) * (_L6.F3 - _D6.F3) / (_D6.F3 - _D6.F4);
                //if ((_D6.F4 - _D6.F5) != 0)
                //    fas6.F4 = _fs6.F4 + (_fs6.F4 - _fs6.F4) * (_L6.F4 - _D6.F4) / (_D6.F4 - _D6.F5);
                //if ((_D6.F5 - _D6.F6) != 0)
                //    fas6.F5 = _fs6.F5 + (_fs6.F5 - _fs6.F6) * (_L6.F5 - _D6.F5) / (_D6.F5 - _D6.F6);
                //fas6.F6 = _fs6.F6;

                ////Chiranjit [2012 10 12]
                ////fas6.F6 = _fs6.F6;
                ////Check
                //fas6.F6 = 340.9;

                //list.Add(string.Format("CABLE 6:"));
                //list.Add(string.Format("-------"));
                //list.Add(string.Format("Force after Slip = F61 = Fs61 + (Fs61-Fs62) x (L61-D61) / D61-D62) = {0:f3}", fas6.F1));
                //list.Add(string.Format("                   F62 = Fs62 + (Fs62-Fs63) x (L62-D62) / D62-D63) = {0:f3}", fas6.F2));
                //list.Add(string.Format("                   F63 = Fs63 + (Fs63-Fs64) x (L63-D63) / D63-D64) = {0:f3}", fas6.F3));
                //list.Add(string.Format("                   F64 = Fs64 + (Fs64-Fs65) x (L64-D64) / D64-D65) = {0:f3}", fas6.F4));
                //list.Add(string.Format("                   F65 = Fs65 + (Fs65-Fs66) x (L65-D65) / D65-D66) = {0:f3}", fas6.F5));
                //list.Add(string.Format("                   F66 = Fs66 = {0:f3}", fas6.F6));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));


                //PSC_Force_Data S6 = new PSC_Force_Data(6);

                //S6.F1 = 0.099 * D;
                //S6.F2 = cover1;
                //S6.F3 = cover1;
                //S6.F4 = cover1;
                //S6.F5 = cover1;
                //S6.F6 = cover1;

                //list.Add(string.Format("Height from Sofit = S61 = 0.099xD = {0:f3}", S6.F1));
                //list.Add(string.Format("                    S62 = Cover   = {0:f3}", S6.F2));
                //list.Add(string.Format("                    S63 = Cover   = {0:f3}", S6.F3));
                //list.Add(string.Format("                    S64 = Cover   = {0:f3}", S6.F4));
                //list.Add(string.Format("                    S65 = Cover   = {0:f3}", S6.F5));
                //list.Add(string.Format("                    S66 = Cover   = {0:f3}", S6.F6));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));

                ////list.Add(string.Format("Height from Sofit =         S51=0.099xD=0.248        S52= Cover=0.130        S53=Cover=0.130        "));
                ////list.Add(string.Format("S54 = Cover=0.130        S55= Cover=0.130        S56=Cover=0.130"));
                //list.Add(string.Format(""));



                //PSC_Force_Data fas7 = new PSC_Force_Data(6);
                //PSC_Force_Data _fs7 = Cables.CABLE_5.Force_after_Slip;
                //PSC_Force_Data _L7 = Cables.CABLE_5.SUM_L;
                //PSC_Force_Data _D7 = Cables.CABLE_5.Distance;



                //fas7 = _fs7;
                //if ((_D7.F1 - _D7.F2) != 0)
                //    fas7.F1 = _fs7.F1 + (_fs7.F1 - _fs7.F2) * (_L7.F1 - _D7.F1) / (_D7.F1 - _D7.F2);
                //if ((_D7.F2 - _D7.F3) != 0)
                //    fas7.F2 = _fs7.F2 + (_fs7.F2 - _fs7.F3) * (_L7.F2 - _D7.F2) / (_D7.F2 - _D7.F3);
                //if ((_D7.F3 - _D7.F4) != 0)
                //    fas7.F3 = _fs7.F3 + (_fs7.F3 - _fs7.F4) * (_L7.F3 - _D7.F3) / (_D7.F3 - _D7.F4);
                //if ((_D7.F4 - _D7.F5) != 0)
                //    fas7.F4 = _fs7.F4 + (_fs7.F4 - _fs7.F4) * (_L7.F4 - _D7.F4) / (_D7.F4 - _D7.F5);
                //if ((_D7.F5 - _D7.F6) != 0)
                //    fas7.F5 = _fs7.F5 + (_fs7.F5 - _fs7.F6) * (_L7.F5 - _D7.F5) / (_D7.F5 - _D7.F6);
                //fas7.F6 = _fs7.F6;

                ////Chiranjit [2012 10 12]
                ////fas7.F6 = _fs7.F6;
                ////Check
                //fas7.F6 = 356.0;


                //list.Add(string.Format("CABLE 7:"));
                //list.Add(string.Format("-------"));
                //list.Add(string.Format("Force after Slip = F71 = Fs71 + (Fs71-Fs72) x (L71-D71) / D71-D72) = 338.2"));
                //list.Add(string.Format("                   F72 = Fs72 + (Fs72-Fs73) x (L72-D72) / D72-D73) = 345.3"));
                //list.Add(string.Format("                   F73 = Fs73 + (Fs73-Fs74) x (L73-D73) / D73-D74) = 347.0"));
                //list.Add(string.Format("                   F74 = Fs74 + (Fs74-Fs75) x (L74-D74) / D74-D75) = 350.0"));
                //list.Add(string.Format("                   F75 = Fs75 + (Fs75-Fs76) x (L75-D75) / D75-D76) = 353.0"));
                //list.Add(string.Format("                   F76 = Fs76 = 356.0"));
                //list.Add(string.Format(""));


                //PSC_Force_Data S7 = new PSC_Force_Data(6);

                //S7.F1 = 0.099 * D;
                //S7.F2 = cover1;
                //S7.F3 = cover1;
                //S7.F4 = cover1;
                //S7.F5 = cover1;
                //S7.F6 = cover1;

                //list.Add(string.Format("Height from Sofit = S71 = 0.099xD = {0:f3}", S7.F1));
                //list.Add(string.Format("                    S72 = Cover   = {0:f3}", S7.F2));
                //list.Add(string.Format("                    S73 = Cover   = {0:f3}", S7.F3));
                //list.Add(string.Format("                    S74 = Cover   = {0:f3}", S7.F4));
                //list.Add(string.Format("                    S75 = Cover   = {0:f3}", S7.F5));
                //list.Add(string.Format("                    S76 = Cover   = {0:f3}", S7.F6));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));

                #endregion Chiranjit [2013 06 20]


                //list.Add(string.Format("Height from Sofit =         S71=0.099xD=0.248        S72= Cover=0.130        S73=Cover=0.130        "));
                //list.Add(string.Format("S54 = Cover=0.130        S75= Cover=0.130        S76=Cover=0.130TABLE 11 : Cable Profile (Distances & Height) and Forces after Friction & Slip Losses at different design "));

                list.Add(string.Format("TABLE 11 : Cable Profile (Distances & Height) and Forces after Friction"));
                list.Add(string.Format("            & Slip Losses at different design"));
                list.Add(string.Format("            Points: (Left half is described only, Right half being symmetrical)"));
                list.Add(string.Format("---------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("".PadLeft(120, '-')));

                format = format.Replace("}", ":f3}");
                list.Add(string.Format(format,
                    "",
                    "At Support",
                    "At ‘D’",
                    "At ‘L/8’",
                    "At ‘L/4’",
                    "At ‘3L/8’",
                    "At ‘L/2’"));
                list.Add(string.Format("".PadLeft(120, '-')));


                list.Add(string.Format(format,
                    "Distance from Left end:",
                    L_support,
                    L_Deff,
                    L_8,
                    L_4,
                    L3_8,
                    L_2));
                //list.Add(string.Format("Distance from Left end:    0.33                2.83                6.30                12.27                18.24                24.21"));
                list.Add(string.Format("".PadLeft(120, '-')));

                #region Cable Numbers

                PSC_Force_Data Cable_Nos_Support = new PSC_Force_Data(7);
                PSC_Force_Data Cable_Nos_At_D = new PSC_Force_Data(7);
                PSC_Force_Data Cable_Nos_At_L8 = new PSC_Force_Data(7);
                PSC_Force_Data Cable_Nos_At_L4 = new PSC_Force_Data(7);
                PSC_Force_Data Cable_Nos_At_3L8 = new PSC_Force_Data(7);
                PSC_Force_Data Cable_Nos_At_L2 = new PSC_Force_Data(7);








                //To be Checked
                for (int i = 0; i < Nc_Left; i++)
                {
                    //if (list_fas[i].F1 > 0) Cable_Nos_Support[i] = 2;
                    //else Cable_Nos_Support[i] = 0;

                    //if (list_fas[i].F2 > 0) Cable_Nos_At_D[i] = 2;
                    //else Cable_Nos_At_D[i] = 0;

                    //if (list_fas[i].F3 > 0) Cable_Nos_At_L8[i] = 2;
                    //else Cable_Nos_At_L8[i] = 0;

                    //if (list_fas[i].F4 > 0) Cable_Nos_At_L4[i] = 2;
                    //else Cable_Nos_At_L4[i] = 0;

                    //if (list_fas[i].F5 > 0) Cable_Nos_At_3L8[i] = 2;
                    //else Cable_Nos_At_3L8[i] = 0;

                    //if (list_fas[i].F6 > 0) Cable_Nos_At_L2[i] = 2;
                    //else Cable_Nos_At_L2[i] = 0;

                    Cable_Nos_Support[i] = Cables[i].PresenseOfCable.F1;
                    Cable_Nos_At_D[i] = Cables[i].PresenseOfCable.F2;
                    Cable_Nos_At_L8[i] = Cables[i].PresenseOfCable.F3;
                    Cable_Nos_At_L4[i] = Cables[i].PresenseOfCable.F4;
                    Cable_Nos_At_3L8[i] = Cables[i].PresenseOfCable.F5;
                    Cable_Nos_At_L2[i] = Cables[i].PresenseOfCable.F6;


                    //if (list_fas[i].F2 > 0) Cable_Nos_At_D[i] = 2;
                    //else Cable_Nos_At_D[i] = 0;

                    //if (list_fas[i].F3 > 0) Cable_Nos_At_L8[i] = 2;
                    //else Cable_Nos_At_L8[i] = 0;

                    //if (list_fas[i].F4 > 0) Cable_Nos_At_L4[i] = 2;
                    //else Cable_Nos_At_L4[i] = 0;

                    //if (list_fas[i].F5 > 0) Cable_Nos_At_3L8[i] = 2;
                    //else Cable_Nos_At_3L8[i] = 0;

                    //if (list_fas[i].F6 > 0) Cable_Nos_At_L2[i] = 2;
                    //else Cable_Nos_At_L2[i] = 0;



                }


                #region Chiranjit [2013 06 20]
                //if (fas1.F1 > 0) Cable_Nos_Support.F1 = 2;
                //else Cable_Nos_Support.F1 = 0;

                //if (fas2.F1 > 0) Cable_Nos_Support.F2 = 2;
                //else Cable_Nos_Support.F2 = 0;

                //if (fas3.F1 > 0) Cable_Nos_Support.F3 = 2;
                //else Cable_Nos_Support.F3 = 0;

                //if (fas4.F1 > 0) Cable_Nos_Support.F4 = 2;
                //else Cable_Nos_Support.F4 = 0;

                //if (fas5.F1 > 0) Cable_Nos_Support.F5 = 2;
                //else Cable_Nos_Support.F5 = 0;

                //if (fas6.F1 > 0) Cable_Nos_Support.F6 = 2;
                //else Cable_Nos_Support.F6 = 0;

                //if (fas7.F1 > 0) Cable_Nos_Support.F7 = 1.052;
                //else Cable_Nos_Support.F7 = 0;

                //PSC_Force_Data Cable_Nos_At_D = new PSC_Force_Data(7);

                //if (fas1.F2 > 0) Cable_Nos_At_D.F1 = 2;
                //else Cable_Nos_At_D.F1 = 0;

                //if (fas2.F2 > 0) Cable_Nos_At_D.F2 = 2;
                //else Cable_Nos_At_D.F2 = 0;

                //if (fas3.F2 > 0) Cable_Nos_At_D.F3 = 2;
                //else Cable_Nos_At_D.F3 = 0;

                //if (fas4.F2 > 0) Cable_Nos_At_D.F4 = 2;
                //else Cable_Nos_At_D.F4 = 0;

                //if (fas5.F2 > 0) Cable_Nos_At_D.F5 = 2;
                //else Cable_Nos_At_D.F5 = 0;

                //if (fas6.F2 > 0) Cable_Nos_At_D.F6 = 2;
                //else Cable_Nos_At_D.F6 = 0;

                //if (fas7.F2 > 0) Cable_Nos_At_D.F7 = 1.052;
                //else Cable_Nos_At_D.F7 = 0;


                //PSC_Force_Data Cable_Nos_At_L8 = new PSC_Force_Data(7);

                //if (fas1.F3 > 0) Cable_Nos_At_L8.F1 = 2;
                //else Cable_Nos_At_L8.F1 = 0;

                //if (fas2.F3 > 0) Cable_Nos_At_L8.F2 = 2;
                //else Cable_Nos_At_L8.F2 = 0;

                //if (fas3.F3 > 0) Cable_Nos_At_L8.F3 = 2;
                //else Cable_Nos_At_L8.F3 = 0;

                //if (fas4.F3 > 0) Cable_Nos_At_L8.F4 = 2;
                //else Cable_Nos_At_L8.F4 = 0;

                //if (fas5.F3 > 0) Cable_Nos_At_L8.F5 = 2;
                //else Cable_Nos_At_L8.F5 = 0;

                //if (fas6.F3 > 0) Cable_Nos_At_L8.F6 = 2;
                //else Cable_Nos_At_L8.F6 = 0;

                //if (fas7.F3 > 0) Cable_Nos_At_L8.F7 = 1.052;
                //else Cable_Nos_At_L8.F7 = 0;





                //PSC_Force_Data Cable_Nos_At_L4 = new PSC_Force_Data(7);

                //if (fas1.F4 > 0) Cable_Nos_At_L4.F1 = 2;
                //else Cable_Nos_At_L4.F1 = 0;

                //if (fas2.F4 > 0) Cable_Nos_At_L4.F2 = 2;
                //else Cable_Nos_At_L4.F2 = 0;

                //if (fas3.F4 > 0) Cable_Nos_At_L4.F3 = 2;
                //else Cable_Nos_At_L4.F3 = 0;

                //if (fas4.F4 > 0) Cable_Nos_At_L4.F4 = 2;
                //else Cable_Nos_At_L4.F4 = 0;

                //if (fas5.F4 > 0) Cable_Nos_At_L4.F5 = 2;
                //else Cable_Nos_At_L4.F5 = 0;

                //if (fas6.F4 > 0) Cable_Nos_At_L4.F6 = 2;
                //else Cable_Nos_At_L4.F6 = 0;

                //if (fas7.F4 > 0) Cable_Nos_At_L4.F7 = 1.052;
                //else Cable_Nos_At_L4.F7 = 0;


                //PSC_Force_Data Cable_Nos_At_3L8 = new PSC_Force_Data(7);

                //if (fas1.F5 > 0) Cable_Nos_At_3L8.F1 = 2;
                //else Cable_Nos_At_3L8.F1 = 0;

                //if (fas2.F5 > 0) Cable_Nos_At_3L8.F2 = 2;
                //else Cable_Nos_At_3L8.F2 = 0;

                //if (fas3.F5 > 0) Cable_Nos_At_3L8.F3 = 2;
                //else Cable_Nos_At_3L8.F3 = 0;

                //if (fas4.F5 > 0) Cable_Nos_At_3L8.F4 = 2;
                //else Cable_Nos_At_3L8.F4 = 0;

                //if (fas5.F5 > 0) Cable_Nos_At_3L8.F5 = 2;
                //else Cable_Nos_At_3L8.F5 = 0;

                //if (fas6.F5 > 0) Cable_Nos_At_3L8.F6 = 2;
                //else Cable_Nos_At_3L8.F6 = 0;

                //if (fas7.F5 > 0) Cable_Nos_At_3L8.F7 = 1.052;
                //else Cable_Nos_At_3L8.F7 = 0;


                //PSC_Force_Data Cable_Nos_At_L2 = new PSC_Force_Data(7);

                //if (fas1.F6 > 0) Cable_Nos_At_L2.F1 = 2;
                //else Cable_Nos_At_L2.F1 = 0;

                //if (fas2.F6 > 0) Cable_Nos_At_L2.F2 = 2;
                //else Cable_Nos_At_L2.F2 = 0;

                //if (fas3.F6 > 0) Cable_Nos_At_L2.F3 = 2;
                //else Cable_Nos_At_L2.F3 = 0;

                //if (fas4.F6 > 0) Cable_Nos_At_L2.F4 = 2;
                //else Cable_Nos_At_L2.F4 = 0;

                //if (fas5.F6 > 0) Cable_Nos_At_L2.F5 = 2;
                //else Cable_Nos_At_L2.F5 = 0;

                //if (fas6.F6 > 0) Cable_Nos_At_L2.F6 = 2;
                //else Cable_Nos_At_L2.F6 = 0;

                //if (fas7.F6 > 0) Cable_Nos_At_L2.F7 = 1.052;
                //else Cable_Nos_At_L2.F7 = 0;

                #endregion Chiranjit [2013 06 20]


                #endregion Cable Numbers


                for (int i = 0; i < Nc_Left; i++)
                {

                    list.Add(string.Format("CABLE {0} :", (i + 1)));

                    int cbl_no = 0;
                    list.Add(string.Format(format,
                        "Force after Slip:",
                        list_fas[i].F1,
                        list_fas[i].F2,
                        list_fas[i].F3,
                        list_fas[i].F4,
                        list_fas[i].F5,
                        list_fas[i].F6));

                    list.Add(string.Format(format,
                        "Height from sofit:",
                        list_S[i].F1,
                        list_S[i].F2,
                        list_S[i].F3,
                        list_S[i].F4,
                        list_S[i].F5,
                        list_S[i].F6));

                    list.Add(string.Format(format.Replace("f3", ""),
                        "Cable" + (i + 1) + "_Nos.",
                        Cable_Nos_Support[i],
                        Cable_Nos_At_D[i],
                        Cable_Nos_At_L8[i],
                        Cable_Nos_At_L4[i],
                        Cable_Nos_At_3L8[i],
                        Cable_Nos_At_L2[i]));
                    cbl_no++;
                    //list.Add(string.Format("Force after Slip:          326.6                335.9                342.6                345.5                348.3                345.4"));
                    //list.Add(string.Format("Height from sofit:         1.672                1.505                1.274                0.876                0.478                0.130"));
                    list.Add(string.Format("".PadLeft(120, '-')));

                }



                #region Chiranjit [2013 06 20]



                //list.Add(string.Format("CABLE 1:"));


                //int cbl_no = 0;
                //list.Add(string.Format(format,
                //    "Force after Slip:",
                //    fas1.F1,
                //    fas1.F2,
                //    fas1.F3,
                //    fas1.F4,
                //    fas1.F5,
                //    fas1.F6));

                //list.Add(string.Format(format,
                //    "Height from sofit:",
                //    S1.F1,
                //    S1.F2,
                //    S1.F3,
                //    S1.F4,
                //    S1.F5,
                //    S1.F6));

                //list.Add(string.Format(format.Replace("f3", ""),
                //    "Cable" + (cbl_no + 1) + "_Nos.",
                //    Cable_Nos_Support[cbl_no],
                //    Cable_Nos_At_D[cbl_no],
                //    Cable_Nos_At_L8[cbl_no],
                //    Cable_Nos_At_L4[cbl_no],
                //    Cable_Nos_At_3L8[cbl_no],
                //    Cable_Nos_At_L2[cbl_no]));
                //cbl_no++;
                ////list.Add(string.Format("Force after Slip:          326.6                335.9                342.6                345.5                348.3                345.4"));
                ////list.Add(string.Format("Height from sofit:         1.672                1.505                1.274                0.876                0.478                0.130"));
                //list.Add(string.Format("".PadLeft(120, '-')));









                //list.Add(string.Format("CABLE 2:"));

                //list.Add(string.Format(format,
                //    "Force after Slip:",
                //    fas2.F1,
                //    fas2.F2,
                //    fas2.F3,
                //    fas2.F4,
                //    fas2.F5,
                //    fas2.F6));

                //list.Add(string.Format(format,
                //    "Height from sofit:",
                //    S2.F1,
                //    S2.F2,
                //    S2.F3,
                //    S2.F4,
                //    S2.F5,
                //    S2.F6));
                ////list.Add(string.Format("Force after Slip:          326.5                335.8                343.1                347.4                350.7                333.6"));
                ////list.Add(string.Format("Height from sofit:         1.104                0.970                0.783                0.462                0.147                0.130"));



                //list.Add(string.Format(format.Replace("f3", ""),
                //    "Cable" + (cbl_no + 1) + "_Nos.",
                //    Cable_Nos_Support[cbl_no],
                //    Cable_Nos_At_D[cbl_no],
                //    Cable_Nos_At_L8[cbl_no],
                //    Cable_Nos_At_L4[cbl_no],
                //    Cable_Nos_At_3L8[cbl_no],
                //    Cable_Nos_At_L2[cbl_no]));
                //cbl_no++;


                //list.Add(string.Format("".PadLeft(120, '-')));

                //list.Add(string.Format("CABLE 3:"));

                //list.Add(string.Format(format,
                //    "Force after Slip:",
                //    fas3.F1,
                //    fas3.F2,
                //    fas3.F3,
                //    fas3.F4,
                //    fas3.F5,
                //    fas3.F6));

                //list.Add(string.Format(format,
                //    "Height from sofit:",
                //    S3.F1,
                //    S3.F2,
                //    S3.F3,
                //    S3.F4,
                //    S3.F5,
                //    S3.F6));



                //list.Add(string.Format(format.Replace("f3", ""),
                //    "Cable" + (cbl_no + 1) + "_Nos.",
                //    Cable_Nos_Support[cbl_no],
                //    Cable_Nos_At_D[cbl_no],
                //    Cable_Nos_At_L8[cbl_no],
                //    Cable_Nos_At_L4[cbl_no],
                //    Cable_Nos_At_3L8[cbl_no],
                //    Cable_Nos_At_L2[cbl_no]));
                //cbl_no++;


                ////list.Add(string.Format("Force after Slip:          0.0                0.0                0.0                0.0                316.9                334.2"));
                ////list.Add(string.Format("Height from sofit:         0.000                0.000                0.000                0.000                0.167                0.130"));
                //list.Add(string.Format("".PadLeft(120, '-')));

                //list.Add(string.Format("CABLE 4:"));

                //list.Add(string.Format(format,
                //    "Force after Slip:",
                //    fas4.F1,
                //    fas4.F2,
                //    fas4.F3,
                //    fas4.F4,
                //    fas4.F5,
                //    fas4.F6));

                //list.Add(string.Format(format,
                //    "Height from sofit:",
                //    S4.F1,
                //    S4.F2,
                //    S4.F3,
                //    S4.F4,
                //    S4.F5,
                //    S4.F6));


                //list.Add(string.Format(format.Replace("f3", ""),
                //    "Cable" + (cbl_no + 1) + "_Nos.",
                //    Cable_Nos_Support[cbl_no],
                //    Cable_Nos_At_D[cbl_no],
                //    Cable_Nos_At_L8[cbl_no],
                //    Cable_Nos_At_L4[cbl_no],
                //    Cable_Nos_At_3L8[cbl_no],
                //    Cable_Nos_At_L2[cbl_no]));
                //cbl_no++;


                ////list.Add(string.Format("Force after Slip:          0.0                0.0                0.0                307.3                338.6                339.5"));
                ////list.Add(string.Format("Height from sofit:         0.000                0.000                0.000                0.279                0.130                0.130"));
                //list.Add(string.Format("".PadLeft(120, '-')));

                //list.Add(string.Format("CABLE 5:"));

                //list.Add(string.Format(format,
                //    "Force after Slip:",
                //    fas5.F1,
                //    fas5.F2,
                //    fas5.F3,
                //    fas5.F4,
                //    fas5.F5,
                //    fas5.F6));

                //list.Add(string.Format(format,
                //    "Height from sofit:",
                //    S5.F1,
                //    S5.F2,
                //    S5.F3,
                //    S5.F4,
                //    S5.F5,
                //    S5.F6));


                //list.Add(string.Format(format.Replace("f3", ""),
                //    "Cable" + (cbl_no + 1) + "_Nos.",
                //    Cable_Nos_Support[cbl_no],
                //    Cable_Nos_At_D[cbl_no],
                //    Cable_Nos_At_L8[cbl_no],
                //    Cable_Nos_At_L4[cbl_no],
                //    Cable_Nos_At_3L8[cbl_no],
                //    Cable_Nos_At_L2[cbl_no]));
                //cbl_no++;


                ////list.Add(string.Format("Force after Slip:          328.7                330.6                338.4                341.4                339.7                335.6"));
                ////list.Add(string.Format("Height from sofit:         0.522                0.312                0.130                0.130                0.130                0.130"));
                //list.Add(string.Format("".PadLeft(120, '-')));

                //list.Add(string.Format("CABLE 6:"));

                //list.Add(string.Format(format,
                //    "Force after Slip:",
                //    fas6.F1,
                //    fas6.F2,
                //    fas6.F3,
                //    fas6.F4,
                //    fas6.F5,
                //    fas6.F6));

                //list.Add(string.Format(format,
                //    "Height from sofit:",
                //    S6.F1,
                //    S6.F2,
                //    S6.F3,
                //    S6.F4,
                //    S6.F5,
                //    S6.F6));

                //list.Add(string.Format(format.Replace("f3", ""),
                //    "Cable" + (cbl_no + 1) + "_Nos.",
                //    Cable_Nos_Support[cbl_no],
                //    Cable_Nos_At_D[cbl_no],
                //    Cable_Nos_At_L8[cbl_no],
                //    Cable_Nos_At_L4[cbl_no],
                //    Cable_Nos_At_3L8[cbl_no],
                //    Cable_Nos_At_L2[cbl_no]));
                //cbl_no++;


                ////list.Add(string.Format("Force after Slip:          317.0                325.0                336.5                343.1                342.0                340.9"));
                ////list.Add(string.Format("Height from sofit:         0.248                0.130                0.130                0.130                0.130                0.130"));
                //list.Add(string.Format("".PadLeft(120, '-')));

                //list.Add(string.Format("CABLE 7:"));

                //list.Add(string.Format(format,
                //    "Force after Slip:",
                //    fas7.F1,
                //    fas7.F2,
                //    fas7.F3,
                //    fas7.F4,
                //    fas7.F5,
                //    fas7.F6));

                //list.Add(string.Format(format,
                //    "Height from sofit:",
                //    S7.F1,
                //    S7.F2,
                //    S7.F3,
                //    S7.F4,
                //    S7.F5,
                //    S7.F6));

                //list.Add(string.Format(format.Replace("f3", ""),
                //    "Cable" + (cbl_no + 1) + "_Nos.",
                //    Cable_Nos_Support[cbl_no],
                //    Cable_Nos_At_D[cbl_no],
                //    Cable_Nos_At_L8[cbl_no],
                //    Cable_Nos_At_L4[cbl_no],
                //    Cable_Nos_At_3L8[cbl_no],
                //    Cable_Nos_At_L2[cbl_no]));
                //cbl_no++;
                #endregion Chiranjit [2013 06 20]


                //list.Add(string.Format("Force after Slip:          338.2                345.3                347.0                350.0                353.0                356.0"));
                //list.Add(string.Format("Height from sofit:         0.248                0.130                0.130                0.130                0.130                0.130"));
                list.Add(string.Format("".PadLeft(120, '-')));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("Calculations for TABLE 12:"));
                //list.Add(string.Format(""));


                //list.Add(string.Format("Total number of Cables:"));
                list.Add(string.Format(""));

                #region Chiranjit [2013 06 20]
                //list.Add(string.Format("At Support : "));
                //list.Add(string.Format("------------ "));
                //for (int i = 0; i < Nc_Left; i++)
                //{

                //    list.Add(string.Format("If (P{0} > 0.0) Cable_Nos{0} = 2, else cable_Nos{0} = 0, P{0} = {1:f3}, Cable_Nos{0} = {2}", (i + 1), list_fas[i].F1, Cable_Nos_Support[i]));
                //}
                //list.Add(string.Format(""));
                //list.Add(string.Format("Total_Support_Cable_Nos = {0:f3}", Cable_Nos_Support.SUM));

                //list.Add(string.Format("At D :"));
                //list.Add(string.Format("------"));
                //for (int i = 0; i < Nc_Left; i++)
                //{
                //    list.Add(string.Format("If (P{0} > 0.0) Cable_Nos{0} = 2, else cable_Nos{0} = 0, P{0} = {1:f3}, Cable_Nos{0} = {2}", (i + 1), list_fas[i].F1, Cable_Nos_At_D[i]));
                //}
                //list.Add(string.Format(""));
                //list.Add(string.Format("Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_D.SUM));

                //list.Add(string.Format("At ‘L/8’ :"));
                //list.Add(string.Format("----------"));
                //for (int i = 0; i < Nc_Left; i++)
                //{
                //    list.Add(string.Format("If (P{0} > 0.0) Cable_Nos{0} = 2, else cable_Nos{0} = 0, P{0} = {1:f3}, Cable_Nos{0} = {2}", (i + 1), list_fas[i].F1, Cable_Nos_At_L8[i]));
                //}
                //list.Add(string.Format(""));
                //list.Add(string.Format("Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_L8.SUM));

                //list.Add(string.Format("At ‘L/4’ :"));
                //list.Add(string.Format("----------"));
                //for (int i = 0; i < Nc_Left; i++)
                //{
                //    list.Add(string.Format("If (P{0} > 0.0) Cable_Nos{0} = 2, else cable_Nos{0} = 0, P{0} = {1:f3}, Cable_Nos{0} = {2}", (i + 1), list_fas[i].F1, Cable_Nos_At_L4[i]));
                //}
                //list.Add(string.Format(""));
                //list.Add(string.Format("Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_L4.SUM));

                //list.Add(string.Format("At ‘3L/8’ :"));
                //list.Add(string.Format("----------"));
                //for (int i = 0; i < Nc_Left; i++)
                //{
                //    list.Add(string.Format("If (P{0} > 0.0) Cable_Nos{0} = 2, else cable_Nos{0} = 0, P{0} = {1:f3}, Cable_Nos{0} = {2}", (i + 1), list_fas[i].F1, Cable_Nos_At_3L8[i]));
                //}
                //list.Add(string.Format(""));
                //list.Add(string.Format("Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_3L8.SUM));

                //list.Add(string.Format("At ‘L/2’ :"));
                //list.Add(string.Format("----------"));
                //for (int i = 0; i < Nc_Left; i++)
                //{
                //    list.Add(string.Format("If (P{0} > 0.0) Cable_Nos{0} = 2, else cable_Nos{0} = 0, P{0} = {1:f3}, Cable_Nos{0} = {2}", (i + 1), list_fas[i].F1, Cable_Nos_At_L2[i]));
                //}
                //list.Add(string.Format(""));
                //list.Add(string.Format("Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_L2.SUM));
                #endregion Chiranjit [2013 06 20]



                #region Chiranjit [2013 06 20]

                //list.Add(string.Format("At Support:     If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = {0:f3}, Cable_Nos1 = {1}", fas1.F1, Cable_Nos_Support.F1));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = {0:f3}, Cable_Nos2 = {1}", fas2.F1, Cable_Nos_Support.F2));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = {0:f3}, Cable_Nos3 = {1}", fas3.F1, Cable_Nos_Support.F3));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = {0:f3}, Cable_Nos4 = {1}", fas4.F1, Cable_Nos_Support.F4));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos5 = {1}", fas5.F1, Cable_Nos_Support.F5));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos6 = {1}", fas6.F1, Cable_Nos_Support.F6));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = {0:f3}, Cable_Nos7 = {1}", fas7.F1, Cable_Nos_Support.F7));
                //list.Add(string.Format("                Total_Support_Cable_Nos = {0:f3}", Cable_Nos_Support.SUM));
                //list.Add(string.Format(""));


                //list.Add(string.Format("At D :          If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = {0:f3}, Cable_Nos1 = {1}", fas1.F2, Cable_Nos_At_D.F1));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = {0:f3}, Cable_Nos2 = {1}", fas2.F2, Cable_Nos_At_D.F2));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = {0:f3}, Cable_Nos3 = {1}", fas3.F2, Cable_Nos_At_D.F3));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = {0:f3}, Cable_Nos4 = {1}", fas4.F2, Cable_Nos_At_D.F4));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos5 = {1}", fas5.F2, Cable_Nos_At_D.F5));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos6 = {1}", fas6.F2, Cable_Nos_At_D.F6));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = {0:f3}, Cable_Nos7 = {1}", fas7.F2, Cable_Nos_At_D.F7));
                //list.Add(string.Format("                Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_D.SUM));
                //list.Add(string.Format(""));





                //list.Add(string.Format("At ‘L/8’ : If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = 342.6, Cable_Nos1 = 2"));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = 343.1, Cable_Nos2 = 2"));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = 0.0, Cable_Nos3 = 0"));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = 0.0, Cable_Nos4 = 0"));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = 338.4, Cable_Nos5 = 2"));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = 336.5, Cable_Nos6 = 2"));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = 347.0, Cable_Nos7 = 1.052"));
                //list.Add(string.Format("                Total_Support_Cable_Nos = 9.1"));


                //list.Add(string.Format("At ‘L/8’        If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = {0:f3}, Cable_Nos1 = {1}", fas1.F3, Cable_Nos_At_L8.F1));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = {0:f3}, Cable_Nos2 = {1}", fas2.F3, Cable_Nos_At_L8.F2));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = {0:f3}, Cable_Nos3 = {1}", fas3.F3, Cable_Nos_At_L8.F3));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = {0:f3}, Cable_Nos4 = {1}", fas4.F3, Cable_Nos_At_L8.F4));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos5 = {1}", fas5.F3, Cable_Nos_At_L8.F5));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos6 = {1}", fas6.F3, Cable_Nos_At_L8.F6));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = {0:f3}, Cable_Nos7 = {1}", fas7.F3, Cable_Nos_At_L8.F7));
                //list.Add(string.Format("                Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_L8.SUM));



                //list.Add(string.Format("                        "));
                //list.Add(string.Format("At ‘L/4’ : If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = 345.5, Cable_Nos1 = 2"));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = 347.4, Cable_Nos2 = 2"));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = 0.0, Cable_Nos3 = 0"));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = 307.3, Cable_Nos4 = 2"));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = 341.4, Cable_Nos5 = 2"));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = 343.1, Cable_Nos6 = 2"));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = 350.0, Cable_Nos7 = 1.052"));
                //list.Add(string.Format("                Total_Support_Cable_Nos = 11.052"));
                //list.Add(string.Format(""));


                //list.Add(string.Format("At ‘L/4’        If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = {0:f3}, Cable_Nos1 = {1}", fas1.F4, Cable_Nos_At_L4.F1));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = {0:f3}, Cable_Nos2 = {1}", fas2.F4, Cable_Nos_At_L4.F2));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = {0:f3}, Cable_Nos3 = {1}", fas3.F4, Cable_Nos_At_L4.F3));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = {0:f3}, Cable_Nos4 = {1}", fas4.F4, Cable_Nos_At_L4.F4));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos5 = {1}", fas5.F4, Cable_Nos_At_L4.F5));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos6 = {1}", fas6.F4, Cable_Nos_At_L4.F6));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = {0:f3}, Cable_Nos7 = {1}", fas7.F4, Cable_Nos_At_L4.F7));
                //list.Add(string.Format("                Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_L4.SUM));


                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("At ‘3L/8’:      If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = 348.3, Cable_Nos1 = 2"));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = 350.7, Cable_Nos2 = 2"));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = 316.9, Cable_Nos3 = 2"));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = 338.6, Cable_Nos4 = 2"));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = 339.7, Cable_Nos5 = 2"));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = 342.0, Cable_Nos6 = 2"));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = 353.0, Cable_Nos7 = 1.052"));
                //list.Add(string.Format("                Total_Support_Cable_Nos = 12.052"));

                //Chiranjit [2012 10 12]
                //Check
                //Cable_Nos_At_3L8.F6 = 1;


                //list.Add(string.Format("At ‘3L/8’       If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = {0:f3}, Cable_Nos1 = {1}", fas1.F5, Cable_Nos_At_3L8.F1));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = {0:f3}, Cable_Nos2 = {1}", fas2.F5, Cable_Nos_At_3L8.F2));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = {0:f3}, Cable_Nos3 = {1}", fas3.F5, Cable_Nos_At_3L8.F3));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = {0:f3}, Cable_Nos4 = {1}", fas4.F5, Cable_Nos_At_3L8.F4));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos5 = {1}", fas5.F5, Cable_Nos_At_3L8.F5));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos6 = {1}", fas6.F5, Cable_Nos_At_3L8.F6));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = {0:f3}, Cable_Nos7 = {1}", fas7.F5, Cable_Nos_At_3L8.F7));
                //list.Add(string.Format("                Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_3L8.SUM));





                //list.Add(string.Format(""));
                //list.Add(string.Format("At ‘L/2’:       If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = 345.4, Cable_Nos1 = 2"));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = 333.6, Cable_Nos2 = 2"));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = 334.2, Cable_Nos3 = 2"));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = 339.5, Cable_Nos4 = 2"));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = 335.6, Cable_Nos5 = 2"));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = 340.9, Cable_Nos6 = 2"));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = 356.0, Cable_Nos7 = 1.052"));
                //list.Add(string.Format("                Total_Support_Cable_Nos = 12.052"));

                //Chiranjit [2012 10 12]
                //Check
                //Cable_Nos_At_L2.F6 = 1;
                //list.Add(string.Format(""));
                //list.Add(string.Format("At ‘L/2’        If (P1 > 0.0) Cable_Nos1 = 2, else cable_Nos1 = 0, P1 = {0:f3}, Cable_Nos1 = {1}", fas1.F6, Cable_Nos_At_L2.F1));
                //list.Add(string.Format("                If (P2 > 0.0) Cable_Nos2 = 2, else cable_Nos2 = 0, P2 = {0:f3}, Cable_Nos2 = {1}", fas2.F6, Cable_Nos_At_L2.F2));
                //list.Add(string.Format("                If (P3 > 0.0) Cable_Nos3 = 2, else cable_Nos3 = 0, P3 = {0:f3}, Cable_Nos3 = {1}", fas3.F6, Cable_Nos_At_L2.F3));
                //list.Add(string.Format("                If (P4 > 0.0) Cable_Nos4 = 2, else cable_Nos4 = 0, P4 = {0:f3}, Cable_Nos4 = {1}", fas4.F6, Cable_Nos_At_L2.F4));
                //list.Add(string.Format("                If (P5 > 0.0) Cable_Nos5 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos5 = {1}", fas5.F6, Cable_Nos_At_L2.F5));
                //list.Add(string.Format("                If (P6 > 0.0) Cable_Nos6 = 2, else cable_Nos5 = 0, P5 = {0:f3}, Cable_Nos6 = {1}", fas6.F6, Cable_Nos_At_L2.F6));
                //list.Add(string.Format("                If (P7 > 0.0) Cable_Nos7 = 1.052, else cable_Nos7 = 0, P7 = {0:f3}, Cable_Nos7 = {1}", fas7.F6, Cable_Nos_At_L2.F7));
                //list.Add(string.Format("                Total_Support_Cable_Nos = {0:f3}", Cable_Nos_At_L2.SUM));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion Chiranjit [2013 06 20]

                list.Add(string.Format("Total_ Cable_Nos = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3}, {5:f3}",
                    Cable_Nos_Support.SUM,
                    Cable_Nos_At_D.SUM,
                    Cable_Nos_At_L8.SUM,
                    Cable_Nos_At_L4.SUM,
                    Cable_Nos_At_3L8.SUM,
                    Cable_Nos_At_L2.SUM));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Force P (Stage 1) (Ton):"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("At Support:        "));
                list.Add(string.Format(""));

                //list.Add(string.Format("Total_Support_P = 326.6 x 2 + 326.5 x 2 + 0.0 + 0.0 + 328.7 x 2 + 317.0 x 2 + 338.2 x 1.052 = 2953.4"));


                PSC_Force_Data Total_P = new PSC_Force_Data(7);

                //Total_P.F1 = (fas1.F1 * Cable_Nos_Support.F1) +
                //                (fas2.F1 * Cable_Nos_Support.F2) +
                //                (fas3.F1 * Cable_Nos_Support.F3) +
                //                (fas4.F1 * Cable_Nos_Support.F4) +
                //                (fas5.F1 * Cable_Nos_Support.F5) +
                //                (fas6.F1 * Cable_Nos_Support.F6) +
                //                (fas7.F1 * Cable_Nos_Support.F7);
                string kStr = "Total_Support_P = ";

                for (int i = 0; i < Nc_Left; i++)
                {
                    Total_P.F1 += (list_fas[i].F1 * Cable_Nos_Support[i]);
                    if (i == Nc_Left - 1)
                        kStr += string.Format("{0:f3} x {1} = {2:f3} ", list_fas[i].F1, Cable_Nos_Support[i], Total_P.F1);
                    else
                        kStr += string.Format("{0:f3} x {1} + ", list_fas[i].F1, Cable_Nos_Support[i]);
                }
                list.Add(string.Format(kStr));


                //list.Add(string.Format("Total_Support_P = {0:f3} x {1} + {2:f3} x {3} + {4:f3} x {5} + {6:f3} x {7} + {8:f3} x {9} + {10:f3} x {11} + {12:f3} x {13} = {14:f3}",
                //    fas1.F1, Cable_Nos_Support.F1,
                //    fas2.F1, Cable_Nos_Support.F2,
                //    fas3.F1, Cable_Nos_Support.F3,
                //    fas4.F1, Cable_Nos_Support.F4,
                //    fas5.F1, Cable_Nos_Support.F5,
                //    fas6.F1, Cable_Nos_Support.F6,
                //    fas7.F1, Cable_Nos_Support.F7,
                //    Total_P.F1));


                list.Add(string.Format(""));
                list.Add(string.Format("At 'D':        "));
                //list.Add(string.Format("Total_D_P = 335.9x 2 + 335.8x 2 + 0.0 + 0.0 + 330.6 x 2 + 325.0 x 2 + 345.3 x 1.052 = 3017.856"));


                kStr = "Total_D_P = ";

                for (int i = 0; i < Nc_Left; i++)
                {
                    Total_P.F2 += (list_fas[i].F2 * Cable_Nos_At_D[i]);
                    if (i == Nc_Left - 1)
                        kStr += string.Format("{0:f3} x {1} = {2:f3} ", list_fas[i].F2, Cable_Nos_At_D[i], Total_P.F2);
                    else
                        kStr += string.Format("{0:f3} x {1} + ", list_fas[i].F2, Cable_Nos_At_D[i]);
                }
                list.Add(string.Format(kStr));

                //Total_P.F2 = (fas1.F2 * Cable_Nos_At_D.F1) +
                //                    (fas2.F2 * Cable_Nos_At_D.F2) +
                //                    (fas3.F2 * Cable_Nos_At_D.F3) +
                //                    (fas4.F2 * Cable_Nos_At_D.F4) +
                //                    (fas5.F2 * Cable_Nos_At_D.F5) +
                //                    (fas6.F2 * Cable_Nos_At_D.F6) +
                //                    (fas7.F2 * Cable_Nos_At_D.F7);

                //list.Add(string.Format("Total_D_P = {0:f3} x {1} + {2:f3} x {3} + {4:f3} x {5} + {6:f3} x {7} + {8:f3} x {9} + {10:f3} x {11} + {12:f3} x {13} = {14:f3}",
                //    fas1.F2, Cable_Nos_At_D.F1,
                //    fas2.F2, Cable_Nos_At_D.F2,
                //    fas3.F2, Cable_Nos_At_D.F3,
                //    fas4.F2, Cable_Nos_At_D.F4,
                //    fas5.F2, Cable_Nos_At_D.F5,
                //    fas6.F2, Cable_Nos_At_D.F6,
                //    fas7.F2, Cable_Nos_At_D.F7,
                //    Total_P.F2));



                list.Add(string.Format(""));
                list.Add(string.Format("At 'L/8':        "));
                //list.Add(string.Format("Total_L/8_P = 342.6x 2 + 343.1 x 2 + 0.0 + 0.0 + 338.4 x 2 + 336.5 x 2 + 347.0 x 1.052 = 3086.244"));




                kStr = "Total_L/8_P = ";

                for (int i = 0; i < Nc_Left; i++)
                {
                    Total_P.F3 += (list_fas[i].F3 * Cable_Nos_At_L8[i]);
                    if (i == Nc_Left - 1)
                        kStr += string.Format("{0:f3} x {1} = {2:f3} ", list_fas[i].F3, Cable_Nos_At_L8[i], Total_P.F3);
                    else
                        kStr += string.Format("{0:f3} x {1} + ", list_fas[i].F3, Cable_Nos_At_L8[i]);
                }
                list.Add(string.Format(kStr));

                //Total_P.F3 = (fas1.F3 * Cable_Nos_At_L8.F1) +
                //                    (fas2.F3 * Cable_Nos_At_L8.F2) +
                //                    (fas3.F3 * Cable_Nos_At_L8.F3) +
                //                    (fas4.F3 * Cable_Nos_At_L8.F4) +
                //                    (fas5.F3 * Cable_Nos_At_L8.F5) +
                //                    (fas6.F3 * Cable_Nos_At_L8.F6) +
                //                    (fas7.F3 * Cable_Nos_At_L8.F7);

                //list.Add(string.Format("Total_L/8_P = {0:f3} x {1} + {2:f3} x {3} + {4:f3} x {5} + {6:f3} x {7} + {8:f3} x {9} + {10:f3} x {11} + {12:f3} x {13} = {14:f3}",
                //    fas1.F3, Cable_Nos_At_L8.F1,
                //    fas2.F3, Cable_Nos_At_L8.F2,
                //    fas3.F3, Cable_Nos_At_L8.F3,
                //    fas4.F3, Cable_Nos_At_L8.F4,
                //    fas5.F3, Cable_Nos_At_L8.F5,
                //    fas6.F3, Cable_Nos_At_L8.F6,
                //    fas7.F3, Cable_Nos_At_L8.F7,
                //    Total_P.F3));


                list.Add(string.Format(""));
                list.Add(string.Format("At 'L/4':        "));
                //list.Add(string.Format("Total_L/4_P = 345.5 x 2 + 347.4 x 2 + 0.0 + 307.3 x 2 + 341.4 x 2 + 343.1 x 2 + 350.0 x 1.052 = 3737.6"));
                list.Add(string.Format(""));



                kStr = "Total_L/4_P = ";

                for (int i = 0; i < Nc_Left; i++)
                {
                    Total_P.F4 += (list_fas[i].F4 * Cable_Nos_At_L4[i]);
                    if (i == Nc_Left - 1)
                        kStr += string.Format("{0:f3} x {1} = {2:f3} ", list_fas[i].F4, Cable_Nos_At_L4[i], Total_P.F4);
                    else
                        kStr += string.Format("{0:f3} x {1} + ", list_fas[i].F4, Cable_Nos_At_L4[i]);
                }
                list.Add(string.Format(kStr));

                //Total_P.F4 = (fas1.F4 * Cable_Nos_At_L4.F1) +
                //                    (fas2.F4 * Cable_Nos_At_L4.F2) +
                //                    (fas3.F4 * Cable_Nos_At_L4.F3) +
                //                    (fas4.F4 * Cable_Nos_At_L4.F4) +
                //                    (fas5.F4 * Cable_Nos_At_L4.F5) +
                //                    (fas6.F4 * Cable_Nos_At_L4.F6) +
                //                    (fas7.F4 * Cable_Nos_At_L4.F7);

                //list.Add(string.Format("Total_L/4_P = {0:f3} x {1} + {2:f3} x {3} + {4:f3} x {5} + {6:f3} x {7} + {8:f3} x {9} + {10:f3} x {11} + {12:f3} x {13} = {14:f3}",
                //    fas1.F4, Cable_Nos_At_L4.F1,
                //    fas2.F4, Cable_Nos_At_L4.F2,
                //    fas3.F4, Cable_Nos_At_L4.F3,
                //    fas4.F4, Cable_Nos_At_L4.F4,
                //    fas5.F4, Cable_Nos_At_L4.F5,
                //    fas6.F4, Cable_Nos_At_L4.F6,
                //    fas7.F4, Cable_Nos_At_L4.F7,
                //    Total_P.F4));



                list.Add(string.Format("At '3L/8':        "));
                //list.Add(string.Format("Total_3L/8_P = 348.3 x 2 + 350.7 x 2 + 316.9 x 1.052 + 338.6 x 2 + 339.7 x 2 + 342.0 x 2 + 353.0 x 1.052 = 4143.34"));
                list.Add(string.Format(""));



                kStr = "Total_3L/8_P = ";

                for (int i = 0; i < Nc_Left; i++)
                {
                    Total_P.F5 += (list_fas[i].F5 * Cable_Nos_At_3L8[i]);
                    if (i == Nc_Left - 1)
                        kStr += string.Format("{0:f3} x {1} = {2:f3} ", list_fas[i].F5, Cable_Nos_At_3L8[i], Total_P.F5);
                    else
                        kStr += string.Format("{0:f3} x {1} + ", list_fas[i].F5, Cable_Nos_At_3L8[i]);
                }
                list.Add(string.Format(kStr));

                //Total_P.F5 = (fas1.F5 * Cable_Nos_At_3L8.F1) +
                //                    (fas2.F5 * Cable_Nos_At_3L8.F2) +
                //                    (fas3.F5 * Cable_Nos_At_3L8.F3) +
                //                    (fas4.F5 * Cable_Nos_At_3L8.F4) +
                //                    (fas5.F5 * Cable_Nos_At_3L8.F5) +
                //                    (fas6.F5 * Cable_Nos_At_3L8.F6) +
                //                    (fas7.F5 * Cable_Nos_At_3L8.F7);

                //list.Add(string.Format("Total_3L/8_P = {0:f3} x {1} + {2:f3} x {3} + {4:f3} x {5} + {6:f3} x {7} + {8:f3} x {9} + {10:f3} x {11} + {12:f3} x {13} = {14:f3}",
                //    fas1.F5, Cable_Nos_At_3L8.F1,
                //    fas2.F5, Cable_Nos_At_3L8.F2,
                //    fas3.F5, Cable_Nos_At_3L8.F3,
                //    fas4.F5, Cable_Nos_At_3L8.F4,
                //    fas5.F5, Cable_Nos_At_3L8.F5,
                //    fas6.F5, Cable_Nos_At_3L8.F6,
                //    fas7.F5, Cable_Nos_At_3L8.F7,
                //    Total_P.F5));

                list.Add(string.Format("At 'L/2':        "));
                //list.Add(string.Format("Total_L/2_P = 345.4 x 2 + 333.6 x 2 + 334.2 x 1.052 + 339.5 x 2 + 335.6 x 2 + 340.9 x 2 + 356.0 x 1.052 = 4116.09"));

                kStr = "Total_L/2_P = ";

                for (int i = 0; i < Nc_Left; i++)
                {
                    Total_P.F6 += (list_fas[i].F6 * Cable_Nos_At_L2[i]);
                    if (i == Nc_Left - 1)
                        kStr += string.Format("{0:f3} x {1} = {2:f3} ", list_fas[i].F6, Cable_Nos_At_L2[i], Total_P.F6);
                    else
                        kStr += string.Format("{0:f3} x {1} + ", list_fas[i].F6, Cable_Nos_At_L2[i]);
                }
                list.Add(string.Format(kStr));


                //Total_P.F6 = (fas1.F6 * Cable_Nos_At_L2.F1) +
                //                    (fas2.F6 * Cable_Nos_At_L2.F2) +
                //                    (fas3.F6 * Cable_Nos_At_L2.F3) +
                //                    (fas4.F6 * Cable_Nos_At_L2.F4) +
                //                    (fas5.F6 * Cable_Nos_At_L2.F5) +
                //                    (fas6.F6 * Cable_Nos_At_L2.F6) +
                //                    (fas7.F6 * Cable_Nos_At_L2.F7);

                //list.Add(string.Format("Total_L/2_P = {0:f3} x {1} + {2:f3} x {3} + {4:f3} x {5} + {6:f3} x {7} + {8:f3} x {9} + {10:f3} x {11} + {12:f3} x {13} = {14:f3}",
                //    fas1.F6, Cable_Nos_At_L2.F1,
                //    fas2.F6, Cable_Nos_At_L2.F2,
                //    fas3.F6, Cable_Nos_At_L2.F3,
                //    fas4.F6, Cable_Nos_At_L2.F4,
                //    fas5.F6, Cable_Nos_At_L2.F5,
                //    fas6.F6, Cable_Nos_At_L2.F6,
                //    fas7.F6, Cable_Nos_At_L2.F7,
                //    Total_P.F6));



                list.Add(string.Format(""));
                //list.Add(string.Format("Total Forces P (Stage 1): 2953.4, 3017.856, 3086.244, 3737.6, 4143.34, 4116.09"));
                list.Add(string.Format("Total Forces P (Stage 1): {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3}, {5:f3}",
                                        Total_P.F1, Total_P.F2, Total_P.F3, Total_P.F4, Total_P.F5, Total_P.F6));


                list.Add(string.Format(""));
                list.Add(string.Format(""));

                PSC_Force_Data Total_h = new PSC_Force_Data(6);

                list.Add(string.Format("Height from bottom (Metre):"));
                list.Add(string.Format("At Support : "));
                //list.Add(string.Format("Total_Support_h = (h1 x Cable_Nos1 + h2 x Cable_Nos2 + 0 + 0 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h5 x Cable_Nos5 + h6 x Cable_Nos6 + h7 x Cable_Nos7) x Total_ Cable_Nos = (1.672 x 2 + 1.104 x 2 + 0 + 0 + 0.522 x 2 + 0.248 x 2 + 0.248 x 1.052)/9.1 = 0.808"));





                if (Cable_Nos_Support.SUM != 0)
                {


                    list.Add(string.Format("Total_Support_h = (h1 x Cable_Nos1 +"));
                    for (int i = 1; i < Nc_Left; i++)
                    {
                        if (i == Nc_Left - 1)
                            list.Add(string.Format("                   h{0} x Cable_Nos{0}) / Total_Cable_Nos", (i + 1)));
                        else
                            list.Add(string.Format("                   h{0} x Cable_Nos{0} +", (i + 1)));

                    }
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        Total_h.F1 += (list_S[i].F1 * Cable_Nos_Support[i]);
                    }
                    Total_h.F1 = Total_h.F1 / Cable_Nos_Support.SUM;
                    list.Add(string.Format(""));
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        if (i == 0)
                            list.Add(string.Format("                = ({0:f3} x {1} +", list_S[i].F1, Cable_Nos_Support[i]));
                        else if (i == Nc_Left - 1)
                            list.Add(string.Format("                   {0:f3} x {1} ) / {2}", list_S[i].F1, Cable_Nos_Support[i], Cable_Nos_Support.SUM));
                        else
                            list.Add(string.Format("                   {0:f3} x {1} +", list_S[i].F1, Cable_Nos_Support[i]));
                    }
                    list.Add(string.Format(""));
                    list.Add(string.Format("                = {0:f3} ", Total_h.F1));
                    //Total_h.F1 = ((S1.F1 * Cable_Nos_Support.F1) +
                    //             (S2.F1 * Cable_Nos_Support.F2) +
                    //             (S3.F1 * Cable_Nos_Support.F3) +
                    //             (S4.F1 * Cable_Nos_Support.F4) +
                    //             (S5.F1 * Cable_Nos_Support.F5) +
                    //             (S6.F1 * Cable_Nos_Support.F6) +
                    //             (S7.F1 * Cable_Nos_Support.F7)) / ;


                }








                //list.Add(string.Format("Total_Support_h = (h1 x Cable_Nos1 +"));
                //list.Add(string.Format("                   h2 x Cable_Nos2 +"));
                //list.Add(string.Format("                   h3 x Cable_Nos3 +"));
                //list.Add(string.Format("                   h4 x Cable_Nos4 +"));
                //list.Add(string.Format("                   h5 x Cable_Nos5 +"));
                //list.Add(string.Format("                   h6 x Cable_Nos6 +"));
                //list.Add(string.Format("                   h7 x Cable_Nos7 ) / Total_Cable_Nos"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = ({0:f3} x {1} +", S1.F1, Cable_Nos_Support.F1));
                //list.Add(string.Format("                   {0:f3} x {1} +", S2.F1, Cable_Nos_Support.F2));
                //list.Add(string.Format("                   {0:f3} x {1} +", S3.F1, Cable_Nos_Support.F3));
                //list.Add(string.Format("                   {0:f3} x {1} +", S4.F1, Cable_Nos_Support.F4));
                //list.Add(string.Format("                   {0:f3} x {1} +", S5.F1, Cable_Nos_Support.F5));
                //list.Add(string.Format("                   {0:f3} x {1} +", S6.F1, Cable_Nos_Support.F6));
                //list.Add(string.Format("                   {0:f3} x {1} ) / {2}", S6.F1, Cable_Nos_Support.F6, Cable_Nos_Support.SUM));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = {0:f3} ", Total_h.F1));
                //list.Add(string.Format(""));



                list.Add(string.Format("At ‘D’:"));
                //list.Add(string.Format("Total_D_h = (h1 x Cable_Nos1 + h2 x Cable_Nos2 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h5 x Cable_Nos5 + h6 x Cable_Nos6 + h7 x Cable_Nos7) x Total_ Cable_Nos = (1.505 x 2 +  0.970 x 2 + 0 + 0 + 0.312 x 2 +  0.130 x 2 +  0.130 x 1.052)/9.1 = 0.656"));

                if (Cable_Nos_At_D.SUM != 0)
                {
                    //Total_h.F2 = ((S1.F2 * Cable_Nos_At_D.F1) +
                    //             (S2.F2 * Cable_Nos_At_D.F2) +
                    //             (S3.F2 * Cable_Nos_At_D.F3) +
                    //             (S4.F2 * Cable_Nos_At_D.F4) +
                    //             (S5.F2 * Cable_Nos_At_D.F5) +
                    //             (S6.F2 * Cable_Nos_At_D.F6) +
                    //             (S7.F2 * Cable_Nos_At_D.F7)) / Cable_Nos_At_D.SUM;



                    list.Add(string.Format("Total_D_h       = (h1 x Cable_Nos1 +"));
                    for (int i = 1; i < Nc_Left; i++)
                    {
                        if (i == Nc_Left - 1)
                            list.Add(string.Format("                   h{0} x Cable_Nos{0}) / Total_Cable_Nos", (i + 1)));
                        else
                            list.Add(string.Format("                   h{0} x Cable_Nos{0} +", (i + 1)));

                    }
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        Total_h.F2 += (list_S[i].F2 * Cable_Nos_At_D[i]);
                    }
                    Total_h.F2 = Total_h.F2 / Cable_Nos_At_D.SUM;
                    list.Add(string.Format(""));
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        if (i == 0)
                            list.Add(string.Format("                = ({0:f3} x {1} +", list_S[i].F2, Cable_Nos_At_D[i]));
                        else if (i == Nc_Left - 1)
                            list.Add(string.Format("                   {0:f3} x {1} ) / {2}", list_S[i].F2, Cable_Nos_At_D[i], Cable_Nos_Support.SUM));
                        else
                            list.Add(string.Format("                   {0:f3} x {1} +", list_S[i].F2, Cable_Nos_At_D[i]));
                    }
                    list.Add(string.Format(""));
                    list.Add(string.Format("                = {0:f3} ", Total_h.F2));

                }

                //list.Add(string.Format("Total_D_h       = (h1 x Cable_Nos1 +"));
                //list.Add(string.Format("                   h2 x Cable_Nos2 +"));
                //list.Add(string.Format("                   h3 x Cable_Nos3 +"));
                //list.Add(string.Format("                   h4 x Cable_Nos4 +"));
                //list.Add(string.Format("                   h5 x Cable_Nos5 +"));
                //list.Add(string.Format("                   h6 x Cable_Nos6 +"));
                //list.Add(string.Format("                   h7 x Cable_Nos7 ) / Total_ Cable_Nos"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = ({0:f3} x {1} +", S1.F2, Cable_Nos_At_D.F1));
                //list.Add(string.Format("                   {0:f3} x {1} +", S2.F2, Cable_Nos_At_D.F2));
                //list.Add(string.Format("                   {0:f3} x {1} +", S3.F2, Cable_Nos_At_D.F3));
                //list.Add(string.Format("                   {0:f3} x {1} +", S4.F2, Cable_Nos_At_D.F4));
                //list.Add(string.Format("                   {0:f3} x {1} +", S5.F2, Cable_Nos_At_D.F5));
                //list.Add(string.Format("                   {0:f3} x {1} +", S6.F2, Cable_Nos_At_D.F6));
                //list.Add(string.Format("                   {0:f3} x {1} ) / {2}", S6.F2, Cable_Nos_At_D.F7, Cable_Nos_At_D.SUM));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = {0:f3} ", Total_h.F2));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("At ‘L/8’:"));
                //list.Add(string.Format("Total_L/8_h  = (h1 x Cable_Nos1 + h2 x Cable_Nos2 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h5 x Cable_Nos5 + h6 x Cable_Nos6 + h7 x Cable_Nos7) x Total_ Cable_Nos = (1.274 x 2 +  0.783 x 2 + 0 + 0 + 0.130 x 2 +  0.130 x 2 +  0.130 x 1.052)/9.1 = 0.496"));
                list.Add(string.Format(""));

                if (Cable_Nos_At_L8.SUM != 0)
                {
                    //Total_h.F3 = ((S1.F3 * Cable_Nos_At_L8.F1) +
                    //             (S2.F3 * Cable_Nos_At_L8.F2) +
                    //             (S3.F3 * Cable_Nos_At_L8.F3) +
                    //             (S4.F3 * Cable_Nos_At_L8.F4) +
                    //             (S5.F3 * Cable_Nos_At_L8.F5) +
                    //             (S6.F3 * Cable_Nos_At_L8.F6) +
                    //             (S7.F3 * Cable_Nos_At_L8.F7)) / Cable_Nos_At_L8.SUM;



                    list.Add(string.Format("Total_L/8_h     = (h1 x Cable_Nos1 +"));
                    for (int i = 1; i < Nc_Left; i++)
                    {
                        if (i == Nc_Left - 1)
                            list.Add(string.Format("                   h{0} x Cable_Nos{0}) / Total_Cable_Nos", (i + 1)));
                        else
                            list.Add(string.Format("                   h{0} x Cable_Nos{0} +", (i + 1)));

                    }
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        Total_h.F3 += (list_S[i].F3 * Cable_Nos_At_L8[i]);
                    }
                    Total_h.F3 = Total_h.F3 / Cable_Nos_At_L8.SUM;
                    list.Add(string.Format(""));
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        if (i == 0)
                            list.Add(string.Format("                = ({0:f3} x {1} +", list_S[i].F3, Cable_Nos_At_L8[i]));
                        else if (i == Nc_Left - 1)
                            list.Add(string.Format("                   {0:f3} x {1} ) / {2}", list_S[i].F3, Cable_Nos_At_L8[i], Cable_Nos_Support.SUM));
                        else
                            list.Add(string.Format("                   {0:f3} x {1} +", list_S[i].F3, Cable_Nos_At_L8[i]));
                    }
                    list.Add(string.Format(""));
                    list.Add(string.Format("                = {0:f3} ", Total_h.F3));

                }

                //list.Add(string.Format("Total_L/8_h     = (h1 x Cable_Nos1 +"));
                //list.Add(string.Format("                   h2 x Cable_Nos2 +"));
                //list.Add(string.Format("                   h3 x Cable_Nos3 +"));
                //list.Add(string.Format("                   h4 x Cable_Nos4 +"));
                //list.Add(string.Format("                   h5 x Cable_Nos5 +"));
                //list.Add(string.Format("                   h6 x Cable_Nos6 +"));
                //list.Add(string.Format("                   h7 x Cable_Nos7 ) / Total_ Cable_Nos"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = ({0:f3} x {1} +", S1.F3, Cable_Nos_At_L8.F1));
                //list.Add(string.Format("                   {0:f3} x {1} +", S2.F3, Cable_Nos_At_L8.F2));
                //list.Add(string.Format("                   {0:f3} x {1} +", S3.F3, Cable_Nos_At_L8.F3));
                //list.Add(string.Format("                   {0:f3} x {1} +", S4.F3, Cable_Nos_At_L8.F4));
                //list.Add(string.Format("                   {0:f3} x {1} +", S5.F3, Cable_Nos_At_L8.F5));
                //list.Add(string.Format("                   {0:f3} x {1} +", S6.F3, Cable_Nos_At_L8.F6));
                //list.Add(string.Format("                   {0:f3} x {1} ) / {2}", S6.F3, Cable_Nos_At_L8.F7, Cable_Nos_At_L8.SUM));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = {0:f3} ", Total_h.F3));
                //list.Add(string.Format(""));


                list.Add(string.Format("At ‘L/4’:"));
                //list.Add(string.Format("Total_L/4_h = (h1 x Cable_Nos1 + h2 x Cable_Nos2 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h5 x Cable_Nos5 + h6 x Cable_Nos6 + h7 x Cable_Nos7) x Total_ Cable_Nos = (0.876 x 2 + 0.462 x 2 + 0.000 + 0.279 x 2 + 0.130 x 2 + 0.130 x 2 + 0.130 x 1.052)/9.1 = 0.428"));


                if (Cable_Nos_At_L4.SUM != 0)
                {
                    //Total_h.F4 = ((S1.F4 * Cable_Nos_At_L4.F1) +
                    //             (S2.F4 * Cable_Nos_At_L4.F2) +
                    //             (S3.F4 * Cable_Nos_At_L4.F3) +
                    //             (S4.F4 * Cable_Nos_At_L4.F4) +
                    //             (S5.F4 * Cable_Nos_At_L4.F5) +
                    //             (S6.F4 * Cable_Nos_At_L4.F6) +
                    //             (S7.F4 * Cable_Nos_At_L4.F7)) / Cable_Nos_At_L4.SUM;


                    list.Add(string.Format("Total_L/4_h     = (h1 x Cable_Nos1 +"));
                    for (int i = 1; i < Nc_Left; i++)
                    {
                        if (i == Nc_Left - 1)
                            list.Add(string.Format("                   h{0} x Cable_Nos{0}) / Total_Cable_Nos", (i + 1)));
                        else
                            list.Add(string.Format("                   h{0} x Cable_Nos{0} +", (i + 1)));

                    }
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        Total_h.F4 += (list_S[i].F4 * Cable_Nos_At_L4[i]);
                    }
                    Total_h.F4 = Total_h.F4 / Cable_Nos_At_L4.SUM;
                    list.Add(string.Format(""));
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        if (i == 0)
                            list.Add(string.Format("                = ({0:f3} x {1} +", list_S[i].F4, Cable_Nos_At_L4[i]));
                        else if (i == Nc_Left - 1)
                            list.Add(string.Format("                   {0:f3} x {1} ) / {2}", list_S[i].F4, Cable_Nos_At_L4[i], Cable_Nos_Support.SUM));
                        else
                            list.Add(string.Format("                   {0:f3} x {1} +", list_S[i].F4, Cable_Nos_At_L4[i]));
                    }
                    list.Add(string.Format(""));
                    list.Add(string.Format("                = {0:f3} ", Total_h.F4));


                }

                //list.Add(string.Format("Total_L/4_h     = (h1 x Cable_Nos1 +"));
                //list.Add(string.Format("                   h2 x Cable_Nos2 +"));
                //list.Add(string.Format("                   h3 x Cable_Nos3 +"));
                //list.Add(string.Format("                   h4 x Cable_Nos4 +"));
                //list.Add(string.Format("                   h5 x Cable_Nos5 +"));
                //list.Add(string.Format("                   h6 x Cable_Nos6 +"));
                //list.Add(string.Format("                   h7 x Cable_Nos7 ) / Total_Cable_Nos"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = ({0:f3} x {1} +", S1.F4, Cable_Nos_At_L4.F1));
                //list.Add(string.Format("                   {0:f3} x {1} +", S2.F4, Cable_Nos_At_L4.F2));
                //list.Add(string.Format("                   {0:f3} x {1} +", S3.F4, Cable_Nos_At_L4.F3));
                //list.Add(string.Format("                   {0:f3} x {1} +", S4.F4, Cable_Nos_At_L4.F4));
                //list.Add(string.Format("                   {0:f3} x {1} +", S5.F4, Cable_Nos_At_L4.F5));
                //list.Add(string.Format("                   {0:f3} x {1} +", S6.F4, Cable_Nos_At_L4.F6));
                //list.Add(string.Format("                   {0:f3} x {1} ) / {2}", S6.F4, Cable_Nos_At_L8.F7, Cable_Nos_At_L4.SUM));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = {0:f3} ", Total_h.F4));
                list.Add(string.Format(""));
                //list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format(" At ‘3L/8’:"));
                //list.Add(string.Format("Total_3L/8_h = (h1 x Cable_Nos1 + h2 x Cable_Nos2 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h5 x Cable_Nos5 + h6 x Cable_Nos6 + h7 x Cable_Nos7) x Total_ Cable_Nos = (0.478 x 2 + 0.147 x 2 + 0.167 x 1.052 + 0.130 x 2 + 0.130 x 2 + 0.130 x 2 + 0.130 x 1.052)/9.1 = 0.257"));


                if (Cable_Nos_At_3L8.SUM != 0)
                {
                    //Total_h.F5 = ((S1.F5 * Cable_Nos_At_3L8.F1) +
                    //             (S2.F5 * Cable_Nos_At_3L8.F2) +
                    //             (S3.F5 * Cable_Nos_At_3L8.F3) +
                    //             (S4.F5 * Cable_Nos_At_3L8.F4) +
                    //             (S5.F5 * Cable_Nos_At_3L8.F5) +
                    //             (S6.F5 * Cable_Nos_At_3L8.F6) +
                    //             (S7.F5 * Cable_Nos_At_3L8.F7)) / Cable_Nos_At_3L8.SUM;

                    list.Add(string.Format("Total_3L/8_h    = (h1 x Cable_Nos1 +"));
                    for (int i = 1; i < Nc_Left; i++)
                    {
                        if (i == Nc_Left - 1)
                            list.Add(string.Format("                   h{0} x Cable_Nos{0}) / Total_Cable_Nos", (i + 1)));
                        else
                            list.Add(string.Format("                   h{0} x Cable_Nos{0} +", (i + 1)));

                    }
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        Total_h.F5 += (list_S[i].F5 * Cable_Nos_At_3L8[i]);
                    }
                    Total_h.F5 = Total_h.F5 / Cable_Nos_At_3L8.SUM;
                    list.Add(string.Format(""));
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        if (i == 0)
                            list.Add(string.Format("                = ({0:f3} x {1} +", list_S[i].F5, Cable_Nos_At_3L8[i]));
                        else if (i == Nc_Left - 1)
                            list.Add(string.Format("                   {0:f3} x {1} ) / {2}", list_S[i].F5, Cable_Nos_At_3L8[i], Cable_Nos_Support.SUM));
                        else
                            list.Add(string.Format("                   {0:f3} x {1} +", list_S[i].F5, Cable_Nos_At_3L8[i]));
                    }
                    list.Add(string.Format(""));
                    list.Add(string.Format("                = {0:f3} ", Total_h.F5));


                }

                //list.Add(string.Format("Total_3L/8_h    = (h1 x Cable_Nos1 +"));
                //list.Add(string.Format("                   h2 x Cable_Nos2 +"));
                //list.Add(string.Format("                   h3 x Cable_Nos3 +"));
                //list.Add(string.Format("                   h4 x Cable_Nos4 +"));
                //list.Add(string.Format("                   h5 x Cable_Nos5 +"));
                //list.Add(string.Format("                   h6 x Cable_Nos6 +"));
                //list.Add(string.Format("                   h7 x Cable_Nos7 ) / Total_Cable_Nos"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = ({0:f3} x {1} +", S1.F5, Cable_Nos_At_3L8.F1));
                //list.Add(string.Format("                   {0:f3} x {1} +", S2.F5, Cable_Nos_At_3L8.F2));
                //list.Add(string.Format("                   {0:f3} x {1} +", S3.F5, Cable_Nos_At_3L8.F3));
                //list.Add(string.Format("                   {0:f3} x {1} +", S4.F5, Cable_Nos_At_3L8.F4));
                //list.Add(string.Format("                   {0:f3} x {1} +", S5.F5, Cable_Nos_At_3L8.F5));
                //list.Add(string.Format("                   {0:f3} x {1} +", S6.F5, Cable_Nos_At_3L8.F6));
                //list.Add(string.Format("                   {0:f3} x {1} ) / {2}", S6.F5, Cable_Nos_At_3L8.F7, Cable_Nos_At_3L8.SUM));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = {0:f3} ", Total_h.F5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("At ‘L/2’:"));
                //list.Add(string.Format("Total_L/2_h = (h1 x Cable_Nos1 + h2 x Cable_Nos2 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h3 x Cable_Nos3 + h4 x Cable_Nos4 + h5 x Cable_Nos5 + h6 x Cable_Nos6 + h7 x Cable_Nos7) x Total_ Cable_Nos = (0.130 x 2 + 0.130 x 2 + 0.130 x 1.052 + 0.130 x 2 + 0.130 x 2 + 0.130 x 2 + 0.130 x 1.052)/9.1 = 0.173"));
                list.Add(string.Format(""));



                if (Cable_Nos_At_L2.SUM != 0)
                {
                    //Total_h.F6 = ((S1.F6 * Cable_Nos_At_L2.F1) +
                    //             (S2.F6 * Cable_Nos_At_L2.F2) +
                    //             (S3.F6 * Cable_Nos_At_L2.F3) +
                    //             (S4.F6 * Cable_Nos_At_L2.F4) +
                    //             (S5.F6 * Cable_Nos_At_L2.F5) +
                    //             (S6.F6 * Cable_Nos_At_L2.F6) +
                    //             (S7.F6 * Cable_Nos_At_L2.F7)) / Cable_Nos_At_L2.SUM;


                    list.Add(string.Format("Total_L/2_h     = (h1 x Cable_Nos1 +"));
                    for (int i = 1; i < Nc_Left; i++)
                    {
                        if (i == Nc_Left - 1)
                            list.Add(string.Format("                   h{0} x Cable_Nos{0}) / Total_Cable_Nos", (i + 1)));
                        else
                            list.Add(string.Format("                   h{0} x Cable_Nos{0} +", (i + 1)));

                    }
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        Total_h.F6 += (list_S[i].F6 * Cable_Nos_At_L2[i]);
                    }
                    Total_h.F6 = Total_h.F6 / Cable_Nos_At_L2.SUM;
                    list.Add(string.Format(""));
                    for (int i = 0; i < Nc_Left; i++)
                    {
                        if (i == 0)
                            list.Add(string.Format("                = ({0:f3} x {1} +", list_S[i].F6, Cable_Nos_At_L2[i]));
                        else if (i == Nc_Left - 1)
                            list.Add(string.Format("                   {0:f3} x {1} ) / {2}", list_S[i].F6, Cable_Nos_At_L2[i], Cable_Nos_Support.SUM));
                        else
                            list.Add(string.Format("                   {0:f3} x {1} +", list_S[i].F6, Cable_Nos_At_L2[i]));
                    }
                    list.Add(string.Format(""));
                    list.Add(string.Format("                = {0:f3} ", Total_h.F6));

                }

                //list.Add(string.Format("Total_L/2_h     = (h1 x Cable_Nos1 +"));
                //list.Add(string.Format("                   h2 x Cable_Nos2 +"));
                //list.Add(string.Format("                   h3 x Cable_Nos3 +"));
                //list.Add(string.Format("                   h4 x Cable_Nos4 +"));
                //list.Add(string.Format("                   h5 x Cable_Nos5 +"));
                //list.Add(string.Format("                   h6 x Cable_Nos6 +"));
                //list.Add(string.Format("                   h7 x Cable_Nos7 ) / Total_Cable_Nos"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = ({0:f3} x {1} +", S1.F6, Cable_Nos_At_L2.F1));
                //list.Add(string.Format("                   {0:f3} x {1} +", S2.F6, Cable_Nos_At_L2.F2));
                //list.Add(string.Format("                   {0:f3} x {1} +", S3.F6, Cable_Nos_At_L2.F3));
                //list.Add(string.Format("                   {0:f3} x {1} +", S4.F6, Cable_Nos_At_L2.F4));
                //list.Add(string.Format("                   {0:f3} x {1} +", S5.F6, Cable_Nos_At_L2.F5));
                //list.Add(string.Format("                   {0:f3} x {1} +", S6.F6, Cable_Nos_At_L2.F6));
                //list.Add(string.Format("                   {0:f3} x {1} ) / {2}", S6.F6, Cable_Nos_At_L2.F7, Cable_Nos_At_L2.SUM));
                //list.Add(string.Format(""));
                //list.Add(string.Format("                = {0:f3} ", Total_h.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Eccentricity from CG (Metres) :"));
                list.Add(string.Format("-------------------------------"));
                list.Add(string.Format("(yb = Height of CG from bottom, at various points, available in TABLE 4)"));
                list.Add(string.Format(""));

                //PSC_Force_Data tse = new PSC_Force_Data(6);

                PSC_Force_Data tse = Yb - Total_h;

                list.Add(string.Format("Total_Support_ Eccentricity = (yb_Support - Total_Support_h) = {0:f3} - {1:f3} = {2:f3}", Yb.F1, Total_h.F1, tse.F1));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_D_ Eccentricity = (yb_D - Total_D_h) = {0:f3} - {1:f3} = {2:f3}", Yb.F2, Total_h.F2, tse.F2));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_L/8_ Eccentricity = (yb_L/8 - Total_L/8_h) = {0:f3} - {1:f3} = {2:f3}", Yb.F3, Total_h.F3, tse.F3));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_L/4_ Eccentricity = (yb_L/4 - Total_L/4_h) = {0:f3} - {1:f3} = {2:f3}", Yb.F4, Total_h.F4, tse.F4));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_3L/8_ Eccentricity = (yb_3L/8 - Total_3L/8_h) = {0:f3} - {1:f3} = {2:f3}", Yb.F5, Total_h.F5, tse.F5));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_L/2_ Eccentricity  = (yb_3L/8 - Total_3L/8_h) = {0:f3} - {1:f3} = {2:f3}", Yb.F6, Total_h.F6, tse.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Primary Bending Moment (Ton-metre): "));
                list.Add(string.Format("-----------------------------------------"));
                list.Add(string.Format(""));

                PSC_Force_Data total_BM = Total_P * tse;
                list.Add(string.Format("Total_Support_BM = Total_Support_P x Total_Support_ Eccentricity = {0:f3} x {1:f3} = {2:f3}", Total_P.F1, tse.F1, total_BM.F1));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_D_BM = Total_D_P x Total_D_ Eccentricity = {0:f3} x {1:f3} = {2:f3}", Total_P.F2, tse.F2, total_BM.F2));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_L/8_BM = Total_L/8_P x Total_L/8_ Eccentricity = {0:f3} x {1:f3} = {2:f3}", Total_P.F3, tse.F3, total_BM.F3));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_L/4_BM = Total_L/4_P x Total_L/4_ Eccentricity = {0:f3} x {1:f3} = {2:f3}", Total_P.F4, tse.F4, total_BM.F4));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_3L/8_BM = Total_3L/8_P x Total_3L/8_ Eccentricity = {0:f3} x {1:f3} = {2:f3}", Total_P.F5, tse.F5, total_BM.F5));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_L/2_BM = Total_L/2_P x Total_L/2_ Eccentricity = {0:f3} x {1:f3} = {2:f3}", Total_P.F6, tse.F6, total_BM.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("TABLE 12 : Prestressing Force in Cables"));
                list.Add(string.Format("----------------------------------------"));
                list.Add(string.Format(""));


                format = "{0,-24:f3} {1,-12:f3} {2,12:f3} {3,12:f3} {4,12:f3} {5,12:f3} {6,12:f3} {7,12:f3}";

                //list.Add(string.Format("Calculated Items          Unit        At Supp     At ‘D’    At L/8      At L/4      At 3L/8         At L/2"));
                list.Add(string.Format("".PadLeft(120, '-')));
                list.Add(string.Format(format, "Calculated Items", "Unit", "At Supp", "At ‘D’", "At L/8", "At L/4", "At 3L/8", "At L/2"));
                list.Add(string.Format("".PadLeft(120, '-')));

                //list.Add(string.Format("Total numbers of Cables   Numbers         9.1        9.1        9.1        11.052        12.052        12.052        "));
                list.Add(string.Format(format,
                    "Total numbers of Cables",
                    "Numbers",
                    Cable_Nos_Support.SUM,
                    Cable_Nos_At_D.SUM,
                    Cable_Nos_At_L8.SUM,
                    Cable_Nos_At_L4.SUM,
                    Cable_Nos_At_3L8.SUM,
                    Cable_Nos_At_L2.SUM));
                //list.Add(string.Format("Total Px (Stage - 1)        Ton         2953.4        3017.856        3086.244        3737.6        4143.34        4116.09        "));
                list.Add(string.Format(format,
                   "Total Px (Stage - 1)",
                   "Ton",
                   Total_P.F1,
                   Total_P.F2,
                   Total_P.F3,
                   Total_P.F4,
                   Total_P.F5,
                   Total_P.F6));
                //list.Add(string.Format("CG from Bottom            Metres         0.808        0.656        0.496        0.428        0.257        0.173        "));
                list.Add(string.Format(format,
                  "CG from Bottom",
                  "Metres",
                  Total_h.F1,
                  Total_h.F2,
                  Total_h.F3,
                  Total_h.F4,
                  Total_h.F5,
                  Total_h.F6));
                //list.Add(string.Format("Eccentricity from CG      Metres         0.514        0.824        1.000        1.097        1.268        1.352        "));
                list.Add(string.Format(format,
                   "Eccentricity from CG",
                   "Metres",
                   tse.F1,
                   tse.F2,
                   tse.F3,
                   tse.F4,
                   tse.F5,
                   tse.F6));

                //list.Add(string.Format("Total Primary BM          Ton-Metres     1518.048        2486.713        3086.244        4100.147        5253.755        5564.954        "));

                list.Add(string.Format(format,
                  "Total Primary BM ",
                  "Ton-Metres",
                  total_BM.F1,
                  total_BM.F2,
                  total_BM.F3,
                  total_BM.F4,
                  total_BM.F5,
                  total_BM.F6));
                list.Add(string.Format("".PadLeft(120, '-')));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 4

                #region STEP 5 : Calculation of Stresses due to Rise and Fall in Temperature at various segments
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 5: Calculation of Stresses due to Rise and Fall in Temperature at various segments "));
                list.Add(string.Format("----------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                #region STEP 5.1 : Calculation of Stresses due to Rise in Temperature at various segments
                list.Add(string.Format("STEP 5.1: Calculation of Stresses due to Rise in Temperature at various segments "));
                list.Add(string.Format("---------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("User’s Data :"));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));

                list.Add(string.Format("Depth of Box Girder = D = {0:f3} m.", D));

                double _yb = Yb.F4;
                double _Ixx = Ixx.F4;
                double _A = A.F4;


                list.Add(string.Format("C. G. of Girder from bottom = Yb = {0:f4} m.", _yb));
                list.Add(string.Format("Moment of Inertia of the section = Ixx = {0:f4} Sq. Sq. m.", _Ixx));
                list.Add(string.Format("Area of the Section = A = {0:f4} Sq.m.", _A));
                list.Add(string.Format(""));
                list.Add(string.Format("(Above all values are taken from Step 2, TABLE 4)"));
                list.Add(string.Format(""));

                double _Ec = Ec * 1000.0;
                list.Add(string.Format("Modulus of Elasticity of Concrete = Ec = {0:f4} N/Sq.mm = {1:E3} kN/Sq.m", Ec, _Ec));

                list.Add(string.Format(""));
                list.Add(string.Format("(Above value is taken from Tab 2,   (B) 17.)"));
                list.Add(string.Format(""));


                list.Add(string.Format("Coefficient of Thermal Expansion of Concrete = {0} = {1}", SYMBOLS.ALPHA, alpha));
                list.Add(string.Format("Temperature = Tr1 = {0:f3}{1} C", Tr1, SYMBOLS.DEGREE));
                list.Add(string.Format("Temperature = Tr2 = {0:f3}{1}C ", Tr2, SYMBOLS.DEGREE));
                list.Add(string.Format("Temperature = Tr3 = {0:f3}{1} C", Tr3, SYMBOLS.DEGREE));
                list.Add(string.Format("Average Thickness of Top Slab = ds = {0:f4} m.", ds));
                list.Add(string.Format(""));
                list.Add(string.Format("(Above value is taken from Tab 1)"));
                list.Add(string.Format(""));

                double _h = D;
                double _Zt = _Ixx / (_h - _yb);
                list.Add(string.Format("Section Modulus at the top = Zt = Ixx / (h - yb)"));
                list.Add(string.Format("                                = {0:f4} / ({1}-{2:f4})", _Ixx, _h, _yb));
                list.Add(string.Format("                                = {0:f4} Cu.m.", _Zt));
                list.Add(string.Format(""));


                double _Z_bs = _Ixx / (_h - _yb - ds);
                list.Add(string.Format("Section Modulus at the bottom of Top Slab = Z_bs = Ixx/(h-Yb-ds)"));
                list.Add(string.Format("                                                 = {0:f4}/({1}-{2:f4}-{3:f4})", _Ixx, _h, _yb, ds));
                list.Add(string.Format("                                                 = {0:f4} m.", _Z_bs));
                list.Add(string.Format(""));
                double _Zb = _Ixx / _yb;
                list.Add(string.Format("Section Modulus at the Bottom = Zb = Ixx / Yb = {0:f4}/{1:f4} = {2:f4} Cu.m.", _Ixx, _yb, _Zb));
                list.Add(string.Format(""));

                double _h1 = 0.15;
                list.Add(string.Format("h1 = minimum of (0.15 and 0.3 x D) = (0.15 and {0:f3}) = 0.15", (0.3 * D)));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _h2 = 0.0;
                if ((0.3 * D) < 0.1) _h2 = 0.1;
                else if ((0.3 * D) < 0.25) _h2 = (0.3 * D);
                else _h2 = 0.25;

                list.Add(string.Format("If(0.3 x D  =  0.3x{0} = {1:f3} < 0.1) then h2 = 0.1.", D, (0.3 * D)));
                list.Add(string.Format("Else if (0.3*D = 0.3x{0} = {1:f3} < 0.25) then h2 = 0.3*D = 0.3x{0:f3} = {1:f3} ,", D, (0.3 * D)));
                list.Add(string.Format("Else h2 = 0.25"));
                list.Add(string.Format(""));

                double _h3 = 0.15;
                list.Add(string.Format("h3 = minimum of (0.15 and 0.3 x D) = (0.15 and {0:f3}) = 0.15", (0.3 * D)));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Calculations :"));
                list.Add(string.Format("--------------"));
                list.Add(string.Format(""));

                double _d1 = 0.15;

                list.Add(string.Format("Segment 1, Height = d1 = minimum of (0.15 and 0.3 x h) = (0.15 and {0:f3}) = 0.150", (0.3 * _h)));
                double _d2 = ds - _d1;
                list.Add(string.Format("Segment 2, Height = d2 = ds-d1 = {0:f4} - {1:f4} = {2:f4} m.", ds, _d1, _d2));

                double _d3 = _h2 - _d2;
                list.Add(string.Format("Segment 3, Height = d3 = h2-d2 = {0:f4}-{1:f4} = {2:f4} m.", _h2, _d2, _d3));

                double _d4 = _h3;
                list.Add(string.Format("Segment 4, Height = d4 = h3 = {0:f4} m.", _d4));
                list.Add(string.Format(""));

                double _Stress1 = _Ec * alpha * Tr1;

                list.Add(string.Format("Segment 1, Stress1 = Ec x alpha x Tr1 =  {0:E3} x {1} x {2} = {3:f4} kN/Sq.m.", _Ec, alpha, Tr1, _Stress1));

                double _Stress2 = _Ec * alpha * Tr2;

                list.Add(string.Format("Segment 2, Stress2 = Ec x alpha x Tr2 =  {0:E3} x {1} x {2} = {3:f4} kN/Sq.m.", _Ec, alpha, Tr2, _Stress2));

                double _Stress3 = _Stress2 * (_h2 - _d2) / _h2;

                list.Add(string.Format("Segment 3, Stress3 = Stress2 x (h2-d2)/h2 = {0:f4} x ({1:f4}-{2:f4})/{3:f4} = {4:f4} kN/Sq.m.", _Stress2, _h2, _d2, _h2, _Stress3));

                double _Stress4 = _Ec * alpha * Tr3;

                list.Add(string.Format("Segment 4, Stress4 = Ec x alpha x Tr3 =  {0:E3} x {1} x {2:f3} = {3:f4} kN/Sq.m.", _Ec, alpha, Tr3, _Stress4));
                list.Add(string.Format(""));

                double _b1 = Dw;
                list.Add(string.Format("Segment 1, b1 = Dw = {0:f4} m. ", _b1));

                double _b2 = Dw;
                list.Add(string.Format("Segment 2, b2 = Dw = {0:f4} m. ", _b2));

                double _b3 = bt;

                list.Add(string.Format("Segment 3, b3 = bt = {0:f4} m. ", bt));

                double _b4 = Section_SW.F4;
                list.Add(string.Format("Segment 4, b4 = Sw = {0:f4} m. ", _b4));
                list.Add(string.Format(""));

                double _F1 = (_Stress1 + _Stress2) * _d1 * _b1 / 2;
                list.Add(string.Format("Segment 1, Force = F1 = (Stress1+Stress2) x d1 x b1/2"));
                list.Add(string.Format("                      = ({0:f4}+{1:f4}) x {2:f4} x {3:f4} / 2", _Stress1, _Stress2, _d1, _b1));
                list.Add(string.Format("                      = {0:f4} kN. ", _F1));
                list.Add(string.Format(""));


                double _F2 = (_Stress2 + _Stress3) * _d2 * _b2 / 2.0;
                list.Add(string.Format("Segment 2, Force = F2 = (Stress2+Stress3) x d2 x b2/2"));
                list.Add(string.Format("                      = ({0:f4} + {1:f4}) x {2:f4} x {3:f4} / 2", _Stress2, _Stress3, _d2, _b2));
                list.Add(string.Format("                      = {0:f4} kN. ", _F2));
                list.Add(string.Format(""));

                double _F3 = _d3 * _Stress3 * _b3 / 2;

                list.Add(string.Format("Segment 3, Force = F3 = d3 x Stress3 x b3 / 2"));
                list.Add(string.Format("                      = {0:f4} x {1:f4} x {2:f4} / 2", _d3, _Stress3, _b3));
                list.Add(string.Format("                      = {0:f4} kN", _F3));
                list.Add(string.Format(""));

                double _F4 = _d4 * _Stress4 * _b4 / 2;
                list.Add(string.Format("Segment 4, Force = F4 = d4 x Stress4 x b4 / 2"));
                list.Add(string.Format("                      = {0:f4} x {1:f4} x {2:f4} / 2", _d4, _Stress4, _b4));
                list.Add(string.Format("                      = {0:f4} kN. ", _F4));
                list.Add(string.Format(""));

                double _Ftot = _F1 + _F2 + _F3 + _F4;
                list.Add(string.Format("Total Force = Ftot = F1 +F2 + F3 + F4 = 7165.636 kN."));
                list.Add(string.Format("                   = {0:f4} + {1:f4} + {2:f4} + {3:f4}", _F1, _F2, _F3, _F4));
                list.Add(string.Format("                   = {0:f4} kN.", _Ftot));
                list.Add(string.Format(""));


                double _y1 = (_Stress1 + 2 * _Stress2) * _d1 / (_Stress1 + _Stress2) / 3.0;

                list.Add(string.Format("Segment 1, Y from Top, y1 = (Stress1 + 2 x Stress2) x d1/(Stress1 + Stress2)/3.0"));
                list.Add(string.Format(""));
                list.Add(string.Format("                          = ({0:f3} + 2 x {1:f3})x{2:f3}/({0:f3} + {1:f3})/3.0", _Stress1, _Stress2, _d1));
                list.Add(string.Format("                          = {0:f4} m.", _y1));
                list.Add(string.Format(""));

                double _y2 = _d1 + (_Stress2 + 2 * _Stress3) * _d2 / (_Stress2 + _Stress3) / 3.0;
                list.Add(string.Format("Segment 2, Y from Top, y2 = d1 +(Stress2+2xStress3)xd2/(Stress2+Stress3)/3.0"));
                list.Add(string.Format(""));
                //list.Add(string.Format("                          =0.15+(1478.880+2x1035.216)x0.075/(1478.880+1035.216)/3.0=0.185 m."));
                list.Add(string.Format("                          = {0:f3} + ({1:f3} + 2 x {2:f3}) x {3:f3}/({1:f3} + {2:f3}) / 3.0", _d1, _Stress2, _Stress3, _d2));
                list.Add(string.Format("                          = {0:f4} m.", _y2));
                list.Add(string.Format(""));


                double _y3 = _d1 + _d2 + _d3 / 3;
                list.Add(string.Format("Segment 3, Y from Top, y3 = d1 + d2 + d3/3 = {0:f4} + {1:f4} + {2:f4}/3 = {3:f4} m.", _d1, _d2, _d3, _y3));
                list.Add(string.Format(""));

                //Chiranjit [2012 10 12]
                //Check
                //double _y4 = (D - _d4 / 3.0);
                //list.Add(string.Format("Segment 4, Y from Top, y4 = D - d4/3 = {0:f4} - {1:f4}/3 = {2:f3} m.", D, _d4, _y4));

                double _y4 = (D - _d3 / 3.0);
                list.Add(string.Format("Segment 4, Y from Top, y4 = D - d4/3 = {0:f4} - {1:f4}/3 = {2:f3} m.", D, _d3, _y4));
                list.Add(string.Format(""));


                double _e1 = D - _yb - _y1;
                double _e2 = D - _yb - _y2;
                double _e3 = D - _yb - _y3;
                double _e4 = D - _yb - _y4;
                list.Add(string.Format("Segment 1,  e1 = D - Yb - y1 = {0:f3} - {1:f4} - {2:f4} = {3:f4} m.", D, _yb, _y1, _e1));
                list.Add(string.Format("Segment 2,  e2 = D - Yb - y2 = {0:f3} - {1:f4} - {2:f4} = {3:f4} m.", D, _yb, _y2, _e2));
                list.Add(string.Format("Segment 3,  e3 = D - Yb - y3 = {0:f3} - {1:f4} - {2:f4} = {3:f4} m.", D, _yb, _y3, _e3));
                list.Add(string.Format("Segment 4,  e4 = D - Yb - y4 = {0:f3} - {1:f4} - {2:f4} = {3:f4} m.", D, _yb, _y4, _e4));
                list.Add(string.Format(""));

                double _M1 = _F1 * _e1;
                double _M2 = _F2 * _e2;
                double _M3 = _F3 * _e3;
                double _M4 = _F4 * _e4;
                list.Add(string.Format("Segment 1,  Moment = M1  = F1 x e1 = {0:f4} x  {1:f4} = {2:f4} kN-m.", _F1, _e1, _M1));
                list.Add(string.Format("Segment 2,  Moment = M2  = F2 x e2 = {0:f4} x  {1:f4} = {2:f4} kN-m.", _F2, _e2, _M2));
                list.Add(string.Format("Segment 3,  Moment = M3  = F3 x e3 = {0:f4} x  {1:f4} = {2:f4} kN-m.", _F3, _e3, _M3));
                list.Add(string.Format("Segment 4,  Moment = M4  = F4 x e4 = {0:f4} x  {1:f4} = {2:f4} kN-m.", _F4, _e4, _M4));
                list.Add(string.Format(""));

                double _Mtot = _M1 + _M2 + _M3 + _M4;
                list.Add(string.Format("Total Moment = Mtot = M1 + M2 + M3 + M4"));
                list.Add(string.Format("                    = {0:f4} + {1:f4} + {2:f4} + {3:f4}", _M1, _M2, _M3, _M4));
                list.Add(string.Format("                    = {0:f4} kN-m.", _Mtot));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stress Computation for TABLE 13 for  Rise in Temperature :"));
                list.Add(string.Format("----------------------------------------------------------"));
                list.Add(string.Format(""));

                double _Sigma_ER1 = _Stress1;
                double _Sigma_ER2 = _Stress2;
                double _Sigma_ER3 = _Stress3;
                double _Sigma_ER4 = _Stress4;
                list.Add(string.Format("Stress Assuming End Restrained:"));
                list.Add(string.Format("Segment1,  Sigma_ER1 = Stress1 = {0:f4} kN/Sq.m.", _Sigma_ER1));
                list.Add(string.Format("Segment2,  Sigma_ER2 = Stress2 = {0:f4} kN/Sq.m.", _Sigma_ER2));
                list.Add(string.Format("Segment3,  Sigma_ER3 = Stress3 = {0:f4} kN/Sq.m.", _Sigma_ER3));
                list.Add(string.Format("Segment4,  Sigma_ER4 = Stress4 = {0:f4} kN/Sq.m.", _Sigma_ER4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Sigma_RF1 = -(_Ftot / _A);
                double _Sigma_RF2 = -(_Ftot / _A);
                double _Sigma_RF3 = -(_Ftot / _A);
                double _Sigma_RF4 = -(_Ftot / _A);



                list.Add(string.Format("Stress due to Release of Axial Force:"));
                list.Add(string.Format("Segment1,  Sigma_RF1=Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", _Ftot, _A, _Sigma_RF1));
                list.Add(string.Format("Segment2,  Sigma_RF2= Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", _Ftot, _A, _Sigma_RF2));
                list.Add(string.Format("Segment3,  Sigma_RF3= Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", _Ftot, _A, _Sigma_RF3));
                list.Add(string.Format("Segment4,  Sigma_RF4= Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", _Ftot, _A, _Sigma_RF4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stress due to Release of Moment :"));
                list.Add(string.Format("---------------------------------"));
                list.Add(string.Format(""));


                double _Sigma_RM1 = -(_Mtot / _Zt);
                list.Add(string.Format("Segment1,  Sigma_RM1 = Mtot / Zt = {0:f4} / {1:f4} = {2:f4} kN/Sq.m.", _Mtot, _Zt, _Sigma_RM1));
                list.Add(string.Format(""));


                double _Sigma_RM2 = -_Mtot / _Z_bs;
                list.Add(string.Format("Segment2, Sigma_RM2 = Mtot / Zbs = {0:f4} / {1:f4} = {2:f4} kN/Sq.m", _Mtot, _Z_bs, _Sigma_RM2));
                list.Add(string.Format(""));
                list.Add(string.Format("Segment3, Sigma_RM3="));
                list.Add(string.Format(""));
                double _Sigma_RM4 = _Mtot / _Zb;
                list.Add(string.Format("Segment4, Sigma_RM4 = Mtot/Zb = {0:f4}/{1:f3} = {2:f3} kN/Sq.m", _Mtot, _Zb, _Sigma_RM4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Final Stress for Rise in Temperature :"));
                list.Add(string.Format("--------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("At Segment1,  Segment2,  Segment3,  Segment4, "));
                list.Add(string.Format(""));

                double _Stemprise1 = _Sigma_ER1 + (_Sigma_RF1) + (_Sigma_RM1);
                list.Add(string.Format("Stemprise1 = Sigma_ER1 + Sigma_RF1 + Sigma_RM1"));
                list.Add(string.Format("           = {0:f4} - {1:f4} - {2:f4}", _Sigma_ER1, -_Sigma_RF1, -_Sigma_RM1, _Stemprise1));
                list.Add(string.Format("           = {0:f4} kN/Sq.m", _Stemprise1));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Stemprise2 = _Sigma_ER2 + (_Sigma_RF2) + (_Sigma_RM2);

                list.Add(string.Format("Stemprise2 = Sigma_ER2 + Sigma_RF2 + Sigma_RM2"));
                list.Add(string.Format("           = {0:f4} - {1:f4} - {2:f4}", _Sigma_ER2, -_Sigma_RF2, -_Sigma_RM2));
                list.Add(string.Format("           = {0:f4} kN/Sq.m", _Stemprise2));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stemprise3="));
                //double _Stemprise3 = _Sigma_ER3 + (_Sigma_RF3) + (_Sigma_RM3);

                //list.Add(string.Format("Stemprise3 = Sigma_ER3 + Sigma_RF3 + Sigma_RM3"));
                //list.Add(string.Format("           = {0:f4} - {1:f4} - {2:f4}", _Sigma_ER3, -_Sigma_RF3, -_Sigma_RM3));
                //list.Add(string.Format("           = {0:f4} kN/Sq.m", _Stemprise2));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Stemprise4 = _Sigma_ER4 + (_Sigma_RF4) + (_Sigma_RM4);
                list.Add(string.Format(""));
                list.Add(string.Format("Stemprise4 = Sigma_ER4 + Sigma_RF4 + Sigma_RM4 "));
                list.Add(string.Format("           = {0:f4} - {1:f4} + {2:f4}", _Sigma_ER4, -_Sigma_RF4, _Sigma_RM4));
                list.Add(string.Format("           = {0:f4} kN/Sq.m", _Stemprise4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                #region TABLE 13: Stresses due to Rise in Temperature at various segments :
                //format = "{0,10:f3} {1,10:f3} {2,10:f3} {3,10:f3} {4,10:f3} {5,10:f3} {6,10:f3} {7,10:f3} {8,10:f3} {9,10:f3} {10,10:f3} {11,10:f3}";
                format = "{0,-7:f3} {1,7:f3} {2,10:f3} {3,7:f3} {4,10:f3} {5,7:f3} {6,7:f3} {7,10:f3} {8,10:f3} {9,12:f3} {10,14:f3} {11,12:f3}";
                list.Add(string.Format("TABLE 13 : Stresses due to Rise in Temperature at various segments :"));
                list.Add(string.Format("--------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(""));

                list.Add(string.Format(format,
                    "Segment",
                    "Height",
                    "Stress",
                    "b",
                    "Force",
                    "y",
                    "e",
                    "Moment",
                    "Assuming",
                    "Stress due to",
                    "Stress due to",
                    "Final"));
                list.Add(string.Format(format,
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "End",
                    "Release of",
                    "Release of",
                    "Stress"));
                list.Add(string.Format(format,
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Moment",
                    "Restrained",
                    "Force",
                    "Moment",
                    ""));
                //list.Add(string.Format(format,
                //    "Segment",
                //    "Height",
                //    "Stress",
                //    "b",
                //    "Force",
                //    "y",
                //    "e",
                //    "Moment",
                //    "Restrained",
                //    "Force",
                //    "Moment",
                //    "Stress"));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(format,
                                   "(unit)",
                                   "(m)",
                                   "(kN/Sq.m)",
                                   "(m)",
                                   "(kN)",
                                   "(m)",
                                   "(m)",
                                   "(kN-m)",
                                   "(kN/Sq.m)",
                                   "(kN/Sq.m)",
                                   "(kN/Sq.m)",
                                   "(kN/Sq.m)"));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(format,
                                   "1",
                                   _d1,
                                   _Stress1,
                                   _b1,
                                   _F1,
                                   _y1,
                                   _e1,
                                   _M1,
                                   _Sigma_ER1,
                                   _Sigma_RF1,
                                   _Sigma_RM1,
                                   _Stemprise1));
                list.Add(string.Format("".PadLeft(125, '-')));

                list.Add(string.Format(format,
                                                  "2",
                                                  _d2,
                                                  _Stress2,
                                                  _b2,
                                                  _F2,
                                                  _y2,
                                                  _e2,
                                                  _M2,
                                                  _Sigma_ER2,
                                                  _Sigma_RF2,
                                                  _Sigma_RM2,
                                                  _Stemprise2));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(format,
                                                  "3",
                                                  _d3,
                                                  _Stress3,
                                                  _b3,
                                                  _F3,
                                                  _y3,
                                                  _e3,
                                                  _M3,
                                                  _Sigma_ER3,
                                                  _Sigma_RF3,
                                                  "",
                                                  ""));
                list.Add(string.Format("".PadLeft(125, '-')));

                list.Add(string.Format(format,
                                                  "4",
                                                  _d4,
                                                  _Stress4,
                                                  _b4,
                                                  _F4,
                                                  _y4,
                                                  _e4,
                                                  _M4,
                                                  _Sigma_ER4,
                                                  _Sigma_RF4,
                                                  _Sigma_RM4,
                                                  _Stemprise4));
                list.Add(string.Format("".PadLeft(125, '-')));

                list.Add(string.Format(format,
                                     "Total",
                                     "",
                                     "",
                                     "",
                                     _Ftot,
                                     "",
                                     "",
                                     _Mtot,
                                     "",
                                     "",
                                     "",
                                     ""));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion TABLE 13: Stresses due to Rise in Temperature at various segments :
                #endregion STEP 5.1


                #region STEP 5.2 : Calculation for TABLE 14 for  Stresses due to Fall in Temperature at various segments

                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("STEP 5.2 : Calculation for TABLE 14 for  Stresses due to Fall in Temperature at various segments :"));
                list.Add(string.Format("--------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("User’s Data :"));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Depth of Box Girder = D = {0:f4} m.", D));
                list.Add(string.Format("C. G. of Girder from bottom = Yb = {0:f4} m.", _yb));
                list.Add(string.Format("Moment of Inertia of the section = Ixx = {0:f4} Sq. Sq. m.", _Ixx));
                list.Add(string.Format("Area of the Section = A = {0:f4} Sq.m.", _A));
                list.Add(string.Format(""));
                list.Add(string.Format("(Above all values are taken from Step 2, TABLE 4)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Modulus of Elasticity of Concrete = Ec = {0:f4} N/Sq.mm = {1:E3} kN/Sq.m", Ec, _Ec));
                list.Add(string.Format(""));
                list.Add(string.Format("(Above value is taken from Tab 2,   (B) 17.)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Coefficient of Thermal Expansion of Concrete = {0} = {1:f8}", SYMBOLS.ALPHA, alpha));
                list.Add(string.Format("Temperature = Tf1 = {0:f3}{1}C", Tf1, SYMBOLS.DEGREE));
                list.Add(string.Format("Temperature = Tf2 = {0:f3}{1}C", Tf2, SYMBOLS.DEGREE));
                list.Add(string.Format("Temperature = Tf3 = {0:f3}{1}C", Tf3, SYMBOLS.DEGREE));
                list.Add(string.Format("Temperature = Tf4 = {0:f3}{1}C", Tf4, SYMBOLS.DEGREE));
                list.Add(string.Format("Average Thickness of Top Slab = ds = {0} m.", ds));
                list.Add(string.Format(""));
                list.Add(string.Format("(Above value is taken from Tab 1)"));
                list.Add(string.Format(""));
                _Zt = _Ixx / (_h - _yb);
                list.Add(string.Format("Section Modulus at the top = Zt = Ixx / (h - yb) = {0:f4} / ({1:f4} - {2:f4}) = {3:f4} Cu.m.", _Ixx, _h, _yb, _Zt));
                list.Add(string.Format(""));

                _Z_bs = _Ixx / (_h - _yb - ds);
                list.Add(string.Format("Section Modulus at the bottom of Top Slab = Z bs = Ixx/(h-Yb-ds) = {0:f4}/({1:f4}-{2:f4}-{3:f4}) = {4:f4} m.", _Ixx, _h, _yb, ds, _Z_bs));
                list.Add(string.Format(""));

                _Zb = _Ixx / _yb;
                list.Add(string.Format("Sectio Modulus at the Bottom = Zb = Ixx / Yb = {0:f4} / {1:f4} = {2:f4} Cu.m.", _Ixx, _yb, _Zb));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                _h1 = 0.25;
                list.Add(string.Format("h1 = minimum of (0.25 and 0.2 x D) = (0.25 and {0:f3}) = {1:f3}", (0.2 * D), _h1));

                _h2 = 0.20;
                list.Add(string.Format("h2 = minimum of (0.20 and 0.25 x D) = (0.20 and {0:f3}) = {1:f3}", (D * 0.25), _h2));

                _h3 = 0.20;
                list.Add(string.Format("h3 = minimum of (0.20 and 0.25 x D) = (0.20 and {0:f3}) = {1:f3}", (0.25 * D), _h3));

                double _h4 = 0.25;
                list.Add(string.Format("h4 = minimum of (0.25 and 0.2 x D) = (0.25 and {0:f3}) = {1:f3}", (0.2 * D), _h4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Calculations :"));
                list.Add(string.Format("--------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                _d1 = ds;
                list.Add(string.Format("Segment 1, Height = d1 = ds = {0}", _d1));
                list.Add(string.Format(""));

                _d2 = _h1 - ds;
                list.Add(string.Format("Segment 2, Height = d2 = h1 - ds = {0:f4} - {1:f4} = {2:f4} m.", _h1, ds, _d2));
                list.Add(string.Format(""));

                _d3 = ds + df - _h1;
                list.Add(string.Format("Segment 3, Height = d3 = ds+df-h1 = {0:f4}+{1:f4}-{2:f4} = {3:f4} m.", ds, df, _h1, _d3));
                list.Add(string.Format(""));

                _d4 = _h1 + _h2 - _d1 - _d2 - _d3;
                list.Add(string.Format("Segment 4, Height = d4 = h1+h2-d1-d2-d3 = {0:f4}+{1:f4}-{2:f4}-{3:f4}-{4:f4} = {5:f4} m.", _h1, _h2, _d1, _d2, _d3, _d4));
                list.Add(string.Format(""));

                double _d5 = _h3;
                list.Add(string.Format("Segment 5, Height = d5 = h3 = {0:f4} m.", _d5));

                double _d6 = _h4;
                list.Add(string.Format("Segment 6, Height = d6 = h4 = {0:f4} m.", _d6));
                list.Add(string.Format(""));

                _Stress1 = -_Ec * alpha * Tf1;
                list.Add(string.Format("Segment 1, Stress1 = Ec x {0} x Tf1 =  {1:E3} x {2} x {3} = {4:f4} kN/Sq.m.", SYMBOLS.ALPHA, _Ec, alpha, Tf1, _Stress1));
                list.Add(string.Format(""));

                _Stress2 = -(_Ec * alpha * Tf2) + (_Stress1 - (-_Ec * alpha * Tf2)) * _d2 / _h1;

                list.Add(string.Format("Segment 2, Stress2 = (Ec x {0} x Tf2 ) + (Stress1 - (Ec x {0} x Tf2 ))xd2/h1", SYMBOLS.ALPHA));
                list.Add(string.Format("                   = (-{0:E3} x {1} x {2}) + ({3} - (-{0:E3} x {1} x {2})) x {4:f4}/{5:f4}", _Ec, alpha, Tf2, _Stress1, _d2, _h1));
                //list.Add(string.Format("                   = (-3.16 x 10^7 x 0.0000117 x 0.7) + (-3919.032 - (-3.16 x 10^7 x 0.0000117 x 0.7))x0.025/0.25"));
                list.Add(string.Format("                   = {0:f4} kN/Sq.m.", _Stress2));
                list.Add(string.Format(""));

                _Stress3 = -_Ec * alpha * Tf2;
                list.Add(string.Format("Segment 3, Stress3 = Ec x {0} x Tf2 =  {1:E3} x {2} x {3} = {4:f4} kN/Sq.m.", SYMBOLS.ALPHA, _Ec, alpha, Tf2, _Stress3));
                list.Add(string.Format(""));

                _Stress4 = _Stress3 * _d4 / _h2;
                list.Add(string.Format("Segment 4, Stress4 = Stress3 x d4/h2  = {0:f4} x {1:f4} / {2:f4} = {3:f4} kN/Sq.m.", _Stress3, _d4, _h2, _Stress4));
                list.Add(string.Format(""));

                double _Stress5 = -_Ec * alpha * Tf3;

                list.Add(string.Format("Segment 5, Stress5 = Ec x {0} x Tf3 =  {1:E3} x {2} x {3} = {4:f4} kN/Sq.m.", SYMBOLS.ALPHA, _Ec, alpha, Tf3, _Stress5));
                list.Add(string.Format(""));
                double _Stress6 = -_Ec * alpha * Tf4;
                list.Add(string.Format("Segment 6, Stress6 = Ec x alpha x Tf4 =  {1:E3} x {2} x {3} = {4:f4} kN/Sq.m.", SYMBOLS.ALPHA, _Ec, alpha, Tf4, _Stress6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                _b1 = Dw;
                list.Add(string.Format("Segment 1, b1 = Dw = {0:f4} m. ", _b1));

                _b2 = bt;
                list.Add(string.Format("Segment 2, b2 = bt = {0:f4} m.", _b2));

                _b3 = bt;
                list.Add(string.Format("Segment 3, b3 = bt = {0:f4} m.", _b3));

                _b4 = 2 * Section_Tw.F6 / Math.Cos(theta.F6);

                list.Add(string.Format("Segment 4, b4 = 2 x Tw / COS(ϴ) = 2 x {0:f4} / COS({1:f3}) = {2:f4} m.", Section_Tw.F6, Section_Theta.F6, _b4));


                double _b5 = 2 * Section_Tw.F6 / Math.Cos(theta.F6);

                list.Add(string.Format("Segment 5, b5 = 2 x Tw / COS(ϴ) = 2 x {0:f4} / COS({1:f3}) = {2:f4} m.", Section_Tw.F6, Section_Theta.F6, _b5));

                double _b6 = Section_SW.F6;

                list.Add(string.Format("Segment 6, b6 = Sw = {0:f4} m.", _b6));
                list.Add(string.Format(""));


                _F1 = (_Stress1 + _Stress2) * _d1 * _b1 / 2.0;
                list.Add(string.Format("Segment 1, Force = F1 =(Stress1+Stress2) x d1 x b1/2"));
                list.Add(string.Format("                      =({0:f4}{1:f4}) x {2:f4} x {3:f4} / 2", _Stress1, _Stress2, _d1, _b1));
                list.Add(string.Format("                      ={0:f4} kN.", _F1));

                list.Add(string.Format(""));


                _F2 = (_Stress2 + _Stress3) * _d2 * _b2 / 2.0;
                list.Add(string.Format("Segment 2, Force = F2 =(Stress2+Stress3) x d2 x b2/2"));
                list.Add(string.Format("                      =({0:f4}{1:f4}) x {2:f4} x {3:f4} / 2", _Stress2, _Stress3, _d2, _b2));
                list.Add(string.Format("                      ={0:f4} kN.", _F2));

                list.Add(string.Format(""));


                _F3 = (_Stress3 + _Stress4) * _d3 * _b3 / 2.0;
                list.Add(string.Format("Segment 3, Force = F3 =(Stress3+Stress4) x d3 x b3/2"));
                list.Add(string.Format("                      =({0:f4}{1:f4}) x {2:f4} x {3:f4} / 2", _Stress3, _Stress2, _d3, _b3));
                list.Add(string.Format("                      ={0:f4} kN.", _F3));

                list.Add(string.Format(""));


                _F4 = (_Stress4) * _d4 * _b4 / 2.0;
                list.Add(string.Format("Segment 4, Force = F4 =(Stress4) x d4 x b4/2"));
                list.Add(string.Format("                      =({0:f4}) x {1:f4} x {2:f4} / 2", _Stress4, _d4, _b4));
                list.Add(string.Format("                      ={0:f4} kN.", _F4));
                list.Add(string.Format(""));


                double _F5 = (_Stress5) * _d5 * _b5 / 2.0;
                list.Add(string.Format("Segment 5, Force = F5 =(Stress5) x d5 x b5/2"));
                list.Add(string.Format("                      =({0:f4}) x {1:f4} x {2:f4} / 2", _Stress5, _d5, _b5));
                list.Add(string.Format("                      ={0:f4} kN.", _F5));
                list.Add(string.Format(""));





                double _F6 = (_Stress5 + _Stress6) * _d6 * _b6 / 2.0;
                list.Add(string.Format("Segment 6, Force = F6 =(Stress5+Stress6) x d6 x b6/2"));
                list.Add(string.Format("                      =({0:f4}{1:f4}) x {2:f4} x {3:f4} / 2", _Stress5, _Stress6, _d6, _b6));
                list.Add(string.Format("                      ={0:f4} kN.", _F6));

                list.Add(string.Format(""));

                _Ftot = _F1 + _F2 + _F3 + _F4 + _F5 + _F6;
                list.Add(string.Format("Total Force = Ftot = F1+F2+F3+F4+F5+F6 = {0:f4} kN.", _Ftot));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format(" Segment 1, Y from Top, y1"));
                list.Add(string.Format(""));

                _y1 = (-_Stress1 + 2 * -_Stress2) * _d1 / (-_Stress1 + -_Stress2) / 3.0;
                list.Add(string.Format("   y1 = (Stress1+2xStress2)xd1/(Stress1+Stress2)/3.0"));
                list.Add(string.Format("      = ({0:f4} + 2 x {1:f4}) x {2:f4}/({0:f4}+{1:f4})/3.0", -_Stress1, -_Stress2, _d1));
                list.Add(string.Format("      = {0:f4} m.", _y1));




                list.Add(string.Format(""));
                list.Add(string.Format(" Segment 2, Y from Top, y2"));
                list.Add(string.Format(""));
                _y2 = _d1 + (-_Stress2 + 2 * -_Stress3) * _d2 / (-_Stress2 + -_Stress3) / 3.0;
                list.Add(string.Format("   y2 =  d1+(Stress2+2xStress3)xd2/(Stress2+Stress3)/3.0"));
                list.Add(string.Format("      = {0:f4} + ({1:f4} + 2 x {2:f4}) x {3:f4}/({1:f4}+{2:f4})/3.0", _d1, -_Stress2, -_Stress3, _d2));
                list.Add(string.Format("      = {0:f4} m.", _y2));



                list.Add(string.Format(""));
                list.Add(string.Format(" Segment 3, Y from Top, y3"));
                list.Add(string.Format(""));
                _y3 = _d1 + _d2 + (-_Stress3 + 2 * -_Stress4) * _d3 / (-_Stress3 + -_Stress4) / 3.0;
                list.Add(string.Format("   y3 =  d1+d2+(Stress3+2xStress4)xd3/(Stress3+Stress4)/3.0"));
                list.Add(string.Format("      = {0:f4} + {1:f4} + ({2:f4} + 2 x {3:f4}) x {4:f4}/({2:f4}+{3:f4})/3.0", _d1, _d2, -_Stress3, -_Stress4, _d3));
                list.Add(string.Format("      = {0:f4} m.", _y3));
                list.Add(string.Format(""));



                _y4 = (_d1 + _d2 + _d3) + _d4 / 3;

                list.Add(string.Format(" Segment 4, Y from Top, y4 = d1+d2+d3+d4/3"));
                list.Add(string.Format("                          = {0:f4}+{1:f4}+{2:f4}+{3:f4}/3", _d1, _d2, _d3, _d4));
                list.Add(string.Format("                          = {0:f4} m", _y4));


                double _y5 = (D - _d6) - _d5 / 3;
                list.Add(string.Format(""));
                list.Add(string.Format(" Segment 5, Y from Top, y5 = D-d6-d5/3 = ({0:f4}-{1:f4})-{2:f4}/3 = {3:f4} m.", D, _d6, _d5, _y5));
                list.Add(string.Format(""));




                list.Add(string.Format(""));
                list.Add(string.Format(" Segment 6, Y from Top, y6"));
                list.Add(string.Format(""));
                double _y6 = D - (-_Stress6 + 2 * -_Stress5) * _d6 / (-_Stress6 + -_Stress5) / 3.0;

                list.Add(string.Format(" y6 = D-(Stress6+2xStress5)xd6/(Stress6+Stress5)/3.0"));
                list.Add(string.Format("    = {0}-({1:f4} + 2 x {2:f4}) x {3:f4}/({1:f4} + {2:f4})/3.0", D, -_Stress6, -_Stress5, _d6));
                list.Add(string.Format("    = {0:f4} m.", _y6));


                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                _e1 = D - _yb - _y1;
                _e2 = D - _yb - _y2;
                _e3 = D - _yb - _y3;
                _e4 = D - _yb - _y4;
                double _e5 = D - _yb - _y5;
                double _e6 = D - _yb - _y6;
                list.Add(string.Format("Segment 1,  e1 = D-Yb-y1 = {0}-{1:f4}-{2:f4}= {3:f4} m.", D, _yb, _y1, _e1));
                list.Add(string.Format("Segment 2,  e2 = D-Yb-y2 = {0}-{1:f4}-{2:f4}= {3:f4} m.", D, _yb, _y2, _e2));
                list.Add(string.Format("Segment 3,  e3 = D-Yb-y3 = {0}-{1:f4}-{2:f4}= {3:f4} m.", D, _yb, _y3, _e3));
                list.Add(string.Format("Segment 4,  e4 = D-Yb-y4 = {0}-{1:f4}-{2:f4}= {3:f4} m.", D, _yb, _y4, _e4));
                list.Add(string.Format("Segment 5,  e5 = D-Yb-y5 = {0}-{1:f4}-{2:f4}= {3:f4} m.", D, _yb, _y5, _e5));
                list.Add(string.Format("Segment 6,  e6 = D-Yb-y6 = {0}-{1:f4}-{2:f4}= {3:f4} m.", D, _yb, _y6, _e6));
                list.Add(string.Format(""));


                _M1 = _F1 * _e1;
                _M2 = _F2 * _e2;
                _M3 = _F3 * _e3;
                _M4 = _F4 * _e4;
                double _M5 = _F5 * _e5;
                double _M6 = _F6 * _e6;

                list.Add(string.Format("Segment 1,  Moment = M1  = F1 x e1 = {0:f4} x {1:f4} = {2:f4} kN-m.", _F1, _e1, _M1));
                list.Add(string.Format("Segment 2,  Moment = M2  = F2 x e2 = {0:f4} x {1:f4} = {2:f4} kN-m.", _F2, _e2, _M2));
                list.Add(string.Format("Segment 3,  Moment = M3  = F3 x e3 = {0:f4} x {1:f4} = {2:f4} kN-m.", _F3, _e3, _M3));
                list.Add(string.Format("Segment 4,  Moment = M4  = F4 x e4 = {0:f4} x {1:f4} = {2:f4} kN-m.", _F4, _e4, _M4));
                list.Add(string.Format("Segment 5,  Moment = M5  = F5 x e5 = {0:f4} x {1:f4} = {2:f4} kN-m.", _F5, _e5, _M5));
                list.Add(string.Format("Segment 6,  Moment = M6  = F6 x e6 = {0:f4} x {1:f4} = {2:f4} kN-m.", _F6, _e6, _M6));
                list.Add(string.Format(""));

                _Mtot = _M1 + _M2 + _M3 + _M4 + _M5 + _M6;
                list.Add(string.Format("Total Moment = Mtot = M1+M2+M3+M4+M5+M6 = {0:f4} kN-m.", _Mtot));
                list.Add(string.Format(""));
                list.Add(string.Format("Stress Computation for Fall in Temperature :"));
                list.Add(string.Format("--------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stress Assuming End Restrained :"));
                list.Add(string.Format("--------------------------------"));
                list.Add(string.Format(""));

                _Sigma_ER1 = _Stress1;
                _Sigma_ER2 = _Stress2;
                _Sigma_ER3 = _Stress3;
                _Sigma_ER4 = _Stress4;
                double _Sigma_ER5 = _Stress5;
                double _Sigma_ER6 = _Stress6;
                list.Add(string.Format("Segment1,  Sigma_ER1 = Stress1 = {0:f4} kN/Sq.m.", _Sigma_ER1));
                list.Add(string.Format("Segment2,  Sigma_ER2 = Stress2 = {0:f4} kN/Sq.m.", _Sigma_ER2));
                list.Add(string.Format("Segment3,  Sigma_ER3 = Stress3 = {0:f4} kN/Sq.m.", _Sigma_ER3));
                list.Add(string.Format("Segment4,  Sigma_ER4 = Stress4 = {0:f4} kN/Sq.m.", _Sigma_ER4));
                list.Add(string.Format("Segment5,  Sigma_ER5 = Stress5 = {0:f4} kN/Sq.m.", _Sigma_ER5));
                list.Add(string.Format("Segment6,  Sigma_ER6 = Stress6 = {0:f4} kN/Sq.m.", _Sigma_ER6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stress due to Release of Axial Force :"));
                list.Add(string.Format("--------------------------------------"));
                list.Add(string.Format(""));

                _Sigma_RF1 = -_Ftot / _A;
                _Sigma_RF2 = -_Ftot / _A;
                _Sigma_RF3 = -_Ftot / _A;
                _Sigma_RF4 = -_Ftot / _A;
                double _Sigma_RF5 = -_Ftot / _A;
                double _Sigma_RF6 = -_Ftot / _A;
                list.Add(string.Format("Segment1,  Sigma_RF1= Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", -_Ftot, _A, _Sigma_RF1));
                list.Add(string.Format("Segment2,  Sigma_RF2= Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", -_Ftot, _A, _Sigma_RF2));
                list.Add(string.Format("Segment3,  Sigma_RF3= Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", -_Ftot, _A, _Sigma_RF3));
                list.Add(string.Format("Segment4,  Sigma_RF4= Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", -_Ftot, _A, _Sigma_RF4));
                list.Add(string.Format("Segment5,  Sigma_RF5= Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", -_Ftot, _A, _Sigma_RF5));
                list.Add(string.Format("Segment6,  Sigma_RF6= Ftot/A = {0:f4}/{1:f4} = {2:f4} kN/Sq.m.", -_Ftot, _A, _Sigma_RF6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stress due to Release of Moment :"));
                list.Add(string.Format("---------------------------------"));
                list.Add(string.Format(""));

                _Sigma_RM1 = _Mtot / _Zt;
                list.Add(string.Format("Segment1,  Sigma_RM1 = Mtot / Zt = {0:f4} / {1:f4} = {2:f4} kN/Sq.m.", _Mtot, _Zt, _Sigma_RM1));
                _Sigma_RM2 = _Mtot / _Z_bs;
                list.Add(string.Format("Segment2,  Sigma_RM2 = Mtot / Zbs = {0:f4} / {1:f4} = {2:f4} kN/Sq.m.", _Mtot, _Z_bs, _Sigma_RM2));
                list.Add(string.Format("Segment3,  Sigma_RM3 ="));
                list.Add(string.Format("Segment4,  Sigma_RM4 ="));
                list.Add(string.Format("Segment5,  Sigma_RM5 ="));

                double _Sigma_RM6 = _Mtot / _Zb;
                list.Add(string.Format("Segment6,  Sigma_RM6 = Mtot / Zb ={0:f4} / {1:f4} = {2:f4} kN/Sq.m.", _Mtot, _Zb, _Sigma_RM6));
                list.Add(string.Format(""));
                list.Add(string.Format("Final Stress for Fall in Temperature : "));
                list.Add(string.Format("--------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("At  Segment1,  Segment2,  Segment3,  Segment4,  Segment5,  "));
                list.Add(string.Format(""));
                double _Stempfall1 = _Sigma_ER1 + _Sigma_RF1 + -_Sigma_RM1;

                list.Add(string.Format("Stempfall1 = Sigma_ER1 + Sigma_RF1 + Sigma_RM1"));
                list.Add(string.Format("           = {0:f4} + {1:f4} + {2:f4}", _Sigma_ER1, _Sigma_RF1, -_Sigma_RM1));
                list.Add(string.Format("           = {0:f4} kN/Sq.m", _Stempfall1));
                list.Add(string.Format(""));


                double _Stempfall2 = _Sigma_ER2 + _Sigma_RF2 + -_Sigma_RM2;

                list.Add(string.Format("Stempfall2 = Sigma_ER2 + Sigma_RF2 + Sigma_RM2"));
                list.Add(string.Format("           = {0:f4} + {1:f4} + {2:f4}", _Sigma_ER2, _Sigma_RF2, -_Sigma_RM2));
                list.Add(string.Format("           = {0:f4} kN/Sq.m", _Stempfall2));
                list.Add(string.Format(""));

                list.Add(string.Format("Stempfall3="));
                list.Add(string.Format("Stempfall4="));
                list.Add(string.Format("Stempfall5="));


                double _Stempfall6 = _Sigma_ER6 + _Sigma_RF6 + -_Sigma_RM6;

                list.Add(string.Format("Stempfall6 = Sigma_ER6 + Sigma_RF6 + Sigma_RM6"));
                list.Add(string.Format("           = {0:f4} + {1:f4} + {2:f4}", _Sigma_ER6, _Sigma_RF6, -_Sigma_RM6));
                list.Add(string.Format("           = {0:f4} kN/Sq.m", _Stempfall6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                //list.Add(string.Format("TABLE 14:  Stresses due to Fall in Temperature at various segments"));

                #region TABLE 14:  Stresses due to Fall in Temperature at various segments :
                //format = "{0,10:f3} {1,10:f3} {2,10:f3} {3,10:f3} {4,10:f3} {5,10:f3} {6,10:f3} {7,10:f3} {8,10:f3} {9,10:f3} {10,10:f3} {11,10:f3}";
                format = "{0,-7:f3} {1,7:f3} {2,10:f3} {3,7:f3} {4,10:f3} {5,7:f3} {6,7:f3} {7,10:f3} {8,10:f3} {9,12:f3} {10,14:f3} {11,12:f3}";
                list.Add(string.Format("TABLE 14 : Stresses due to Fall in Temperature at various segments :"));
                list.Add(string.Format("-------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(""));

                list.Add(string.Format(format,
                    "Segment",
                    "Height",
                    "Stress",
                    "b",
                    "Force",
                    "y",
                    "e",
                    "Moment",
                    "Assuming",
                    "Stress due to",
                    "Stress due to",
                    "Final"));
                list.Add(string.Format(format,
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "End",
                    "Release of",
                    "Release of",
                    "Stress"));
                list.Add(string.Format(format,
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Moment",
                    "Restrained",
                    "Force",
                    "Moment",
                    ""));
                //list.Add(string.Format(format,
                //    "Segment",
                //    "Height",
                //    "Stress",
                //    "b",
                //    "Force",
                //    "y",
                //    "e",
                //    "Moment",
                //    "Restrained",
                //    "Force",
                //    "Moment",
                //    "Stress"));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(format,
                                   "(unit)",
                                   "(m)",
                                   "(kN/Sq.m)",
                                   "(m)",
                                   "(kN)",
                                   "(m)",
                                   "(m)",
                                   "(kN-m)",
                                   "(kN/Sq.m)",
                                   "(kN/Sq.m)",
                                   "(kN/Sq.m)",
                                   "(kN/Sq.m)"));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(format,
                                   "1",
                                   _d1,
                                   _Stress1,
                                   _b1,
                                   _F1,
                                   _y1,
                                   _e1,
                                   _M1,
                                   _Sigma_ER1,
                                   _Sigma_RF1,
                                   _Sigma_RM1,
                                   _Stempfall1));
                list.Add(string.Format("".PadLeft(125, '-')));

                list.Add(string.Format(format,
                                                  "2",
                                                  _d2,
                                                  _Stress2,
                                                  _b2,
                                                  _F2,
                                                  _y2,
                                                  _e2,
                                                  _M2,
                                                  _Sigma_ER2,
                                                  _Sigma_RF2,
                                                  _Sigma_RM2,
                                                  _Stempfall2));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(format,
                                                  "3",
                                                  _d3,
                                                  _Stress3,
                                                  _b3,
                                                  _F3,
                                                  _y3,
                                                  _e3,
                                                  _M3,
                                                  _Sigma_ER3,
                                                  _Sigma_RF3,
                                                  "",
                                                  ""));
                list.Add(string.Format("".PadLeft(125, '-')));

                list.Add(string.Format(format,
                                                  "4",
                                                  _d4,
                                                  _Stress4,
                                                  _b4,
                                                  _F4,
                                                  _y4,
                                                  _e4,
                                                  _M4,
                                                  _Sigma_ER4,
                                                  _Sigma_RF4,
                                                  "",
                                                  ""));
                list.Add(string.Format("".PadLeft(125, '-')));

                list.Add(string.Format(format,
                                                  "5",
                                                  _d5,
                                                  _Stress5,
                                                  _b5,
                                                  _F5,
                                                  _y5,
                                                  _e5,
                                                  _M5,
                                                  _Sigma_ER5,
                                                  _Sigma_RF5,
                                                  "",
                                                  ""));
                list.Add(string.Format("".PadLeft(125, '-')));

                list.Add(string.Format(format,
                                                  "6",
                                                  _d6,
                                                  _Stress6,
                                                  _b6,
                                                  _F6,
                                                  _y6,
                                                  _e6,
                                                  _M6,
                                                  _Sigma_ER6,
                                                  _Sigma_RF6,
                                                  _Sigma_RM6,
                                                  _Stempfall6));
                list.Add(string.Format("".PadLeft(125, '-')));





                list.Add(string.Format(format,
                                     "Total",
                                     "",
                                     "",
                                     "",
                                     _Ftot,
                                     "",
                                     "",
                                     _Mtot,
                                     "",
                                     "",
                                     "",
                                     ""));
                list.Add(string.Format("".PadLeft(125, '-')));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion TABLE 14:  Stresses due to Fall in Temperature at various segments :

                //list.Add(string.Format(""));
                //list.Add(string.Format("  Segment          Height          Stress          b          Force          y          e          Moment                                       Stresses        "));
                //list.Add(string.Format("                                                                Assuming End Restrained        Stress due to Release of Axial Force        Stress due  to Release of Moment        Final Stress          "));
                //list.Add(string.Format("        m        kN/Sq.m        m        kN        m        m        kN-m        kN/Sq.m        kN/Sq.m        kN/Sq.m        kN/Sq.m        "));
                //list.Add(string.Format("1        0.225        -3919.032        9.750        -4984.042        0.085        0.89        -4435.79        -3919.032        1324.732        -465.506        -2128.794        "));
                //list.Add(string.Format("2        0.025        -624.824        1.000        -11.045        0.235        0.74        -8.1733        -624.824        1324.732        -357.996        1057.904        "));
                //list.Add(string.Format("3        0.150        -258.800        1.000        -24.2625        0.310        0.665        -16.135        -258.800        1324.732                        "));
                //list.Add(string.Format("4        0.050        -64.7        0.651        -1.053        0.417        0.558        -0.5875        -64.7        1324.732        -728.018        -387.402         "));
                //list.Add(string.Format("5        0.200        -295.776        0.651        -19.255        2.183        -1.208        23.26        -295.776                                "));
                //list.Add(string.Format("6        0.250        -2440.152        4.500        -1538.959        2.408        -1.433        2205.329        -2440.152                                "));
                //list.Add(string.Format("Total                -6578.617                5803.172                "));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                #endregion STEP 5.2 : Calculation for TABLE 14 for  Stresses due to Fall in Temperature at various segments


                #endregion STEP 5

                #region STEP 6: DESIGN FOR FLEXURE

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6: DESIGN FOR FLEXURE "));
                list.Add(string.Format("--------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Grade of Concrete = Fcu = {0} N/Sq.mm = {0} Mpa", Fcu));
                list.Add(string.Format(""));
                list.Add(string.Format("(Value of Fcu is Taken From Tab1 )"));
                list.Add(string.Format(""));
                list.Add(string.Format("Allowable stresses in concrete:"));
                list.Add(string.Format(""));

                double _fc_temp14 = fsp_fcj * 0.5;
                list.Add(string.Format("Temporary compressive stress after {0} days  =  fc_temp{0} = 0.5 x fcj{0} = 0.5 x {1} = {2:f3} Mpa", fsp_day, fsp_fcj, _fc_temp14));
                list.Add(string.Format(""));
                list.Add(string.Format("(Above value of fcj{0} is Taken From Tab 2, (A) (ii))", fsp_day));
                list.Add(string.Format(""));

                double _ft_temp14 = _fc_temp14 / 10.0;
                list.Add(string.Format("Temporary tensile stress after {0} days =  ft_temp{0} = {1:f3}/10 = {2:f3} Mpa", fsp_day, _fc_temp14, _ft_temp14));
                list.Add(string.Format(""));
                fc_temp28 = 0.5 * Fcu;

                double _fsp_day2 = fsp_day * 2;
                list.Add(string.Format("Temporary Compressive stress after {0} days = fc_temp{0} = 0.5 x Fcu = 0.5 x {1} = {2:f3} Mpa", _fsp_day2, Fcu, fc_temp28));
                list.Add(string.Format(""));

                double _ft_temp28 = fc_temp28 / 10.0;
                list.Add(string.Format("Temporary tensile stress after {0} days =  ft_temp{0} = {1:f3}/10 = {2:f3} Mpa", _fsp_day2, fc_temp28, _ft_temp28));
                double _fc_serv = (0.33 * Fcu) / 0.981;
                list.Add(string.Format(""));
                list.Add(string.Format("Service Stage compressive stress = fc_serv = 0.33 x Fcu / 0.981 = 0.33 x {0} / 0.981 = {1:f3} Mpa", Fcu, _fc_serv));

                double _mod_rup = 0.7 * Sqrt(Fcu) * 2.0 / 3.0;
                list.Add(string.Format(""));
                list.Add(string.Format("Modulus of Rupture = 0.7 x Sqrt(Fcu) x 2 / 3 = 0.7 x Sqrt({0}) x 2 / 3 = {1:f3} Mpa", Fcu, _mod_rup));
                list.Add(string.Format(""));


                double _fact_ex_tm = 1 + (T_loss / 100.0);
                list.Add(string.Format("Factor for extra time dependent loss considered = 1 + (T_loss/100) = 1+({0}/100) = {1:f3}", T_loss, _fact_ex_tm));
                list.Add(string.Format(""));
                list.Add(string.Format("(From Final Section Properties at Table4)"));
                list.Add(string.Format(""));

                list.Add(string.Format("Top Section Modulus = Zt = {0} Cu.m.", Zt.ToString(", ")));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Section Modulus = Zb = {0} Cu.m.", Zb.ToString(", ")));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                double _P1 = Total_P.F1;
                double _P2 = Total_P.F3;
                double _P3 = Total_P.F4;
                double _P4 = Total_P.F5;
                double _P5 = Total_P.F6;
                list.Add(string.Format("Prestressing Forces P1 = {0:f3}, P2 = {1:f3}, P3 = {2:f3}, P4 = {3:f3}, P5 = {4:f3}",
                    _P1, _P2, _P3, _P4, _P5));
                list.Add(string.Format(""));

                double _A1 = A.F1;
                double _A2 = A.F3;
                double _A3 = A.F4;
                double _A4 = A.F5;
                double _A5 = A.F6;
                list.Add(string.Format("Area = A1 = {0:f3} Sq.m., A2 = {1:f3} Sq.m., A3 = {2:f3} Sq.m., A4 = {3:f3} Sq.m., A5 = {4:f3} Sq.m.",
                    _A1, _A2, _A3, _A4, _A5));
                list.Add(string.Format(""));

                double _Yb1 = Yb.F1;
                double _Yb2 = Yb.F3;
                double _Yb3 = Yb.F4;
                double _Yb4 = Yb.F5;
                double _Yb5 = Yb.F6;
                list.Add(string.Format("C.G. from soffit = Yb1 = {0:f3} m., Yb2 = {1:f3} m., Yb3 = {2:f3} m., Yb4 = {3:f3} m., Yb5 = {4:f3} m",
                    _Yb1, _Yb2, _Yb3, _Yb4, _Yb5));
                list.Add(string.Format(""));

                double _Ecc1 = Total_h.F1;
                double _Ecc2 = Total_h.F3;
                double _Ecc3 = Total_h.F4;
                double _Ecc4 = Total_h.F5;
                double _Ecc5 = Total_h.F6;
                list.Add(string.Format("Eccentricity of Cables from bottom Ecc1 = 0.808, Ecc2 = 0.496, Ecc3 = 0.428, Ecc4 = 0.257, Ecc5 = 0.173",
                                                _Ecc1, _Ecc2, _Ecc3, _Ecc4, _Ecc5));
                list.Add(string.Format(""));
                #endregion STEP 6

                #region STEP 6.1 : At Support Section
                /*
                list.Add(string.Format(""));

                list.Add(string.Format("STEP 6.1 : At Support Section   (From Step 2, TABLE 4)"));
                list.Add(string.Format("--------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Length of Segment = L1 = {0:f3} m.", _L1.F1));
                list.Add(string.Format("Area = A = {0:f3} Sq.m. ", A.F1));
                list.Add(string.Format("C.G. from soffit = Yb = {0:f3} m.", Yb.F1));
                list.Add(string.Format("Moment of Inertia = Ixx = {0:f4}  Sq.Sq.m.", Ixx.F1));
                list.Add(string.Format("Top Section Modulus = Zt = {0:f4} Cu.m.", Zt.F1));
                list.Add(string.Format("Bottom Section Modulus = Zb = {0:f4} Cu.m.", Zb.F1));
                list.Add(string.Format(""));



                double _Mdl = forces.FRC_DL_Moment.F1;

                list.Add(string.Format("Bending Moment due to DL (Self weight) = Mdl = {0:f4} Ton-m   (From Step 3, TABLE 5)", _Mdl));
                double _mdl_by_zt = _Mdl / Zt.F1;
                list.Add(string.Format("Top stress due to DL = Mdl/Zt = {0:f4} Ton / Sq.m.", _mdl_by_zt));

                double _mdl_by_zb = _Mdl / Zb.F1;

                list.Add(string.Format("Bottom stress due to DL = Mdl/Zb = {0:f4}Ton / Sq.m.", _mdl_by_zb));
                list.Add(string.Format(""));
                list.Add(string.Format("Stage 1 Prestressing at {0} days, (From Tab 2, A (ii))", fsp_day));
                list.Add(string.Format(""));
                list.Add(string.Format("Stage 1 Prestressing Force after Friction and Slip = P = {0:f4} Ton (From Step 4, TABLE 12)", _P1));
                list.Add(string.Format("Eccentricity of Cables from bottom = Ecc = {0:f4} m", _Ecc1));
                double _top_stress = -_P1 * (1 / A.F1 - (Yb.F1 - _Ecc1) / Zt.F1);
                list.Add(string.Format("Top Stress due to P = P x (1/A - (Yb - Ecc) / Zt)"));
                list.Add(string.Format("                    = {0:f4} x (1/{1:f3} - ({2:f3} - {3:f3}) / {4:f3})", _P1, A.F1, Yb.F1, _Ecc1, Zt.F1));
                list.Add(string.Format("                    = {0:f4} Ton / Sq.m.", _top_stress));
                list.Add(string.Format(""));

                double _bottom_stress = _P1 * (1 / A.F1 + (Yb.F1 - _Ecc1) / Zb.F1);

                list.Add(string.Format("Bottom Stress due to P = P x (1/A + (Yb - Ecc) / Zb) "));
                list.Add(string.Format("                       = {0:f4} x (1/{1:f4} + ({2:f4} - {3:f4}) / {4:f4})", _P1, A.F1, Yb.F1, _Ecc1, Zb.F1));
                list.Add(string.Format("                       = {0:f4} Ton / Sq.m.", _bottom_stress));


                //list.Add(string.Format("Bottom Stress due to P = P x (1/A + (Yb - Ecc) / Zb) = 2953.4 x (1/7.099 + (1.322 - 0.808) / 4.585) = 747.12 Ton / Sq.m."));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Stress after Prestress"));
                list.Add(string.Format("-----------------------------"));
                list.Add(string.Format(""));

                double Stop = _mdl_by_zt + _top_stress;
                list.Add(string.Format("Top stress = Top stress due to DL + Top Stress due to P = {0:f4} + ({1:f4}) = {2:f4} Ton / Sq.m.", _mdl_by_zt, _top_stress, Stop));
                list.Add(string.Format(""));

                double Sbottom = _mdl_by_zb + _bottom_stress;
                list.Add(string.Format("Bottom Stress = Bottom stress due to DL + Bottom Stress due to P = {0:f4} + ({1:f4}) = {2:f4} Ton / Sq.m.", _mdl_by_zb, _bottom_stress, Sbottom));
                list.Add(string.Format(""));
                list.Add(string.Format("Immediate Losses in Cables"));
                list.Add(string.Format("--------------------------"));
                list.Add(string.Format(""));
                double _Scg1 = Sbottom - ((Sbottom - Stop) / (D)) * _Ecc1;

                list.Add(string.Format("Stress at CG of Cables = Scg1 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                list.Add(string.Format("                              =  {0:f4} - (({0:f4} + {1:f4}) / {2:f4}) x {3:f4}", Sbottom, Stop, D, _Ecc1));
                list.Add(string.Format("                              =  {0:f4} Ton/Sq.m.", _Scg1));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Summary  of Result at support :"));
                list.Add(string.Format("-------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("P = {0:f4}", _P1));
                list.Add(string.Format("Ecc = {0:f4}", _Ecc1));
                list.Add(string.Format("Top Stress due to P = Stop = {0:f4}", Stop));
                list.Add(string.Format("Bottom Stress due to P = Sbottom = {0:f4}", Sbottom));
                double _Stopps = _top_stress;
                list.Add(string.Format("Top stress after Prestress = Stopps = {0:f4}", _Stopps));
                double _Sbottomps = _bottom_stress;
                list.Add(string.Format("Bottom Stress after Prestress = Sbottomps  = {0:f4}", _Sbottomps));
                list.Add(string.Format("Stress after loss at CG of Cables = Scg1 = {0:f4}", _Scg1));

                double _Zt1 = Zt.F1;
                double _Zt2 = Zt.F3;
                double _Zt3 = Zt.F4;
                double _Zt4 = Zt.F5;
                double _Zt5 = Zt.F6;
                list.Add(string.Format("Top Section Modulus = Zt1 = {0:f4} Cu.m , Zt2 = {1:f4} Cu.m., Zt3 = {2:f4} Cu.m., Zt4 = {3:f4} Cu.m., Zt5 = {4:f4} Cu.m. ",
                    _Zt1, _Zt2, _Zt3, _Zt4, _Zt5));
                list.Add(string.Format(""));

                double _Zb1 = Zb.F1;
                double _Zb2 = Zb.F3;
                double _Zb3 = Zb.F4;
                double _Zb4 = Zb.F5;
                double _Zb5 = Zb.F6;
                list.Add(string.Format("Bottom Section Modulus = Zb1 = {0:f4} Cu.m , Zb2 = {1:f4} Cu.m., Zb3 = {2:f4} Cu.m., Zb4 = {3:f4} Cu.m., Zb5 = {4:f4} Cu.m. ",
                 _Zb1, _Zb2, _Zb3, _Zb4, _Zb5));
                //list.Add(string.Format("Bottom Section Modulus = Zb1 = 4.5846 Cu.m., Zb2 = 3.265 Cu.m.,  Zb3 = 3.066 Cu.m., Zb4 = 3.066 Cu.m., "));
                //list.Add(string.Format("Zb5 = 3.066 Cu.m."));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                /**/
                #endregion STEP 6.1 : At Support Section

                #region STEP 6.2 - 6.5 : At Support Section

                int indx = 0;

                string step_title = "";
                list.Add(string.Format(""));


                PSC_Force_Data _Mdl = forces.FRC_DL_Moment;
                PSC_Force_Data _mdl_by_zt = new PSC_Force_Data(A.Count);
                PSC_Force_Data _mdl_by_zb = new PSC_Force_Data(A.Count);
                PSC_Force_Data _Stopps = new PSC_Force_Data(A.Count);
                PSC_Force_Data _Sbottomps = new PSC_Force_Data(A.Count);
                PSC_Force_Data _Stop = new PSC_Force_Data(A.Count);

                PSC_Force_Data _Sbottom = new PSC_Force_Data(A.Count);
                PSC_Force_Data _Scg = new PSC_Force_Data(A.Count);
                PSC_Force_Data _L = new PSC_Force_Data(A.Count);

                int count_indx = 0;

                do
                {
                    count_indx++;
                    switch (indx)
                    {
                        case 0:
                            step_title = "At Support Section   (From Step 2, TABLE 4)";
                            _L[indx] = L_support;
                            break;
                        case 2:
                            _L[indx] = L_8;
                            step_title = "At 1/8 th Span Section (Taking values from Step 2, TABLE 4)";
                            break;
                        case 3:
                            //_L[indx] = L_4;
                            _L[indx] = L_8;
                            step_title = "At 1/4 th Span Section (Taking values from Step 2, TABLE 4)";
                            break;
                        case 4:
                            //_L[indx] = L3_8;
                            _L[indx] = L_8;
                            step_title = "At 3/8 th Span Section  (Taking values from Step 2, TABLE 4)";
                            break;
                        case 5:
                            //_L[indx] = L_2;
                            _L[indx] = L_8;
                            step_title = "At Span/2 Section (Taking values from Step 2, TABLE 4)";
                            break;

                    }

                    #region STEP 6.1 : At Support Section
                    list.Add(string.Format(""));

                    list.Add(string.Format("STEP 6.{0} :{1}", count_indx, step_title));
                    list.Add(string.Format("---------------------------------------------------------------------------------"));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));

                    list.Add(string.Format("Length of Segment = L{0} = {1:f3} m.", count_indx, _L[indx]));
                    list.Add(string.Format("Area = A = {0:f3} Sq.m. ", A[indx]));
                    list.Add(string.Format("C.G. from soffit = Yb = {0:f3} m.", Yb[indx]));
                    list.Add(string.Format("Moment of Inertia = Ixx = {0:f4}  Sq.Sq.m.", Ixx[indx]));
                    list.Add(string.Format("Top Section Modulus = Zt = {0:f4} Cu.m.", Zt[indx]));
                    list.Add(string.Format("Bottom Section Modulus = Zb = {0:f4} Cu.m.", Zb[indx]));
                    list.Add(string.Format(""));



                    //double _Mdl = forces.FRC_DL_Moment[indx];

                    list.Add(string.Format("Bending Moment due to DL (Self weight) = Mdl = {0:f4} Ton-m   (From Step 3, TABLE 5)", _Mdl[indx]));



                    _mdl_by_zt[indx] = _Mdl[indx] / Zt[indx];


                    list.Add(string.Format("Top stress due to DL = Mdl/Zt = {0:f4} Ton / Sq.m.", _mdl_by_zt[indx]));


                    _mdl_by_zb[indx] = -_Mdl[indx] / Zb[indx]; //Chiranjit [2013 06 22]
                    //_mdl_by_zb[indx] = _Mdl[indx] / Zb[indx]; //Chiranjit [2013 06 22]

                    list.Add(string.Format("Bottom stress due to DL = Mdl/Zb = {0:f4}Ton / Sq.m.", _mdl_by_zb[indx]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Stage 1 Prestressing at {0} days, (From Tab 2, A (ii))", fsp_day));
                    list.Add(string.Format("----------------------------------------------------------------------------"));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Stage 1 Prestressing Force after Friction and Slip = P = {0:f4} Ton (From Step 4, TABLE 12)", Total_P[indx]));
                    list.Add(string.Format("Eccentricity of Cables from bottom = Ecc = {0:f4} m", Total_h[indx]));



                    _Stop[indx] = Total_P[indx] * (1 / A[indx] - (Yb[indx] - Total_h[indx]) / Zt[indx]);//Chiranjit [2013 06 23]


                    list.Add(string.Format("Top Stress due to P = P x (1/A - (Yb - Ecc) / Zt)"));
                    list.Add(string.Format("                    = {0:f4} x (1/{1:f3} - ({2:f3} - {3:f3}) / {4:f3})",
                        Total_P[indx], A[indx], Yb[indx], Total_h[indx], Zt[indx]));
                    list.Add(string.Format("                    = {0:f4} Ton / Sq.m.", _Stop[indx]));
                    list.Add(string.Format(""));


                    _Sbottom[indx] = Total_P[indx] * (1 / A[indx] + (Yb[indx] - Total_h[indx]) / Zb[indx]); //Chiranjit [2013 06 23]

                    list.Add(string.Format("Bottom Stress due to P = P x (1/A + (Yb - Ecc) / Zb) "));
                    list.Add(string.Format("                       = {0:f4} x (1/{1:f4} + ({2:f4} - {3:f4}) / {4:f4})", Total_P[indx], A[indx], Yb[indx], Total_h[indx], Zb[indx]));
                    list.Add(string.Format("                       = {0:f4} Ton / Sq.m.", _Sbottom[indx]));


                    //list.Add(string.Format("Bottom Stress due to P = P x (1/A + (Yb - Ecc) / Zb) = 2953.4 x (1/7.099 + (1.322 - 0.808) / 4.585) = 747.12 Ton / Sq.m."));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Total Stress after Prestress"));
                    list.Add(string.Format("-----------------------------"));
                    list.Add(string.Format(""));

                    _Stopps[indx] = _mdl_by_zt[indx] + _Stop[indx];


                    list.Add(string.Format("Top stress = Top stress due to DL + Top Stress due to P = {0:f4} + ({1:f4}) = {2:f4} Ton / Sq.m.", _mdl_by_zt[indx], _Stop[indx], _Stopps[indx]));
                    list.Add(string.Format(""));

                    _Sbottomps[indx] = _mdl_by_zb[indx] + _Sbottom[indx];
                    list.Add(string.Format("Bottom Stress = Bottom stress due to DL + Bottom Stress due to P = {0:f4} + ({1:f4}) = {2:f4} Ton / Sq.m.", _mdl_by_zb[indx], _Sbottom[indx], _Sbottomps[indx]));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Immediate Losses in Cables"));
                    list.Add(string.Format("--------------------------"));
                    list.Add(string.Format(""));


                    _Scg[indx] = _Sbottom[indx] - ((_Sbottom[indx] - _Stop[indx]) / (D)) * Total_h[indx];


                    list.Add(string.Format("Stress at CG of Cables = Scg{0} = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc", (indx + 1)));
                    list.Add(string.Format("                              =  {0:f4} - (({0:f4} + {1:f4}) / {2:f4}) x {3:f4}", _Sbottom[indx], _Stop[indx], D, Total_h[indx]));
                    list.Add(string.Format("                              =  {0:f4} Ton/Sq.m.", _Scg[indx]));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("Summary  of Result at support :"));
                    list.Add(string.Format("-------------------------------"));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("P = {0:f4}", Total_P[indx]));
                    list.Add(string.Format("Ecc = {0:f4}", Total_h[indx]));
                    list.Add(string.Format("Top Stress due to P = Stop = {0:f4}", _Stop[indx]));
                    list.Add(string.Format("Bottom Stress due to P = Sbottom = {0:f4}", _Sbottom[indx]));
                    //double _Stopps = _top_stress;
                    list.Add(string.Format("Top stress after Prestress = Stopps = {0:f4}", _Stopps[indx]));
                    //double _Sbottomps = _bottom_stress;
                    list.Add(string.Format("Bottom Stress after Prestress = Sbottomps  = {0:f4}", _Sbottomps[indx]));
                    list.Add(string.Format("Stress after loss at CG of Cables = Scg{0} = {1:f4}", count_indx, _Scg[indx]));

                    double _Zt1 = Zt.F1;
                    double _Zt2 = Zt.F3;
                    double _Zt3 = Zt.F4;
                    double _Zt4 = Zt.F5;
                    double _Zt5 = Zt.F6;


                    list.Add(string.Format("Top Section Modulus = Zt1 = {0:f4} Cu.m , Zt2 = {1:f4} Cu.m., Zt3 = {2:f4} Cu.m., Zt4 = {3:f4} Cu.m., Zt5 = {4:f4} Cu.m. ",
                        _Zt1, _Zt2, _Zt3, _Zt4, _Zt5));
                    list.Add(string.Format(""));

                    double _Zb1 = Zb.F1;
                    double _Zb2 = Zb.F3;
                    double _Zb3 = Zb.F4;
                    double _Zb4 = Zb.F5;
                    double _Zb5 = Zb.F6;

                    list.Add(string.Format("Bottom Section Modulus = Zb1 = {0:f4} Cu.m , Zb2 = {1:f4} Cu.m., Zb3 = {2:f4} Cu.m., Zb4 = {3:f4} Cu.m., Zb5 = {4:f4} Cu.m. ",
                     _Zb1, _Zb2, _Zb3, _Zb4, _Zb5));
                    //list.Add(string.Format("Bottom Section Modulus = Zb1 = 4.5846 Cu.m., Zb2 = 3.265 Cu.m.,  Zb3 = 3.066 Cu.m., Zb4 = 3.066 Cu.m., "));
                    //list.Add(string.Format("Zb5 = 3.066 Cu.m."));
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));

                    #endregion STEP 6.1 : At Support Section
                    indx++;
                    //if (indx == 1) indx++;
                }
                //while (count_indx != 5);//Chiranjit [2013 06 25]
                while (count_indx != 6);//Chiranjit [2013 06 25]



                #endregion STEP 6.2 - 6.5 : At Support Section

                #region STEP 6.6: Summary  of Result at Support, Span/8. Span/4, Span3/8, Span/2
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                //list.Add(string.Format(""));





                list.Add(string.Format("STEP 6.6: Summary  of Result at Support, Span/8. Span/4, Span3/8, Span/2 :"));
                list.Add(string.Format("--------------------------------------------------------------------------"));
                list.Add(string.Format(""));

                format = "{0,-33:f3} {1,-10:f3} {2,12:f3} {3,12:f3} {4,12:f3} {5,12:f3} {6,12:f3}";
                list.Add(string.Format("".PadLeft(110, '-')));
                list.Add(string.Format(format, "Segment ", "", "Support", "Span/8", "Span/4", "Span 3/8", "Span/2"));
                list.Add(string.Format(format, "", "L", _L[0], _L[2], _L[3], _L[4], _L[5]));
                list.Add(string.Format("".PadLeft(110, '-')));
                list.Add(string.Format(format, "Prestressing Force ", "P", Total_P[0], Total_P[2], Total_P[3], Total_P[4], Total_P[5]));
                list.Add(string.Format(format, "Eccentricity", "Ecc", Total_h[0], Total_h[2], Total_h[3], Total_h[4], Total_h[5]));
                list.Add(string.Format(format, "Top Stress due to P", "Stop", -_Stop[0], _Stop[2], _Stop[3], _Stop[4], _Stop[5]));
                list.Add(string.Format(format, "Bottom Stress due to P ", "Sbottom", _Sbottom[0], _Sbottom[2], _Sbottom[3], _Sbottom[4], _Sbottom[5]));
                list.Add(string.Format(format, "Top stress after Prestress", "Stopps", -_Stopps[0], _Stopps[2], _Stopps[3], _Stopps[4], _Stopps[5]));
                list.Add(string.Format(format, "Bottom Stress after Prestress", "Sbottomps", _Sbottomps[0], _Sbottomps[2], _Sbottomps[3], _Sbottomps[4], _Sbottomps[5]));

                list.Add(string.Format(format, "Stress after loss at CG of Cables", "Scg", _Scg[0], _Scg[2], _Scg[3], _Scg[4], _Scg[5]));
                list.Add(string.Format("".PadLeft(110, '-')));


                //list.Add(string.Format("Prestressing Force = P = 2953.4        3086.3             3737.6                4143.34        4116.09"));
                //list.Add(string.Format("Eccentricity = Ecc = 0.808         0.496                0.428                0.257                0.173"));
                //list.Add(string.Format("Top Stress due to P = Stop = -121.09,  -83.54,  -102.45,  -261.33,  -465.375"));
                //list.Add(string.Format("Bottom Stress due to P = Sbottom = 747.12,  1495.60,  2089.93,  2547.89,  2643.850"));
                //list.Add(string.Format("Top stress after Prestress = Stopps = -121.09, 264.58,  495.05,  481.736,  326.075"));
                //list.Add(string.Format("Bottom Stress after Prestress = Sbottomps = 747.12, 976.46,  1155.53,  1385.790,  1406.08"));
                //list.Add(string.Format("Stress after loss at CG of Cables = Scg1 = 466.515,  835.22,  1042.456,  1292.853,  1331.344"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                //_L
                list.Add(string.Format("STEP 6.7 : Average Stress at CG of Tendon = Savcg "));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("(Data From STEP 6.6)"));
                list.Add(string.Format(""));
                _Scg.RemoveAt(1);
                _L.RemoveAt(1);
                list.Add(string.Format("Scg1 = {0:f3}", _Scg.F1));
                list.Add(string.Format("Scg2 = {0:f3}", _Scg.F2));
                list.Add(string.Format("Scg3 = {0:f3}", _Scg.F3));
                list.Add(string.Format("Scg4 = {0:f3}", _Scg.F4));
                list.Add(string.Format("Scg5 = {0:f3}", _Scg.F5));
                //list.Add(string.Format("Scg1 =  466.515   Scg2=835.22         Scg3=1042.456             Scg4=1292.853     Scg5=1331.344 "));
                list.Add(string.Format("L1 = {0:f3},  L2=L3=L4=L5={1:f3} m.", _L.F1, _L.F5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Savcg = "));

                double _Savcg = (((_Scg.F1 + _Scg.F2) / 2) * _L.F2 + ((_Scg.F2 + _Scg.F3) / 2) * _L.F3 + ((_Scg.F3 + _Scg.F4) / 2) * _L.F4 + ((_Scg.F4 + _Scg.F5) / 2) * _L.F5) / (_L.F2 + _L.F3 + _L.F4 + _L.F5);

                list.Add(string.Format(""));
                list.Add(string.Format("      = [((Scg1 + Scg2)/2)xL2"));
                list.Add(string.Format("      + ((Scg2 + Scg3)/2)xL3 "));
                list.Add(string.Format("      + ((Scg3 + Scg4)/2)xL4 "));
                list.Add(string.Format("      + ((Scg4 + Scg5)/2)xL5] / (L2+ L3+ L4+ L5)"));

                list.Add(string.Format(""));
                list.Add(string.Format("      = [(({0:f3} + {1:f3})/2)x{2:f3}", _Scg.F1, _Scg.F2, _L.F2));
                list.Add(string.Format("      + (({0:f3} + {1:f3})/2)x{2:f3}", _Scg.F2, _Scg.F3, _L.F3));
                list.Add(string.Format("      + (({0:f3} + {1:f3})/2)x{2:f3}", _Scg.F3, _Scg.F4, _L.F4));
                list.Add(string.Format("      + (({0:f3} + {1:f3})/2)x{2:f3}] / ({3:f3}+ {4:f3}+ {5:f3}+ {2:f3})", _Scg.F4, _Scg.F5, _L.F5, _L.F2, _L.F3, _L.F4));
                list.Add(string.Format(""));
                list.Add(string.Format("      = {0:f3} Ton / Sq.m.", _Savcg));



                //list.Add(string.Format("      =[(({0:f3}+{1:f3})/2)x5.969  + ((835.22+1042.456)/2)x5.969  + ((1042.456+1292.853)/2)x5.969+ ((1292.853+1331.344)/2)x5.969]  / (5.969 + 5.969  + 5.969  + 5.969 )"));
                //list.Add(string.Format("      = (3885.028 + 5603.924 + 6969.73 + 7831.92) / 23.876"));
                //list.Add(string.Format("      = 1017.365 Ton / Sq.m."));

                //list.Add(string.Format("      = ((Scg1 + Scg2)/2)xL2  + ((Scg2 + Scg3)/2)xL3  + ((Scg3 + Scg4)/2)xL4  + ((Scg4 + Scg5)/2)xL5 / (L2+ L3+ L4+ L5)"));
                //list.Add(string.Format("      =[((466.515+835.22)/2)x5.969  + ((835.22+1042.456)/2)x5.969  + ((1042.456+1292.853)/2)x5.969+ ((1292.853+1331.344)/2)x5.969]  / (5.969 + 5.969  + 5.969  + 5.969 )"));
                //list.Add(string.Format("      = (3885.028 + 5603.924 + 6969.73 + 7831.92) / 23.876"));
                //list.Add(string.Format("      = 1017.365 Ton / Sq.m."));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.8: Total Elastic Shortening Loss = Eloss"));
                list.Add(string.Format("-------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("Ec = 31622.8,   Eps = 195,  A = 140    (From Tab 2, (B) 17, (B) 7, (B) 2  respectively)"));
                list.Add(string.Format("Ec = {0:f3},   Eps = {1:f3},  A = {2:f3} (From Tab 2, (B) 17, (B) 7, (B) 2  respectively)", Ec, Eps, NA));
                list.Add(string.Format(""));

                list.Add(string.Format("Total number of Cables at L/2 = {0:f3} (From Step 4, TABLE 12,)", Cable_Nos_At_L2.SUM));
                list.Add(string.Format("Number of Strands = Ns = {0} (From Step 4)", Ns));
                list.Add(string.Format(""));

                double _Eloss = (_Savcg / 2 / Ec) * Eps * 1000.0 * (Cable_Nos_At_L2.SUM) * NA * Ns / (1000000);
                list.Add(string.Format("Eloss = (Savcg / 2 / Ec) x Eps x 1000.0 x (Total number of Cables at L/2) x A x Ns / (1000000)"));
                //list.Add(string.Format("      = (Savcg / 2 / Ec) x Eps x 1000.0 x (Total number of Cables at L/2) x A x Ns / (1000000)"));
                list.Add(string.Format(""));
                list.Add(string.Format("      = ({0:f3}/2/{1:f3}) x {2:f3} x 1000.0 x {3:f3} x {4:f3} x {5:f3}/ 1000000",
                                                _Savcg, Ec, Eps, Cable_Nos_At_L2.SUM, NA, Ns));
                list.Add(string.Format("      = {0:f3} Tons", _Eloss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.9: Force in Prestressing Cables after Elastic Shortening Loss"));
                list.Add(string.Format("---------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Data:"));
                list.Add(string.Format("P1 = {0:f3}, P3= {1:f3}, P4 = {2:f3}, P5 = {3:f3}, P6 ={4:f3} Ton (From Step 4, TABLE 12)",
                    Total_P.F1, Total_P.F3, Total_P.F4, Total_P.F5, Total_P.F6));
                list.Add(string.Format(""));





                double _Pes1 = Total_P.F1 - _Eloss;
                list.Add(string.Format("At Support,      Pes1 = P1 - Eloss = {0:f3} - {1:f3} = {2:f3} Tons", Total_P.F1, _Eloss, _Pes1));
                double _Pes2 = Total_P.F3 - _Eloss;
                list.Add(string.Format("At Span/8,       Pes2 = P3 - Eloss = {0:f3} - {1:f3} = {2:f3} Tons", Total_P.F3, _Eloss, _Pes2));
                double _Pes3 = Total_P.F4 - _Eloss;
                list.Add(string.Format("At  Span/4,      Pes3 = P4 - Eloss = {0:f3} - {1:f3} = {2:f3} Tons", Total_P.F4, _Eloss, _Pes3));
                double _Pes4 = Total_P.F5 - _Eloss;
                list.Add(string.Format("At  3 x Span/8,  Pes4 = P5 - Eloss = {0:f3} - {1:f3} = {2:f3} Tons", Total_P.F5, _Eloss, _Pes4));
                double _Pes5 = Total_P.F6 - _Eloss;
                list.Add(string.Format("At  Span/2,      Pes5 = P6 - Eloss = {0:f3} - {1:f3} = {2:f3} Tons", Total_P.F6, _Eloss, _Pes5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.10: Average Force per Cable"));
                list.Add(string.Format("-----------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Data:"));

                double _n1 = Cable_Nos_Support.SUM;
                double _n2 = Cable_Nos_At_L8.SUM;
                double _n3 = Cable_Nos_At_L4.SUM;
                double _n4 = Cable_Nos_At_3L8.SUM;
                double _n5 = Cable_Nos_At_L2.SUM;
                list.Add(string.Format("Total number of cables =  n1={0:f3}, n2={1:f3}, n3={2:f3}, n4={3:f3}, n5={4:f3} (From Step 4, TABLE 12)",
                    _n1, _n2, _n3, _n4, _n5));

                list.Add(string.Format(""));

                double _Pav1 = _Pes1 / _n1;
                double _Pav2 = _Pes2 / _n2;
                double _Pav3 = _Pes3 / _n3;
                double _Pav4 = _Pes4 / _n4;
                double _Pav5 = _Pes5 / _n5;
                list.Add(string.Format("Pav1= Pes1/n1 = {0:f3}/{1:f3} = {2:f3} Tons", _Pes1, _n1, _Pav1));
                list.Add(string.Format("Pav2= Pes2/n2= {0:f3}/{1:f3} = {2:f3} Tons", _Pes2, _n2, _Pav2));
                list.Add(string.Format("Pav3= Pes3/n3 = {0:f3}/{1:f3} = {2:f3} Tons", _Pes3, _n3, _Pav3));
                list.Add(string.Format("Pav4= Pes4/n4 = {0:f3}/{1:f3} = {2:f3} Tons", _Pes4, _n4, _Pav4));
                list.Add(string.Format("Pav5= Pes5/n5 = {0:f3}/{1:f3} = {2:f3} Tons", _Pes5, _n5, _Pav5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                #region STEP 6.11: Percentage of Ultimate Tensile Force (UTF %)
                list.Add(string.Format("STEP 6.11: Percentage of Ultimate Tensile Force (UTF %)"));
                list.Add(string.Format("--------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Minimum Breaking Load = [Pn] = {0} kN (From Tab 2, B 6)", Pn));
                list.Add(string.Format(""));


                double _PERutf1 = (_Pav1 * 10) / (Ns * Pn);
                list.Add(string.Format("PERutf1 = Pav1/(Ns x Pn /10) = {0:f4} x10/({1} x {2}) = {3:f4}", _Pav1, Ns, Pn, _PERutf1));
                list.Add(string.Format(""));

                double _PERutf2 = (_Pav2 * 10) / (Ns * Pn);
                list.Add(string.Format("PERutf2 = Pav2/(Ns x Pn /10) = {0:f4} x10/({1} x {2}) = {3:f4}", _Pav2, Ns, Pn, _PERutf2));
                list.Add(string.Format(""));

                double _PERutf3 = (_Pav3 * 10) / (Ns * Pn);
                list.Add(string.Format("PERutf3 = Pav3/(Ns x Pn /10) = {0:f4} x10/({1} x {2}) = {3:f4}", _Pav3, Ns, Pn, _PERutf3));
                list.Add(string.Format(""));

                double _PERutf4 = (_Pav4 * 10) / (Ns * Pn);
                list.Add(string.Format("PERutf4 = Pav4/(Ns x Pn /10) = {0:f4} x10/({1} x {2}) = {3:f4}", _Pav4, Ns, Pn, _PERutf4));
                list.Add(string.Format(""));

                double _PERutf5 = (_Pav5 * 10) / (Ns * Pn);
                list.Add(string.Format("PERutf5 = Pav5/(Ns x Pn /10) = {0:f4} x10/({1} x {2}) = {3:f4}", _Pav5, Ns, Pn, _PERutf5));
                list.Add(string.Format(""));


                //list.Add(string.Format("PERutf2 = Pav2/(Ns x Pn /10) = 328.10 x10/(19 x 260.700) = 0.662"));
                //list.Add(string.Format("PERutf3 = Pav3/(Ns x Pn /10) = 399.67 x10/(19 x 260.700) = 0.807"));
                //list.Add(string.Format("PERutf4 = Pav4/(Ns x Pn /10) = 364.21x10/(19 x 260.700) = 0.735"));
                //list.Add(string.Format("PERutf5 = Pav5/(Ns x Pn /10) = 331.86 x10/(19 x 260.700) = 0.670"));
                #endregion STEP 6.11: Percentage of Ultimate Tensile Force (UTF %)
                #region STEP STEP 6.12 : Average Force in Cables after Elastic Shortening Loss
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.12 : Average Force in Cables after Elastic Shortening Loss"));
                list.Add(string.Format("------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                double _Paves = (((_Pes1 + _Pes2) / 2) * _L.F2
                                    + ((_Pes2 + _Pes3) / 2) * _L.F3
                                    + ((_Pes3 + _Pes4) / 2) * _L.F4
                                    + ((_Pes4 + _Pes5) / 2) * _L.F5) / (_L.F2 + _L.F3 + _L.F4 + _L.F5);

                list.Add(string.Format("Paves  = ((Pes1 + Pes2)/2)xL2"));
                list.Add(string.Format("          + ((Pes2 + Pes3)/2)xL3"));
                list.Add(string.Format("          + ((Pes3 + Pes4)/2)xL4 "));
                list.Add(string.Format("          + ((Pes4 + Pes5)/2)xL5 / (L2+ L3+ L4+ L5)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("       = [(({0:f4} + {1:f4})/2)x{2:f4}", _Pes1, _Pes2, _L.F2));
                list.Add(string.Format("          + (({0:f4} + {1:f4})/2)x{2:f4}", _Pes2, _Pes3, _L.F3));
                list.Add(string.Format("          + (({0:f4} + {1:f4})/2)x{2:f4}", _Pes3, _Pes4, _L.F4));
                list.Add(string.Format("          + (({0:f4} + {1:f4})/2)x{2:f4}]/ ({3:f4}+ {4:f4}+ {5:f4}+ {2:f4})", _Pes4, _Pes5, _L.F5, _L.F2, _L.F3, _L.F4));
                list.Add(string.Format(""));
                list.Add(string.Format("       =  {0:f4} ", _Paves));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                //list.Add(string.Format("=[((2852.84+2985.74)/2)x5.969  + ((2985.74+3637.04)/2)x5.969  + ((3637.04+4042.78)/2)x5.969+ ((4042.78 +4015.53)/2)x5.969]  / (5.969 + 5.969  + 5.969  + 5.969 )"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("= (17425.24 + 19765.69 + 22920.42 + 24050.02) / 23.876"));
                //list.Add(string.Format("= 3524.936"));
                list.Add(string.Format(""));
                #endregion STEP 6.12 : Average Force in Cables after Elastic Shortening Loss


                #region STEP 6.13 : Percentage of average force in cables with respect to Ultimate Tensile Force (UTF %)

                list.Add(string.Format("STEP 6.13 : Percentage of average force in cables with respect to Ultimate Tensile Force (UTF %)"));
                list.Add(string.Format("-------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _PavPERutf = (((_PERutf1 + _PERutf2) / 2) * _L.F2
                                        + ((_PERutf2 + _PERutf3) / 2) * _L.F3 +
                                        ((_PERutf3 + _PERutf4) / 2) * _L.F4
                                        + ((_PERutf4 + _PERutf5) / 2) * _L.F5) / (_L.F2 + _L.F3 + _L.F4 + _L.F5);


                list.Add(string.Format("PavPERutf  = [(PERutf1 + PERutf2)/2)xL2  "));
                list.Add(string.Format("             + ((PERutf2 + PERutf3)/2)xL3 "));
                list.Add(string.Format("             + ((PERutf3 + PERutf4)/2)xL4 "));
                list.Add(string.Format("             + ((PERutf4 + PERutf5)/2)xL5] / (L2+ L3+ L4+ L5)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("           = [(({0:f4} + {1:f4})/2)x{2:f4}", _PERutf1, _PERutf2, _L.F2));
                list.Add(string.Format("             + (({0:f4} + {1:f4})/2)x{2:f4}", _PERutf2, _PERutf3, _L.F3));
                list.Add(string.Format("             + (({0:f4} + {1:f4})/2)x{2:f4}", _PERutf3, _PERutf4, _L.F4));
                list.Add(string.Format("             + (({0:f4} + {1:f4})/2)x{2:f4}]/ ({3:f4}+ {4:f4}+ {5:f4}+ {2:f4})", _PERutf4, _PERutf5, _L.F5, _L.F2, _L.F3, _L.F4));
                list.Add(string.Format(""));
                list.Add(string.Format("           =  {0:f4} ", _PavPERutf));
                //list.Add(string.Format("=[((0.633+0.662)/2)x5.969  + ((0.662+0807)/2)x5.969  + ((0. 807+0. 735)/2)x5.969+ ((0. 735+0.670)/2)x5.969]  / (5.969 + 5.969  + 5.969  + 5.969 )"));
                //list.Add(string.Format("= (3.865 + 4.384 + 4.602 + 4.193) / 23.876"));
                //list.Add(string.Format("= 0.714"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.13 : Percentage of average force in cables with respect to Ultimate Tensile Force (UTF %)



                list.Add(string.Format("STEP 6.14 : Total Relaxation Loss (Tons) = Retot"));
                list.Add(string.Format("-------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));

                list.Add(string.Format("Relaxation of Prestressing Steel at 70% uts [Re1] = {0} N/Sq.mm Mpa (From Tab 2, (B) 12)", Re1));
                list.Add(string.Format("Nominal Area = A = {0} Sq.mm.            (From Tab 2, (B) 2)", NA));
                list.Add(string.Format("Total number of Cables at L/2 = {0:f3}   (From Step 4, TABLE 12,)", Cable_Nos_At_L2.SUM));
                list.Add(string.Format(""));
                //list.Add(string.Format("Retot =(+(1-(0.7-D44)/0.2)*3*Prestress!G22*Prestress!G12/10000*Prestress!K48*19)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Retot = ((1 - (0.7 - _PavPERutf) / 0.2) * 3 * Re1 * (NA / 10000) * (Cable_Nos_At_L2.SUM) * Ns);

                list.Add(string.Format("Retot = ((1-(0.7- PavPERutf)/0.2) x 3 x Re1 x (A/10000) x (Total number of Cables at L/2) x Ns)"));
                list.Add(string.Format("      = ((1 - (0.7 - {0:f4})/0.2) x 3 x {1:f4} x {2:f4} x {3:f4} x {4:f4}) /10000", _PavPERutf, Re1, NA, Cable_Nos_At_L2.SUM, Ns));
                list.Add(string.Format("      = {0:f4} Tons", _Retot));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                //Check
                double _Re4 = Math.Pow(0.004, 0.27) * 100 / 3;
                list.Add(string.Format("STEP 6.15 : Percentage of Relaxation Loss", _Re4));
                list.Add(string.Format("-----------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Percentage of Relaxation Loss in 4 hours = Re4 = (0.004^0.27) x 100 / 3 = {0:f3} %", _Re4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.16 : Stress due to Losses in Prestress on account of Elastic Shortening "));
                list.Add(string.Format("            and Immediate Relaxation"));
                list.Add(string.Format("--------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));




                double _P = -_Stop.F1;
                double _Psupport = Total_P.F1;
                list.Add(string.Format("At Support, Top Stress due to P = {0:f4},  Psupport = {1:f4}", _P, _Psupport));
                list.Add(string.Format(""));
                list.Add(string.Format("StopEsRe1 (At Support)"));
                list.Add(string.Format(""));

                double _StopEsRe1 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Psupport;

                list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Psupport"));
                list.Add(string.Format("= ({0:f3} + {1:f3} x ({2:f3}/100)) x ({3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Psupport));
                list.Add(string.Format("= {0:f3}", _StopEsRe1));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                _P = _Stop.F3;
                double _Pspan8 = Total_P.F3;
                list.Add(string.Format("At Span/8, Top Stress due to P = {0:f3},  Pspan8 = {1:f3} ", _P, _Pspan8));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _StopEsRe2 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Pspan8;

                list.Add(string.Format("StopEsRe2 (At  Span/8)"));
                list.Add(string.Format(""));
                list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Pspan8"));
                list.Add(string.Format("= ({0:f3} + {1:f3} x ({2:f3}/100)) x ({3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Pspan8));
                list.Add(string.Format("= {0:f3}", _StopEsRe2));
                list.Add(string.Format(""));

                //list.Add(string.Format("StopEsRe2 (At  Span/8)"));
                //list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / (100 x Pspan8)"));
                //list.Add(string.Format("= (100.56 + 360.175 x (7.506/100)) x  -83.54/ 3086.3     "));
                //list.Add(string.Format("= -3.454"));
                list.Add(string.Format(""));
                _P = _Stop.F4;
                double _Pspan4 = Total_P.F4;
                list.Add(string.Format("At Span/4, Top Stress due to P = {0:f4}, Pspan4 = {1:f4} ", _P, _Pspan4));
                list.Add(string.Format(""));

                double _StopEsRe3 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Pspan4;

                list.Add(string.Format("StopEsRe3 (At  Span/4)"));
                list.Add(string.Format(""));
                list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Pspan8"));
                list.Add(string.Format("= ({0:f3} + {1:f3} x ({2:f3}/100)) x ({3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Pspan4));
                list.Add(string.Format("= {0:f3}", _StopEsRe3));
                list.Add(string.Format(""));
                //list.Add(string.Format("StopEsRe3 (At  Span/4)"));
                //list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / (100 x Pspan4)"));
                //list.Add(string.Format("= (100.56 + 360.175 x (7.506/100)) x  -102.45/ 3737.6"));
                //list.Add(string.Format("= -3.498"));

                _P = _Stop.F5;
                double _Pspan38 = Total_P.F5;
                list.Add(string.Format("At Span3/8, Top Stress due to P = {0:f4}, Pspan4 = {1:f4} ", _P, _Pspan38));
                list.Add(string.Format(""));

                double _StopEsRe4 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Pspan38;

                list.Add(string.Format("StopEsRe3 (At  Span/4)"));
                list.Add(string.Format(""));
                list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Pspan8"));
                list.Add(string.Format("= ({0:f3} + {1:f3} x ({2:f3}/100)) x ({3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Pspan38));
                list.Add(string.Format("= {0:f3}", _StopEsRe4));
                list.Add(string.Format(""));

                _P = _Stop.F6;
                double _Pspan2 = Total_P.F6;
                list.Add(string.Format("At Span/2, Top Stress due to P = {0:f4}, Pspan4 = {1:f4} ", _P, _Pspan2));
                list.Add(string.Format(""));

                double _StopEsRe5 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Pspan2;

                list.Add(string.Format("StopEsRe3 (At  Span/4)"));
                list.Add(string.Format(""));
                list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Pspan8"));
                list.Add(string.Format("= ({0:f3} + {1:f3} x ({2:f3}/100)) x ({3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Pspan2));
                list.Add(string.Format("= {0:f3}", _StopEsRe5));
                list.Add(string.Format(""));


                //list.Add(string.Format(""));
                //list.Add(string.Format("At Span3/8, Top Stress due to P = -102.45,  Pspan4 = 3737.6        "));
                //list.Add(string.Format(""));
                //list.Add(string.Format("StopEsRe4 (At  Span3/8)"));
                //list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / (100 x Pspan4)"));
                //list.Add(string.Format("= (100.56 + 360.175 x (7.506/100)) x -261.33 / 4143.34"));
                //list.Add(string.Format("= -8.048"));
                //list.Add(string.Format("         "));
                //list.Add(string.Format("At Span/2, Top Stress due to P = -102.45,  Pspan4 = 3737.6        "));
                //list.Add(string.Format("StopEsRe5 (At  Span/2)"));
                //list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / (100 x Pspan4)"));
                //list.Add(string.Format("= (100.56 + 360.175 x (7.506/100)) x -465.375/ 4116.09"));
                //list.Add(string.Format("= -14.426"));
                list.Add(string.Format(""));
                list.Add(string.Format("The Calculated values of Top Stresses are : "));
                list.Add(string.Format("-------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("StopEsRe1 = {0:f4}", _StopEsRe1));
                list.Add(string.Format("StopEsRe2 = {0:f4}", _StopEsRe2));
                list.Add(string.Format("StopEsRe3 = {0:f4}", _StopEsRe3));
                list.Add(string.Format("StopEsRe4 = {0:f4}", _StopEsRe4));
                list.Add(string.Format("StopEsRe5 = {0:f4}", _StopEsRe5));

                //list.Add(string.Format("StopEsRe1 = {0:f4}    StopEsRe2=-3.454    StopEsRe3=-3.498    StopEsRe4=-8.048    StopEsRe5=-14.426"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.17: Stress due to Losses in Prestress on account of Elastic Shortening"));
                list.Add(string.Format("           and Immediate Relaxation"));
                list.Add(string.Format("-----------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                _P = _Sbottom.F1;

                list.Add(string.Format("At Support, Bottom  Stress due to P = {0:f4},  Psupport = {1:f4}", _P, _Psupport));
                list.Add(string.Format(""));

                double _SbottomEsRe1 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Psupport;

                list.Add(string.Format("SbottomEsRe1 (At Support)"));
                list.Add(string.Format("            = [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Psupport"));
                list.Add(string.Format("            = ({0:f3} + {1:f3} x ({2:f3}/100)) x {3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Psupport));
                list.Add(string.Format("            = {0:f3}", _SbottomEsRe1));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                _P = _Sbottom.F3;

                list.Add(string.Format("At Span/8, Bottom  Stress due to P = {0:f4},  Pspan8 = {1:f4}", _P, _Pspan8));
                list.Add(string.Format(""));

                double _SbottomEsRe2 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Pspan8;

                list.Add(string.Format("SbottomEsRe2 (At  Span/8)"));

                list.Add(string.Format("            = [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Pspan8"));
                list.Add(string.Format("            = ({0:f3} + {1:f3} x ({2:f3}/100)) x {3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Pspan8));
                list.Add(string.Format("            = {0:f3}", _SbottomEsRe2));
                list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("At Span/8, Bottom Stress due to P = 976.46,  Pspan8 = 3086.3        "));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("SbottomEsRe2 (At  Span/8)"));
                //list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / (100 x Pspan8)"));
                //list.Add(string.Format("= (100.56 + 360.175 x (7.506/100)) x  976.46/ 3086.3     "));
                //list.Add(string.Format("= 40.370"));
                list.Add(string.Format(""));


                _P = _Sbottom.F4;
                list.Add(string.Format("At Span/4, Bottom  Stress due to P = {0:f4},  Pspan4 = {1:f4}", _P, _Pspan4));
                list.Add(string.Format(""));

                double _SbottomEsRe3 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Pspan4;

                list.Add(string.Format("SbottomEsRe3 (At  Span/4)"));
                list.Add(string.Format("            = [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Psupport"));
                list.Add(string.Format("            = ({0:f3} + {1:f3} x ({2:f3}/100)) x {3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Pspan38));
                list.Add(string.Format("            = {0:f3}", _SbottomEsRe3));
                list.Add(string.Format(""));
                //list.Add(string.Format("At Span/4, Bottom Stress due to P = 2089.93,  Pspan4 = 3737.6        "));
                //list.Add(string.Format(""));
                //list.Add(string.Format("SbottomEsRe3 (At  Span/4)"));
                //list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / (100 x Pspan4)"));
                //list.Add(string.Format("= (100.56 + 360.175 x (7.506/100)) x  2089.93/ 3737.6"));
                //list.Add(string.Format("= 40.369"));

                _P = _Sbottom.F5;
                list.Add(string.Format("At Span3/8, Bottom  Stress due to P = {0:f4},  Pspan4 = {1:f4}", _P, _Pspan38));
                list.Add(string.Format(""));

                double _SbottomEsRe4 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Pspan38;

                list.Add(string.Format("SbottomEsRe3 (At  Span3/8)"));
                list.Add(string.Format("            = [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Pspan4"));
                list.Add(string.Format("            = ({0:f3} + {1:f3} x ({2:f3}/100)) x {3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Pspan38));
                list.Add(string.Format("            = {0:f3}", _SbottomEsRe4));
                list.Add(string.Format(""));

                //list.Add(string.Format(""));
                //list.Add(string.Format("At Span3/8, Bottom Stress due to P = 2547.89,  Pspan4 = 3737.6        "));
                //list.Add(string.Format(""));
                //list.Add(string.Format("SbottomEsRe4 (At  Span3/8)"));
                //list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / (100 x Pspan4)"));
                //list.Add(string.Format("= (100.56 + 360.175 x (7.506/100)) x 2547.89/ 4143.34"));
                //list.Add(string.Format("= 78.463"));
                list.Add(string.Format(""));


                _P = _Sbottom.F6;
                list.Add(string.Format("At Span/2, Bottom  Stress due to P = {0:f4},  Pspan2 = {1:f4}", _P, _Pspan2));
                list.Add(string.Format(""));

                double _SbottomEsRe5 = ((_Eloss + _Retot * (_Re4 / 100)) * _P) / _Pspan2;

                list.Add(string.Format("SbottomEsRe5 (At  Span/2)"));
                list.Add(string.Format("            = [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / Pspan2"));
                list.Add(string.Format("            = ({0:f3} + {1:f3} x ({2:f3}/100)) x {3:f3}) / {4:f3}", _Eloss, _Retot, _Re4, _P, _Pspan2));
                list.Add(string.Format("            = {0:f3}", _SbottomEsRe5));
                list.Add(string.Format(""));
                //list.Add(string.Format("At Span/2, Bottom Stress due to P = 2643.850,  Pspan4 = 3737.6        "));
                //list.Add(string.Format("SbottomEsRe5 (At  Span/2)"));
                //list.Add(string.Format("= [(Eloss + Retot x (Re4/100)) x Top Stress due to P] / (100 x Pspan4)"));
                //list.Add(string.Format("= (100.56 + 360.175 x (7.506/100)) x 2643.850/ 4116.09"));
                //list.Add(string.Format("= 81.957"));
                list.Add(string.Format(""));
                list.Add(string.Format("The Calculated values of Bottom Stresses are : "));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomEsRe1 = {0:f4}", _SbottomEsRe1));
                list.Add(string.Format("SbottomEsRe2 = {0:f4}", _SbottomEsRe2));
                list.Add(string.Format("SbottomEsRe3 = {0:f4}", _SbottomEsRe3));
                list.Add(string.Format("SbottomEsRe4 = {0:f4}", _SbottomEsRe4));
                list.Add(string.Format("SbottomEsRe5 = {0:f4}", _SbottomEsRe5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.18 : Stress at CG of Cables due to loss"));
                list.Add(string.Format("-----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Data : "));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("The Calculated values of Top Stresses are : "));
                list.Add(string.Format("------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("StopEsRe1 = {0:f4}, StopEsRe2 = {1:f4}, StopEsRe3 = {2:f4}, ", _StopEsRe1, _StopEsRe2, _StopEsRe3));
                list.Add(string.Format(""));
                list.Add(string.Format("StopEsRe4 = {0:f4}, StopEsRe5 = {1:f4}", _StopEsRe4, _StopEsRe5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("The Calculated values of Bottom Stresses are : "));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomEsRe1 = {0:f4}, SbottomEsRe2 = {1:f4}, SbottomEsRe3 = {2:f4}, ", _SbottomEsRe1, _SbottomEsRe2, _SbottomEsRe3));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomEsRe4 = {0:f4}, SbottomEsRe5 = {1:f4} ", _SbottomEsRe4, _SbottomEsRe5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Eccentricity of Cables from bottom are : "));
                list.Add(string.Format("---------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Ecc1 = {0:f4}, Ecc2 = {1:f4}, Ecc3 = {2:f4}, ", _Ecc1, _Ecc2, _Ecc3));
                list.Add(string.Format(""));
                list.Add(string.Format("Ecc4 = {0:f4}, Ecc5 = {1:f4}", _Ecc4, _Ecc5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Scgloss1 = _SbottomEsRe1 - ((_SbottomEsRe1 - _StopEsRe1) / D) * _Ecc1;
                list.Add(string.Format("Scgloss1 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                list.Add(string.Format("         = SbottomEsRe1 - ((SbottomEsRe1- StopEsRe1)/ D) x Ecc1"));
                list.Add(string.Format("         = {0:f4} - (({0:f4} - ({1:f4})) / {2:f4}) x {3:f4}", _SbottomEsRe1, _StopEsRe1, D, _Ecc1));
                list.Add(string.Format("         = {0:f4} Ton/Sq.m.", _Scgloss1));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Scgloss2 = _SbottomEsRe2 - ((_SbottomEsRe2 - _StopEsRe2) / D) * _Ecc2;
                list.Add(string.Format("Scgloss2 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                list.Add(string.Format("         = SbottomEsRe2 - ((SbottomEsRe2- StopEsRe2)/ D) x Ecc2"));
                list.Add(string.Format("         = {0:f4} - (({0:f4} - ({1:f4})) / {2:f4}) x {3:f4}", _SbottomEsRe2, _StopEsRe2, D, _Ecc2));
                list.Add(string.Format("         = {0:f4} Ton/Sq.m.", _Scgloss2));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Scgloss3 = _SbottomEsRe2 - ((_SbottomEsRe3 - _StopEsRe3) / D) * _Ecc3;
                list.Add(string.Format("Scgloss3 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                list.Add(string.Format("         = SbottomEsRe3 - ((SbottomEsRe3- StopEsRe3)/ D) x Ecc3"));
                list.Add(string.Format("         = {0:f4} - (({0:f4} - ({1:f4})) / {2:f4}) x {3:f4}", _SbottomEsRe3, _StopEsRe3, D, _Ecc3));
                list.Add(string.Format("         = {0:f4} Ton/Sq.m.", _Scgloss3));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Scgloss4 = _SbottomEsRe4 - ((_SbottomEsRe4 - _StopEsRe4) / D) * _Ecc4;
                list.Add(string.Format("Scgloss4 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                list.Add(string.Format("         = SbottomEsRe4 - ((SbottomEsRe4- StopEsRe4)/ D) x Ecc4"));
                list.Add(string.Format("         = {0:f4} - (({0:f4} - ({1:f4})) / {2:f4}) x {3:f4}", _SbottomEsRe4, _StopEsRe4, D, _Ecc4));
                list.Add(string.Format("         = {0:f4} Ton/Sq.m.", _Scgloss4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Scgloss5 = _SbottomEsRe5 - ((_SbottomEsRe5 - _StopEsRe5) / D) * _Ecc5;
                list.Add(string.Format("Scgloss5 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                list.Add(string.Format("         = SbottomEsRe5 - ((SbottomEsRe5- StopEsRe5)/ D) x Ecc5"));
                list.Add(string.Format("         = {0:f4} - (({0:f4} - ({1:f4})) / {2:f4}) x {3:f4}", _SbottomEsRe5, _StopEsRe5, D, _Ecc5));
                list.Add(string.Format("         = {0:f4} Ton/Sq.m.", _Scgloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("Scgloss2 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                //list.Add(string.Format("         =  SbottomEsRe2- ((SbottomEsRe2- StopEsRe2)/ (Depth of Box Girder = D)) x Ecc2"));
                //list.Add(string.Format("          =  40.370 - ((40.370 - (-3.454)) / 2.5) x 0.496 = 31.675  Ton/Sq.m."));
                //list.Add(string.Format(""));
                //list.Add(string.Format("Scgloss3 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                //list.Add(string.Format("         =  SbottomEsRe3- ((SbottomEsRe3- StopEsRe3)/ (Depth of Box Girder = D)) x Ecc3"));
                //list.Add(string.Format("          =  40.369- ((40.369- (-3.498)) / 2.5) x 0.428= 32.859  Ton/Sq.m."));
                //list.Add(string.Format(""));
                //list.Add(string.Format("Scgloss4 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                //list.Add(string.Format("         =  SbottomEsRe4- ((SbottomEsRe4- StopEsRe4)/ (Depth of Box Girder = D)) x Ecc4"));
                //list.Add(string.Format("          =  78.463 - ((78.463 - (-8.048)) / 2.5) x 0.257= 69.569  Ton/Sq.m."));
                //list.Add(string.Format(""));
                //list.Add(string.Format("Scgloss5 = Bottom Stress - ((Bottom Stress- Top Stress)/ (Depth of Box Girder = D)) x Ecc"));
                //list.Add(string.Format("         =  SbottomEsRe5- ((SbottomEsRe5- StopEsRe5)/ (Depth of Box Girder = D)) x Ecc5"));
                //list.Add(string.Format("          =  81.957- ((81.957- (-14.426)) / 2.5) x 0.173= 75.287  Ton/Sq.m."));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.19 : Average Stress at CG of Tendon after Immediate Loss"));
                list.Add(string.Format("---------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Savcgloss = (((_Scgloss1 + _Scgloss2) / 2) * _L.F2
                                        + ((_Scgloss2 + _Scgloss3) / 2) * _L.F3
                                        + ((_Scgloss3 + _Scgloss4) / 2) * _L.F4
                                        + ((_Scgloss4 + _Scgloss5) / 2) * _L.F5) / (_L.F2 + _L.F3 + _L.F4 + _L.F5);
                list.Add(string.Format("Savcgloss = ((Scgloss1 + Scgloss2)/2)xL2"));
                list.Add(string.Format("           + ((Scgloss2 + Scgloss3)/2)xL3"));
                list.Add(string.Format("           + ((Scgloss3 + Scgloss4)/2)xL4 "));
                list.Add(string.Format("           + ((Scgloss4 + Scgloss5)/2)xL5 / (L2+ L3+ L4+ L5) "));
                list.Add(string.Format(""));
                list.Add(string.Format("          = (({0:f4} + {1:f4})/2)x{2:f4}", _Scgloss1, _Scgloss2, _L.F2));
                list.Add(string.Format("           + (({0:f4} + {1:f4})/2)x{2:f4}", _Scgloss2, _Scgloss3, _L.F3));
                list.Add(string.Format("           + (({0:f4} + {1:f4})/2)x{2:f4}", _Scgloss3, _Scgloss4, _L.F4));
                list.Add(string.Format("           + (({0:f4} + {1:f4})/2)x{2:f4} / ({3:f4}+ {4:f4}+ {5:f4}+ {2:f4}) ", _Scgloss4, _Scgloss5, _L.F5, _L.F2, _L.F3, _L.F4));
                list.Add(string.Format(""));
                list.Add(string.Format("          = {0:f4} Ton/Sq.m.", _Savcgloss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("=[((20.155+31.675 )/2)x5.969  + ((31.675 +32.859 )/2)x5.969  + ((32.859 +69.569 )/2)x5.969+ ((69.569  +75.287)/2)x5.969]  / (5.969 + 5.969  + 5.969  + 5.969)"));
                //list.Add(string.Format("= (154.687+192.601+305.696+432.322) / 23.876"));
                //list.Add(string.Format("= 45.456  Ton/Sq.m."));
                list.Add(string.Format("STEP 6.20 : Stress at Transfer after Prestress"));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses :"));
                list.Add(string.Format("--------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress after Prestress  at Support, Span/8. Span/4, Span3/8, Span/2:  (Taken from STEP 6.6)"));
                list.Add(string.Format(""));
                _Stopps.RemoveAt(1);
                list.Add(string.Format("Stopps1 = {0:f3}, Stopps2 = {1:f3},  Stopps3 = {2:f3}", _Stopps.F1, _Stopps.F2, _Stopps.F3));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopps4 = {0:f3}, Stopps5 = {1:f3}", _Stopps.F4, _Stopps.F5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("The Calculated values of Top Stresses are : (Taken from STEP 6.16)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("StopEsRe1 = {0:f3}, StopEsRe2 = {1:f3}, StopEsRe3 = {2:f3}", _StopEsRe1, _StopEsRe2, _StopEsRe3));
                list.Add(string.Format(""));
                list.Add(string.Format("StopEsRe4 = {0:f3}, StopEsRe5 = {1:f3}", _StopEsRe4, _StopEsRe5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stress at Transfer after Prestress"));
                list.Add(string.Format("---------------------------------------"));
                list.Add(string.Format(""));
                double _Stopstress1 = _Stopps.F1 + _StopEsRe1;
                double _Stopstress2 = _Stopps.F2 + _StopEsRe2;
                double _Stopstress3 = _Stopps.F3 + _StopEsRe3;
                double _Stopstress4 = _Stopps.F4 + _StopEsRe4;
                double _Stopstress5 = _Stopps.F5 + _StopEsRe5;
                list.Add(string.Format("Stopstress1 = Stopps1 + StopEsRe1 = {0:f4} - {1:f4} = {2:f4}", _Stopps.F1, -_StopEsRe1, _Stopstress1));
                list.Add(string.Format("Stopstress2 = Stopps2 + StopEsRe2 = {0:f4} - {1:f4} = {2:f4}", _Stopps.F2, -_StopEsRe2, _Stopstress2));
                list.Add(string.Format("Stopstress3 = Stopps3 + StopEsRe3 = {0:f4} - {1:f4} = {2:f4}", _Stopps.F3, -_StopEsRe3, _Stopstress3));
                list.Add(string.Format("Stopstress4 = Stopps4 + StopEsRe4 = {0:f4} - {1:f4} = {2:f4}", _Stopps.F4, -_StopEsRe4, _Stopstress4));
                list.Add(string.Format("Stopstress5 = Stopps5 + StopEsRe5 = {0:f4} - {1:f4} = {2:f4}", _Stopps.F5, -_StopEsRe5, _Stopstress5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses :"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stress after Prestress  at Support, Span/8. Span/4, Span3/8, Span/2:  (Taken from STEP 6.6)"));

                _Sbottomps.RemoveAt(1);
                list.Add(string.Format("Sbottomps1 = {0:f3}, Sbottomps2 = {1:f3}, Sbottomps3= {2:f3}", _Sbottomps.F1, _Sbottomps.F2, _Sbottomps.F3));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomps4 = {0:f3}, Sbottomps5 = {1:f3}", _Sbottomps.F4, _Sbottomps.F5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("The Calculated values of Bottom Stresses are: (Taken from STEP 6.17)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomEsRe1 = {0:f4}, SbottomEsRe2 = {1:f4}, SbottomEsRe3 = {2:f4} ", _SbottomEsRe1, _SbottomEsRe2, _SbottomEsRe3));
                list.Add(string.Format("SbottomEsRe4 = {0:f4}, SbottomEsRe5 = {1:f4}", _SbottomEsRe4, _SbottomEsRe5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stress at Transfer after Prestress "));
                list.Add(string.Format("---------------------------------------"));
                list.Add(string.Format(""));

                double _Sbottomstress1 = _Sbottomps.F1 + _SbottomEsRe1;
                double _Sbottomstress2 = _Sbottomps.F2 + _SbottomEsRe2;
                double _Sbottomstress3 = _Sbottomps.F3 + _SbottomEsRe3;
                double _Sbottomstress4 = _Sbottomps.F4 + _SbottomEsRe4;
                double _Sbottomstress5 = _Sbottomps.F5 + _SbottomEsRe5;
                list.Add(string.Format("Sbottomstress1 = Sbottomps1 + SbottomEsRe1 = {0:f3} + {1:f3}  = {2:f3}", _Sbottomps.F1, _SbottomEsRe1, _Sbottomstress1));
                list.Add(string.Format("Sbottomstress2 = Sbottomps2 + SbottomEsRe2 = {0:f3} + {1:f3}  = {2:f3}", _Sbottomps.F2, _SbottomEsRe2, _Sbottomstress2));
                list.Add(string.Format("Sbottomstress3 = Sbottomps3 + SbottomEsRe3 = {0:f3} + {1:f3}  = {2:f3}", _Sbottomps.F3, _SbottomEsRe3, _Sbottomstress3));
                list.Add(string.Format("Sbottomstress4 = Sbottomps4 + SbottomEsRe4 = {0:f3} + {1:f3}  = {2:f3}", _Sbottomps.F4, _SbottomEsRe4, _Sbottomstress4));
                list.Add(string.Format("Sbottomstress5 = Sbottomps5 + SbottomEsRe5 = {0:f3} + {1:f3}  = {2:f3}", _Sbottomps.F5, _SbottomEsRe5, _Sbottomstress5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.21: CHECK on Stress at Transfer after Prestress"));
                list.Add(string.Format("-------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Temporary compressive stress after {0} days = fc_temp14 = {1:f4} Mpa (Taken from STEP 6)", fsp_day, _fc_temp14));
                list.Add(string.Format("Temporary tensile stress after {0} days = ft_temp14 = {1:f4} Mpa (Taken from STEP 6)", fsp_day, _ft_temp14));
                list.Add(string.Format(""));

                #region Check at Support :
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Support :"));
                list.Add(string.Format("------------------"));


                #region TOP

                list.Add(string.Format(""));
                if (Math.Abs(_Stopstress1 / 100) > Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress1/100) >  ft_temp14 )  NOT OK,"));
                    list.Add(string.Format("    Stopstress1/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, NOT OK,", _Stopstress1, Math.Abs(_Stopstress1 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_Stopstress1 / 100) < Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress1/100) <  ft_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress1/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, OK,", _Stopstress1, Math.Abs(_Stopstress1 / 100), Math.Abs(_ft_temp14)));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (Math.Abs(_Stopstress1 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress1/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress1/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Stopstress1, Math.Abs(_Stopstress1 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_Stopstress1 / 100) > Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress1/100) >  _fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Stopstress1/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Stopstress1, Math.Abs(_Stopstress1 / 100), Math.Abs(_fc_temp14)));
                }

                #endregion TOP

                #region BOTTOM

                list.Add(string.Format(""));
                if (Math.Abs(_Sbottomstress1 / 100) > Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress1/100) >  ft_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress1/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, OK,", _Sbottomstress1, Math.Abs(_Sbottomstress1 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_Sbottomstress1 / 100) < Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress1/100) <  ft_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress1/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, NOT OK,", _Sbottomstress1, Math.Abs(_Sbottomstress1 / 100), Math.Abs(_ft_temp14)));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (Math.Abs(_Sbottomstress1 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress1/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress1/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Sbottomstress1, Math.Abs(_Sbottomstress1 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_Sbottomstress1 / 100) > Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress1/100) >  _fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress1/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Sbottomstress1, Math.Abs(_Sbottomstress1 / 100), Math.Abs(_fc_temp14)));
                }

                #endregion BOTTOM

                #endregion Check at Support :



                //list.Add(string.Format(""));
                //list.Add(string.Format("If((Stopstress1/100) >  - ft_temp14 ) OK, Stopstress1/100 = 115.86/100 = 1.1586 and  -ft_temp14= -1.74, OK,"));
                //list.Add(string.Format("If((Stopstress1/100) <  fc_temp14 ) OK, Stopstress1/100 = 115.86/100 = 1.1586 and  fc_temp14= 17.40, OK,"));
                //list.Add(string.Format("If((Sbottomstress1/100) > - ft_temp14 ) OK, Sbottomstress1/100 = 779.39/100 = 7.7939 and  -ft_temp14= -1.74, OK"));
                //list.Add(string.Format("If((Sbottomstress1/100) <  fc_temp14 ) OK, Sbottomstress1/100 = 779.39/100 = 7.7939 and  fc_temp14= 17.40, OK"));
                list.Add(string.Format(""));


                #region Check at Span/8 :
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/8 :"));
                list.Add(string.Format("-----------------"));

                #region TOP

                list.Add(string.Format(""));
                if (Math.Abs(_Stopstress2 / 100) > Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress2/100) >  ft_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress2/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, OK,", _Stopstress2, Math.Abs(_Stopstress2 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_Stopstress2 / 100) < Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress2/100) <  ft_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Stopstress2/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, NOT OK,", _Stopstress2, Math.Abs(_Stopstress2 / 100), Math.Abs(_ft_temp14)));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (Math.Abs(_Stopstress2 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress2/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress2/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Stopstress2, Math.Abs(_Stopstress2 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_Stopstress2 / 100) > Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress2/100) >  _fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Stopstress2/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Stopstress2, Math.Abs(_Stopstress2 / 100), Math.Abs(_fc_temp14)));
                }

                #endregion TOP

                #region BOTTOM

                list.Add(string.Format(""));
                if (Math.Abs(_Sbottomstress2 / 100) > Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress2/100) >  ft_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress2/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, OK,", _Sbottomstress2, Math.Abs(_Sbottomstress2 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_Sbottomstress2 / 100) < Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress2/100) <  ft_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress2/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, NOT OK,", _Sbottomstress2, Math.Abs(_Sbottomstress2 / 100), Math.Abs(_ft_temp14)));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (Math.Abs(_Sbottomstress2 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress2/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress2/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Sbottomstress2, Math.Abs(_Sbottomstress2 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_Sbottomstress2 / 100) > Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress2/100) >  fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress2/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Sbottomstress2, Math.Abs(_Sbottomstress2 / 100), Math.Abs(_fc_temp14)));
                }

                #endregion BOTTOM

                #endregion Check at Span/8

                //list.Add(string.Format("If((Stopstress2/100) > - ft_temp14 ) OK, Stopstress2/100 = 261.126/100 = 2.61 and  -ft_temp14= -1.74, OK,"));
                //list.Add(string.Format("If((Stopstress2/100) <  fc_temp14 ) OK, Stopstress2/100 = 261.126/100 = 2.61 and  fc_temp14= 17.40, OK,"));
                //list.Add(string.Format("If((Sbottomstress2/100) > - ft_temp14 ) OK, Sbottomstress2/100 = 1016.83/100 = 10.17 and  -ft_temp14= -1.74, OK"));
                //list.Add(string.Format("If((Sbottomstress2/100) <  fc_temp14 ) OK, Sbottomstress2/100 = 1016.83/100 = 10.17 and  fc_temp14= 17.40, OK"));
                list.Add(string.Format(""));

                #region Check at Span/4 :
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/4 :"));
                list.Add(string.Format("-----------------"));

                #region TOP

                list.Add(string.Format(""));
                if (Math.Abs(_Stopstress3 / 100) > Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress3/100) >  ft_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress3/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, OK,", _Stopstress3, Math.Abs(_Stopstress3 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_Stopstress3 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress3/100) <  ft_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Stopstress3/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, NOT OK,", _Stopstress3, Math.Abs(_Stopstress3 / 100), Math.Abs(_ft_temp14)));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (Math.Abs(_Stopstress3 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress3/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress3/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Stopstress3, Math.Abs(_Stopstress3 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_Stopstress3 / 100) > Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress3/100) >  _fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Stopstress3/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Stopstress3, Math.Abs(_Stopstress3 / 100), Math.Abs(_fc_temp14)));
                }

                #endregion TOP

                #region BOTTOM

                list.Add(string.Format(""));
                if (Math.Abs(_Sbottomstress3 / 100) > Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress3/100) >  ft_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress3/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, OK,", _Sbottomstress3, Math.Abs(_Sbottomstress3 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_Sbottomstress3 / 100) < Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress3/100) <  ft_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress3/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, NOT OK,", _Sbottomstress3, Math.Abs(_Sbottomstress3 / 100), Math.Abs(_ft_temp14)));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (Math.Abs(_Sbottomstress3 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress3/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress3/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Sbottomstress3, Math.Abs(_Sbottomstress3 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_Sbottomstress3 / 100) > Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress3/100) >  _fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress3/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Sbottomstress3, Math.Abs(_Sbottomstress3 / 100), Math.Abs(_fc_temp14)));
                }

                #endregion BOTTOM

                #endregion Check at Span/4


                //list.Add(string.Format("If((Stopstress3/100) > - ft_temp14 ) OK, Stopstress3/100 = 491.552/100 = 4.92 and  -ft_temp14= -1.74, OK,"));
                //list.Add(string.Format("If((Stopstress3/100) <  fc_temp14 ) OK, Stopstress3/100 = 491.552/100 = 4.92 and  fc_temp14= 17.40, OK,"));
                //list.Add(string.Format("If((Sbottomstress3/100) > - ft_temp14 ) OK, Sbottomstress3/100 = 1195.90/100 = 11.96 and  -ft_temp14= -1.74, OK"));
                //list.Add(string.Format("If((Sbottomstress3/100) <  fc_temp14 ) OK, Sbottomstress3/100 = 1195.90/100 = 11.96 and  fc_temp14= 17.40, OK"));
                list.Add(string.Format(""));

                //list.Add(string.Format("Check at Span3/8:"));

                #region Check at Span 3/8 :
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span3/8 :"));
                list.Add(string.Format("-----------------"));

                #region TOP

                list.Add(string.Format(""));
                if (Math.Abs(_Stopstress4 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress4/100) >  ft_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress4/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, OK,", _Stopstress4, Math.Abs(_Stopstress4 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_Stopstress4 / 100) < Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress4/100) <  ft_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Stopstress4/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, NOT OK,", _Stopstress4, Math.Abs(_Stopstress4 / 100), Math.Abs(_ft_temp14)));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (Math.Abs(_Stopstress4 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress4/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress4/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Stopstress4, Math.Abs(_Stopstress4 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_Stopstress4 / 100) > Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress4/100) >  fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Stopstress4/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Stopstress4, Math.Abs(_Stopstress4 / 100), Math.Abs(_fc_temp14)));
                }

                #endregion TOP

                #region BOTTOM

                list.Add(string.Format(""));
                if (Math.Abs(_Sbottomstress4 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress4/100) >  ft_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress4/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, OK,", _Sbottomstress4, Math.Abs(_Sbottomstress4 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_Sbottomstress4 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress4/100) <  ft_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress4/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, NOT OK,", _Sbottomstress4, Math.Abs(_Sbottomstress4 / 100), Math.Abs(_ft_temp14)));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (Math.Abs(_Sbottomstress4 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress4/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress4/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Sbottomstress4, Math.Abs(_Sbottomstress4 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_Sbottomstress4 / 100) > Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress4/100) >  _fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress4/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Sbottomstress4, Math.Abs(_Sbottomstress4 / 100), Math.Abs(_fc_temp14)));
                }

                #endregion BOTTOM

                #endregion Check at Span3/8

                //list.Add(string.Format("If((Stopstress4/100) > - ft_temp14 ) OK, Stopstress4/100 = 473.688/100 = 4.74 and  -ft_temp14= -1.74, OK,"));
                //list.Add(string.Format("If((Stopstress4/100) <  fc_temp14 ) OK, Stopstress4/100 = 473.688/100 = 4.74 and  fc_temp14= 17.40, OK,"));
                //list.Add(string.Format("If((Sbottomstress4/100) > - ft_temp14 ) OK, Sbottomstress4/100 = 1464.25/100 = 14.64 and  -ft_temp14= -1.74, OK"));
                //list.Add(string.Format("If((Sbottomstress4/100) <  fc_temp14 ) OK, Sbottomstress4/100 = 1464.25/100 = 14.64 and  fc_temp14= 17.40, OK"));
                list.Add(string.Format(""));
                #region Check at Span/2 :
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/2 :"));
                list.Add(string.Format("-----------------"));

                #region TOP

                list.Add(string.Format(""));
                if (Math.Abs(_Stopstress5 / 100) > Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress5/100) >  ft_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress5/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, OK,", _Stopstress5, Math.Abs(_Stopstress5 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_Stopstress5 / 100) < Math.Abs(-_ft_temp14))
                {
                    list.Add(string.Format("If((Stopstress5/100) <  ft_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Stopstress5/100 = {0:f4}/100 = {1:f4} and  ft_temp14= {2:f4}, NOT OK,", _Stopstress5, Math.Abs(_Stopstress5 / 100), Math.Abs(_ft_temp14)));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if ((_Stopstress5 / 100) < (_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress5/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Stopstress5/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Stopstress5, (_Stopstress5 / 100), _fc_temp14));
                }
                else if ((_Stopstress5 / 100) > (_fc_temp14))
                {
                    list.Add(string.Format("If((Stopstress5/100) >  _fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Stopstress5/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Stopstress5, (_Stopstress5 / 100), _fc_temp14));
                }

                #endregion TOP

                #region BOTTOM

                list.Add(string.Format(""));
                if ((_Sbottomstress5 / 100) > (-_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress5/100) >  - ft_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress5/100 = {0:f4}/100 = {1:f4} and  -ft_temp14= {2:f4}, OK,", _Sbottomstress5, (_Sbottomstress5 / 100), -_ft_temp14));
                }
                else if ((_Sbottomstress5 / 100) < (-_ft_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress5/100) <  - ft_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress5/100 = {0:f4}/100 = {1:f4} and  -ft_temp14= {2:f4}, NOT OK,", _Sbottomstress5, (_Sbottomstress5 / 100), -_ft_temp14));
                }

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if ((_Sbottomstress5 / 100) < (_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress5/100) <  fc_temp14 ) OK,"));
                    list.Add(string.Format("    Sbottomstress5/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, OK,", _Sbottomstress5, (_Sbottomstress5 / 100), _fc_temp14));
                }
                else if ((_Sbottomstress5 / 100) > (_fc_temp14))
                {
                    list.Add(string.Format("If((Sbottomstress5/100) >  _fc_temp14 ) NOT OK,"));
                    list.Add(string.Format("    Sbottomstress5/100 = {0:f4}/100 = {1:f4} and  fc_temp14 = {2:f4}, NOT OK,", _Sbottomstress5, (_Sbottomstress5 / 100), _fc_temp14));
                }

                #endregion BOTTOM

                #endregion Check at Span3/8

                //list.Add(string.Format("If((Stopstress5/100) > - ft_temp14 ) OK, Stopstress5/100 = 311.649/100 = 3.12 and  -ft_temp14= -1.74, OK,"));
                //list.Add(string.Format("If((Stopstress5/100) <  fc_temp14 ) OK, Stopstress5/100 = 311.649/100 = 3.12 and  fc_temp14= 17.40, OK,"));
                //list.Add(string.Format("If((Sbottomstress5/100) > - ft_temp14 ) OK, Sbottomstress5/100 = 1488.04/100 = 14.88 and  -ft_temp14= -1.74, OK"));
                //list.Add(string.Format("If((Sbottomstress5/100) <  fc_temp14 ) OK, Sbottomstress5/100 = 1488.04/100 = 14.88 and  fc_temp14= 17.40, OK"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.22 : Average Stress at CG of Tendon after Immediate Loss"));
                list.Add(string.Format("----------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Average Stress at CG of Tendon = Savcg = {0:f3} Ton / Sq.m. (From STEP 6.7)", _Savcg));
                list.Add(string.Format(""));
                list.Add(string.Format("Average Stress at CG of Tendon after Immediate Loss (From STEP 6.19)"));
                list.Add(string.Format(""));
                _Savcgloss = -_Savcgloss;
                list.Add(string.Format("Savcgloss = {0:f3}Ton/Sq.m.", _Savcgloss));
                list.Add(string.Format(""));

                list.Add(string.Format("Average Stress at CG of Tendon after Immediate Loss = Savcgloss"));
                list.Add(string.Format(""));
                list.Add(string.Format("Savcgloss  = Savcg + Savcgloss = {0:f3} + ({1:f3})  = {2:f3} Ton/Sq.m.", _Savcg, _Savcgloss, (_Savcgloss = _Savcg + (_Savcgloss))));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.23: Losses in Stage 1 Cables, {0} to {1} days:", fsp_day, cwccb_day));
                list.Add(string.Format("---------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Data:"));
                list.Add(string.Format("First Stage Prestress, Number of days after casting = {0} days, (From Input Tab 2, A 2)", fsp_day));
                list.Add(string.Format("Completion stage at Number of days after casting = {0}  days, (From Input Tab 2, A 3)", cwccb_day));
                list.Add(string.Format("Percentage of Relaxation Loss in 4 hours = Re4 = {0:f3} % (From STEP 6.15)", _Re4));
                list.Add(string.Format(""));
                list.Add(string.Format("Percentage of Relaxation Loss in {0} to {1} days = Reperloss", fsp_day, cwccb_day));
                list.Add(string.Format(""));
                double _Reperloss = ((Math.Pow((cwccb_day * 0.024), 0.27)) * 100.0 / 3.0) - _Re4;
                list.Add(string.Format("        Reperloss =((({0} x 0.024)^0.27) x 100 /3) - {1:f3} = {2:f3}", cwccb_day, _Re4, _Reperloss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                //Checked

                list.Add(string.Format("Residual Shrinkage Strain at {0} days = {1}", fsp_day, rss_14));
                list.Add(string.Format("Residual Shrinkage Strain at {0} days = {1}", cwccb_day, rss_56));
                list.Add(string.Format("Young's Modulus of Elasticity = Eps = {0} GPa", Eps));
                list.Add(string.Format("Nominal area = A = {0} Sq.mm.", NA));
                list.Add(string.Format("Total Numbers of Cables at Midspan = {0:f3}", Cable_Nos_At_L2.SUM));
                list.Add(string.Format("Number of Strands = Ns = {0}", Ns));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Shrinkage Loss in {0} to {1} days = Shrinkloss{0}{1}", fsp_day, cwccb_day));
                list.Add(string.Format(""));

                double _Shrinkloss1456 = (rss_14 - rss_56) * Eps * 1000 * NA / 10000 * Cable_Nos_At_L2.SUM * Ns;
                list.Add(string.Format("   =( Residual Shrinkage Strain at 14 days - 56 days)xEpsx1000xA /10000xTotal Nos of Cables at MidspanxNs"));
                list.Add(string.Format("   = ({0} - {1}) x {2} x 1000 x ({3} / 10000) x {4:f4} x {5}", rss_14, rss_56, Eps, NA, Cable_Nos_At_L2.SUM, Ns));
                list.Add(string.Format("   = {0:f4}", _Shrinkloss1456));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                //Check 
                double _creep_strain14 = 0.00051 - (0.00051 - 0.00044) / (90 - 80) * (87 - 80);
                list.Add(string.Format("Creep Strain at {0} day / 10 Mpa = 0.00051-(0.00051-0.00044)/(90-80)*(87-80) = {1}", fsp_day, _creep_strain14));
                list.Add(string.Format(""));
                double _creep_strain56 = 0.00040;
                list.Add(string.Format("Creep Strain at 56 day / 10 Mpa = 0.00040 "));
                list.Add(string.Format(""));


                double _Creeploss1456 = (_Savcgloss / 1000) * (_creep_strain14 - _creep_strain56) * Eps * 1000 * (NA / 10000) * Cable_Nos_At_L2.SUM * Ns;
                list.Add(string.Format("Losses due to Creep (14-56 days) = Creeploss1456 "));
                //list.Add(string.Format("=+((D56)/1000*(D62-D63)*Prestress!G17*1000*Prestress!G12*Prestress!K48*19/10000)"));
                list.Add(string.Format(""));


                list.Add(string.Format("  =(Savcgloss /1000) x (0.00046 - 0.00040) x Eps x 1000 x (A/10000) x Total Nos of Cables at MidspanxNs"));
                list.Add(string.Format("  = ({0:f4} /1000) x ({1:f6} - {2:f6}) x {3:f4} x 1000 x ({4:f4}/10000) x {5:f4} x {6:f4}", _Savcgloss, _creep_strain14, _creep_strain56, Eps, NA, Cable_Nos_At_L2.SUM, Ns));
                list.Add(string.Format("  = {0:f4} ", _Creeploss1456));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                #endregion STEP 6.23

                #region STEP 6.24 : Total Loss (Shrinkage+Creep+Relaxation)
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.24 : Total Loss (Shrinkage+Creep+Relaxation)"));
                list.Add(string.Format("----------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Shrinkage Loss in {0} to {1} days = {2:f4} (From STEP 6.23)", fsp_day, cwccb_day, _Shrinkloss1456));
                list.Add(string.Format("Losses due to Creep {0} to {1} days = {2:f4} (From STEP 6.23)", fsp_day, cwccb_day, _Creeploss1456));
                list.Add(string.Format(""));
                list.Add(string.Format("Percentage of Relaxation Loss in {0} to {1} days = Reperloss = {2:f4}  (From STEP 6.23)", fsp_day, cwccb_day, _Reperloss));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Relaxation Loss in 4 hours = Retot = {0:f4} Tons  (From STEP 6.14)", _Retot));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Loss (Shrinkage+Creep+Relaxation) = Totalloss"));
                list.Add(string.Format(""));
                list.Add(string.Format("Totalloss = ( Shrinkage Loss in 14 to 56 days)"));
                list.Add(string.Format("           + (Losses due to Creep 14-56 days)"));
                list.Add(string.Format("           + (Percentage of Relaxation Loss in 14 to 56 days)"));
                list.Add(string.Format("           x (Total Relaxation Loss)/100"));
                double _Totalloss = _Shrinkloss1456 + _Creeploss1456 + (_Reperloss * _Retot / 100);
                list.Add(string.Format(""));
                list.Add(string.Format("          = {0:f4} + {1:f4} + ({2:f4} x {3:f4}/100)", _Shrinkloss1456, _Creeploss1456, _Reperloss, _Retot));

                list.Add(string.Format("          = {0:f4}", _Totalloss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.24 : Total Loss (Shrinkage+Creep+Relaxation)

                #region STEP 6.25: Top stress, Losses due to Creep + Shrinkage + Relaxation
                list.Add(string.Format("STEP 6.25 : Top stress, Losses due to Creep + Shrinkage + Relaxation"));
                list.Add(string.Format("---------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Loss (Shrinkage+Creep+Relaxation) = {0:f4} (From STEP 6.24)", _Totalloss));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                list.Add(string.Format("At Support, Span/8. Span/4, Span3/8, Span/2: (From  STEP 6.6)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Prestressing Force = P1 = {0:f4},  P2= {1:f4},  P3 = {2:f4},  P4 = {3:f4},  P5 = {4:f4}", _P1, _P2, _P3, _P4, _P5));
                list.Add(string.Format(""));

                _Stop.RemoveAt(1);
                list.Add(string.Format("Top Stress due to P = Stop1 = {0:f4},  Stop2= {1:f4},  Stop3= {2:f4}", -_Stop.F1, _Stop.F2, _Stop.F3));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stress due to P = Stop4 = {0:f4},  Stop5= {1:f4}", -_Stop.F4, _Stop.F5));
                list.Add(string.Format(""));



                list.Add(string.Format("Top stress at support = Stoptotloss1"));
                list.Add(string.Format(""));

                double _Stoptotloss1 = (_Totalloss * -_Stop.F1) / _P1;
                list.Add(string.Format("Stoptotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Stop1 / P1"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Stop.F1, _P1));
                list.Add(string.Format("             = {0:f4}", _Stoptotloss1));
                list.Add(string.Format(""));






                list.Add(string.Format("Top stress at span/8 = Stoptotloss2"));
                list.Add(string.Format(""));

                double _Stoptotloss2 = (_Totalloss * _Stop.F2) / _P2;
                list.Add(string.Format("Stoptotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Stop2 / P2"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Stop.F2, _P2));
                list.Add(string.Format("             = {0:f4}", _Stoptotloss2));
                list.Add(string.Format(""));

                //list.Add(string.Format("Top stress at span/8="));
                //list.Add(string.Format(""));
                //list.Add(string.Format(" Stoptotloss2 = Total Loss (Shrinkage+Creep+Relaxation) x Stop2 / P2 = 177.267 x -83.54 / 3086.3 = -4.80"));
                //list.Add(string.Format(""));



                list.Add(string.Format("Top stress at span/4 = Stoptotloss3"));
                list.Add(string.Format(""));

                double _Stoptotloss3 = (_Totalloss * _Stop.F3) / _P3;
                list.Add(string.Format("Stoptotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Stop3 / P3"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Stop.F3, _P3));
                list.Add(string.Format("             = {0:f4}", _Stoptotloss3));
                list.Add(string.Format(""));

                //list.Add(string.Format("Top stress at span/4="));
                //list.Add(string.Format(" Stoptotloss3 = Total Loss (Shrinkage+Creep+Relaxation) x Stop3 / P3 = 177.267 x -102.45 / 3737.6 = -4.86"));
                list.Add(string.Format(""));

                list.Add(string.Format("Top stress at span3/8 = Stoptotloss4"));
                list.Add(string.Format(""));

                double _Stoptotloss4 = (_Totalloss * _Stop.F4) / _P4;
                list.Add(string.Format("Stoptotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Stop4 / P4"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Stop.F4, _P4));
                list.Add(string.Format("             = {0:f4}", _Stoptotloss4));
                list.Add(string.Format(""));

                //list.Add(string.Format("Top stress at span3/8="));
                //list.Add(string.Format(" Stoptotloss4 = Total Loss (Shrinkage+Creep+Relaxation) x Stop4 / P4 = 177.267 x -261.33/ 4143.34 = -11.18"));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress at span/2 = Stoptotloss5"));
                list.Add(string.Format(""));

                double _Stoptotloss5 = (_Totalloss * _Stop.F5) / _P5;
                list.Add(string.Format("Stoptotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Stop5 / P5"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Stop.F5, _P5));
                list.Add(string.Format("             = {0:f4}", _Stoptotloss5));
                list.Add(string.Format(""));

                //list.Add(string.Format("Top stress at span/2="));
                //list.Add(string.Format(" Stoptotloss5 = Total Loss (Shrinkage+Creep+Relaxation) x Stop5 / P5 = 177.267 x -465.375/ 4116.09 = -20.04"));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress, Losses due to Creep + Shrinkage + Relaxation (From STEP 6.25)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stoptotloss1 = {0:f4}, Stoptotloss2 = {1:f4}, Stoptotloss3 = {2:f4}, ", _Stoptotloss1, _Stoptotloss2, _Stoptotloss3));
                list.Add(string.Format(""));
                list.Add(string.Format("Stoptotloss4 = {0:f4}, Stoptotloss5 = {1:f4}", _Stoptotloss4, _Stoptotloss5));
                //list.Add(string.Format("Stoptotloss1 = -7.268, Stoptotloss2 =- 4.80, Stoptotloss3 = -4.86, Stoptotloss4 = -11.18, Stoptotloss5 = -20.04"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.25: Top stress, Losses due to Creep + Shrinkage + Relaxation

                #region STEP 6.26: Bottom stress, Losses due to Creep + Shrinkage + Relaxation
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.26: Bottom stress, Losses due to Creep + Shrinkage + Relaxation"));
                list.Add(string.Format("------------------------------------------------------------------------"));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Loss (Shrinkage+Creep+Relaxation) = {0:f4} (From STEP 6.24)", _Totalloss));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                list.Add(string.Format("At Support, Span/8. Span/4, Span3/8, Span/2: (From  STEP 6.6)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Prestressing Force = P1 = {0:f4},  P2= {1:f4},  P3 = {2:f4},  P4 = {3:f4},  P5 = {4:f4}", _P1, _P2, _P3, _P4, _P5));
                list.Add(string.Format(""));

                _Sbottom.RemoveAt(1);
                list.Add(string.Format("Bottom Stress due to P = Sbottom1 = {0:f4},  Sbottom2= {1:f4},  Sbottom3= {2:f4}", -_Sbottom.F1, _Sbottom.F2, _Sbottom.F3));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stress due to P = Sbottom4 = {0:f4},  Sbottom5= {1:f4}", -_Sbottom.F4, _Sbottom.F5));
                list.Add(string.Format(""));



                list.Add(string.Format("Bottom stress at support = Sbottomtotloss1"));
                list.Add(string.Format(""));

                double _Sbottomtotloss1 = (_Totalloss * -_Sbottom.F1) / _P1;
                list.Add(string.Format("Sbottomtotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Sbottom1 / P1"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Sbottom.F1, _P1));
                list.Add(string.Format("             = {0:f4}", _Sbottomtotloss1));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom stress at span/8 = Sbottomtotloss2"));
                list.Add(string.Format(""));

                double _Sbottomtotloss2 = (_Totalloss * -_Sbottom.F2) / _P2;
                list.Add(string.Format("Sbottomtotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Sbottom2 / P2"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Sbottom.F2, _P2));
                list.Add(string.Format("             = {0:f4}", _Sbottomtotloss2));
                list.Add(string.Format(""));

                //list.Add(string.Format("bottom stress at span/8="));
                //list.Add(string.Format(""));
                //list.Add(string.Format(" Sbottomtotloss2 = Total Loss (Shrinkage+Creep+Relaxation) x Sbottom2 / P2 = 177.267 x -83.54 / 3086.3 = -4.80"));
                //list.Add(string.Format(""));



                list.Add(string.Format("Bottom stress at span/4 = Sbottomtotloss3"));
                list.Add(string.Format(""));

                double _Sbottomtotloss3 = (_Totalloss * -_Sbottom.F3) / _P3;
                list.Add(string.Format("Sbottomtotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Sbottom3 / P3"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Sbottom.F3, _P3));
                list.Add(string.Format("             = {0:f4}", _Sbottomtotloss3));
                list.Add(string.Format(""));

                //list.Add(string.Format("bottom stress at span/4="));
                //list.Add(string.Format(" Sbottomtotloss3 = Total Loss (Shrinkage+Creep+Relaxation) x Sbottom3 / P3 = 177.267 x -102.45 / 3737.6 = -4.86"));
                list.Add(string.Format(""));

                list.Add(string.Format("Bottom stress at span3/8 = Sbottomtotloss4"));
                list.Add(string.Format(""));

                double _Sbottomtotloss4 = (_Totalloss * -_Sbottom.F4) / _P4;
                list.Add(string.Format("Sbottomtotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Sbottom4 / P4"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Sbottom.F4, _P4));
                list.Add(string.Format("             = {0:f4}", _Sbottomtotloss4));
                list.Add(string.Format(""));

                //list.Add(string.Format("bottom stress at span3/8="));
                //list.Add(string.Format(" Sbottomtotloss4 = Total Loss (Shrinkage+Creep+Relaxation) x Sbottom4 / P4 = 177.267 x -261.33/ 4143.34 = -11.18"));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom stress at span/2 = Sbottomtotloss5"));
                list.Add(string.Format(""));

                double _Sbottomtotloss5 = (_Totalloss * -_Sbottom.F5) / _P5;
                list.Add(string.Format("Sbottomtotloss1 = Total Loss (Shrinkage+Creep+Relaxation) x Sbottom5 / P5"));
                list.Add(string.Format("             = {0:f4} x {1:f4} / {2:f4}", _Totalloss, _Sbottom.F5, _P5));
                list.Add(string.Format("             = {0:f4}", _Sbottomtotloss5));
                list.Add(string.Format(""));

                //list.Add(string.Format("bottom stress at span/2="));
                //list.Add(string.Format(" Sbottomtotloss5 = Total Loss (Shrinkage+Creep+Relaxation) x Sbottom5 / P5 = 177.267 x -465.375/ 4116.09 = -20.04"));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom stress, Losses due to Creep + Shrinkage + Relaxation (From STEP 6.25)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomtotloss1 = {0:f4}, Sbottomtotloss2 = {1:f4}, Sbottomtotloss3 = {2:f4}, ", _Sbottomtotloss1, _Sbottomtotloss2, _Sbottomtotloss3));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomtotloss4 = {0:f4}, Sbottomtotloss5 = {1:f4}", _Sbottomtotloss4, _Sbottomtotloss5));
                //list.Add(string.Format("Sbottomtotloss1 = -7.268, Sbottomtotloss2 =- 4.80, Sbottomtotloss3 = -4.86, Sbottomtotloss4 = -11.18, Sbottomtotloss5 = -20.04"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                #endregion STEP 6.25: Top stress, Losses due to Creep + Shrinkage + Relaxation

                #region STEP 6.27 : Stress at C.G. of Cables due to loss :



                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.27 : Stress at C.G. of Cables due to loss :"));
                list.Add(string.Format("--------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress, Losses due to Creep + Shrinkage + Relaxation (From STEP 6.25)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stoptotloss1 = {0:f4}, Stoptotloss2 = {1:f4}, Stoptotloss3 = {2:f4}, Stoptotloss4 = {3:f4}, Stoptotloss5 = {4:f4}", _Stoptotloss1, _Stoptotloss2, _Stoptotloss3, _Stoptotloss4, _Stoptotloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom  stress, Losses due to Creep + Shrinkage + Relaxation (From STEP 6.26)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomtotloss1 = {0:f4}, Sbottomtotloss2 = {1:f4}, Sbottomtotloss3 = {2:f4}, Sbottomtotloss4 = {3:f4}, Sbottomtotloss5 = {4:f4}", _Sbottomtotloss1, _Sbottomtotloss2, _Sbottomtotloss3, _Sbottomtotloss4, _Sbottomtotloss5));
                list.Add(string.Format(""));
                list.Add(string.Format("Depth of Box Girder = D = {0:f3} m (From Input Tab 1)", D));
                list.Add(string.Format(""));
                list.Add(string.Format("Summary  of Result at Support, Span/8. Span/4, Span3/8, Span/2: (From STEP 6.6)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Eccentricity = Ecc1 = {0:f4}, Ecc2 = {1:f4}, Ecc3 = {2:f4}, Ecc4 = {3:f4}, Ecc5 = {4:f4}", _Ecc1, _Ecc2, _Ecc3, _Ecc4, _Ecc5));
                //list.Add(string.Format("Eccentricity = Ecc1 = 0.808         Ecc2 = 0.496        Ecc3 = 0.428        Ecc4 = 0.257        Ecc5 = 0.173"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stress at C.G. of Cables due to loss"));
                list.Add(string.Format(""));

                double _Scabcgloss1 = _Sbottomtotloss1 - (_Sbottomtotloss1 - _Stoptotloss1) * _Ecc1 / D;
                list.Add(string.Format("Scabcgloss1 = Sbottomtotloss1 - (Sbottomtotloss1 - Stoptotloss1) x Ecc1 / D"));
                list.Add(string.Format("            = ({0:f4}) - (({0:f4}) -({1:f4})) x {2:f4} / {3:f4}", _Sbottomtotloss1, _Stoptotloss1, _Ecc1, D));
                list.Add(string.Format("            = {0:f4}", _Scabcgloss1));
                list.Add(string.Format(""));




                double _Scabcgloss2 = _Sbottomtotloss2 - (_Sbottomtotloss2 - _Stoptotloss2) * _Ecc2 / D;
                list.Add(string.Format("Scabcgloss2 = Sbottomtotloss2 - (Sbottomtotloss2 - Stoptotloss2) x Ecc1 / D"));
                list.Add(string.Format("            = ({0:f4}) - (({0:f4}) -({1:f4})) x {2:f4} / {3:f4}", _Sbottomtotloss2, _Stoptotloss2, _Ecc2, D));
                list.Add(string.Format("            = {0:f4}", _Scabcgloss2));
                list.Add(string.Format(""));



                double _Scabcgloss3 = _Sbottomtotloss3 - (_Sbottomtotloss3 - _Stoptotloss3) * _Ecc3 / D;
                list.Add(string.Format("Scabcgloss3 = Sbottomtotloss3 - (Sbottomtotloss3 - Stoptotloss3) x Ecc3 / D"));
                list.Add(string.Format("            = ({0:f4}) - (({0:f4}) -({1:f4})) x {2:f4} / {3:f4}", _Sbottomtotloss3, _Stoptotloss3, _Ecc3, D));
                list.Add(string.Format("            = {0:f4}", _Scabcgloss3));
                list.Add(string.Format(""));



                double _Scabcgloss4 = _Sbottomtotloss4 - (_Sbottomtotloss4 - _Stoptotloss4) * _Ecc4 / D;
                list.Add(string.Format("Scabcgloss3 = Sbottomtotloss4 - (Sbottomtotloss4  - Stoptotloss4) x Ecc4 / D"));
                list.Add(string.Format("            = ({0:f4}) - (({0:f4}) -({1:f4})) x {2:f4} / {3:f4}", _Sbottomtotloss4, _Stoptotloss4, _Ecc4, D));
                list.Add(string.Format("            = {0:f4}", _Scabcgloss4));
                list.Add(string.Format(""));


                double _Scabcgloss5 = _Sbottomtotloss5 - (_Sbottomtotloss5 - _Stoptotloss5) * _Ecc5 / D;
                list.Add(string.Format("Scabcgloss3 = Sbottomtotloss4 - (Sbottomtotloss4  - Stoptotloss4) x Ecc4 / D"));
                list.Add(string.Format("            = ({0:f4}) - (({0:f4}) -({1:f4})) x {2:f4} / {3:f4}", _Sbottomtotloss5, _Stoptotloss5, _Ecc5, D));
                list.Add(string.Format("            = {0:f4}", _Scabcgloss5));
                list.Add(string.Format(""));


                #endregion STEP 6.27 : Stress at C.G. of Cables due to loss :

                #region STEP 6.28 : Average Stress at CG of Tendon due to loss

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.28 : Average Stress at CG of Tendon due to loss"));
                list.Add(string.Format("-------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //Check why minus
                double _Savtendoncgloss = -(((_Scabcgloss1 + _Scabcgloss2) / 2) * _L.F2
                                            + ((_Scabcgloss2 + _Scabcgloss3) / 2) * _L.F3
                                            + ((_Scabcgloss3 + _Scabcgloss4) / 2) * _L.F4
                                            + ((_Scabcgloss4 + _Scabcgloss5) / 2) * _L.F5)
                                            / (_L.F2 + _L.F3 + _L.F4 + _L.F5);

                list.Add(string.Format(""));
                list.Add(string.Format("Savtendoncgloss = ((Scabcgloss1 + Scabcgloss2)/2) x L2 "));
                list.Add(string.Format("                  + ((Scabcgloss2 + Scabcgloss3)/2) x L3"));
                list.Add(string.Format("                  + ((Scabcgloss3 + Scabcgloss4)/2) x L4 "));
                list.Add(string.Format("                  + ((Scabcgloss4 + Scabcgloss5)/2) x L5"));
                list.Add(string.Format("                  / (L2+ L3+ L4+ L5)"));
                list.Add(string.Format(""));
                list.Add(string.Format("                = [(({0:f4} + {1:f4})/2) x {2:f4}", _Scabcgloss1, _Scabcgloss2, _L.F2));
                list.Add(string.Format("                  + (({0:f4} + {1:f4})/2) x {2:f4}", _Scabcgloss2, _Scabcgloss3, _L.F3));
                list.Add(string.Format("                  + (({0:f4} + {1:f4})/2) x {2:f4}", _Scabcgloss3, _Scabcgloss4, _L.F4));
                list.Add(string.Format("                  + (({0:f4} + {1:f4})/2) x {2:f4}", _Scabcgloss4, _Scabcgloss5, _L.F5));
                list.Add(string.Format("                  / ({0:f4}+ {1:f4}+ {2:f4}+ {3:f4})", _L.F2, _L.F3, _L.F4, _L.F5));
                list.Add(string.Format(""));
                list.Add(string.Format("                = {0:f4}", _Savtendoncgloss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.28 : Average Stress at CG of Tendon due to loss

                #region STEP 6.29 : Total Losses in Prestress at = 56 days,  (From Input Tab 2, A 3)

                list.Add(string.Format("STEP 6.29 : Total Losses in Prestress at = {0} days,  (From Input Tab 2, A 3)", cwccb_day));
                list.Add(string.Format("------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Loss (Shrinkage+Creep+Relaxation) = Totalloss = {0:f4} Tons (From STEP 6.24)", _Totalloss));
                list.Add(string.Format("Total Elastic Shortening Loss = Eloss = {0:f4} Tons   (From STEP 6.8)", _Eloss));
                list.Add(string.Format("Total Relaxation Loss (Tons) = Retot = {0:f4} Tons   (From STEP 6.14)", _Retot));
                list.Add(string.Format("Percentage of Relaxation Loss in 4 hours = Re4 = {0:f4} %  (From STEP 6.15)", _Re4));
                list.Add(string.Format(""));
                double _PStotloss = _Totalloss + _Eloss + (_Retot * _Re4 / 100);
                list.Add(string.Format("PStotloss = Totallos + Eloss + (Retot x _Re4 / 100)"));
                list.Add(string.Format("          = {0:f4} + {1:f4} + ({2:f4} x {3:f4} / 100)", _Totalloss, _Eloss, _Retot, _Re4));
                list.Add(string.Format("          = {0:f4}  Tons", _PStotloss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.29 : Total Losses in Prestress at = 56 days,  (From Input Tab 2, A 3)

                #region STEP 6.30 : Total Top Stress before SIDL at = {0} days, (From Input Tab 2, A 3)
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.30 : Total Top Stress before SIDL at = {0} days, (From Input Tab 2, A 3)", cwccb_day));
                list.Add(string.Format("---------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("--------"));
                list.Add(string.Format("Top stress, Losses due to Creep + Shrinkage + Relaxation (From STEP 6.25)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("Stoptotloss1 = -7.268, Stoptotloss2 =- 4.80, Stoptotloss3 = -4.86, Stoptotloss4 = -11.18, Stoptotloss5 = -20.04"));
                list.Add(string.Format("Stoptotloss1 = {0:f4}, Stoptotloss2 = {1:f4}, Stoptotloss3 = {2:f4}, Stoptotloss4 = {3:f4}, Stoptotloss5 = {4:f4}", _Stoptotloss1, _Stoptotloss2, _Stoptotloss3, _Stoptotloss4, _Stoptotloss5));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stress at Transfer after Prestress         (From STEP 6.20)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Stopstress1 = {0:f4}, Stopstress2 = {1:f4}, Stopstress3 = {2:f4}, Stopstress4 = {3:f4}, Stopstress5 = {4:f4}", _Stopstress1, _Stopstress2, _Stopstress3, _Stopstress4, _Stopstress5));
                //list.Add(string.Format("Stopstress1 = 115.86, Stopstress2 = 261.126, Stopstress3 = 491.552, Stopstress4 = 473.688, Stopstress5 = 311.649"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stress "));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _StopbefSIDL1 = (_Stoptotloss1 + _Stopstress1);
                double _StopbefSIDL2 = (_Stoptotloss2 + _Stopstress2);
                double _StopbefSIDL3 = (_Stoptotloss3 + _Stopstress3);
                double _StopbefSIDL4 = (_Stoptotloss4 + _Stopstress4);
                double _StopbefSIDL5 = (_Stoptotloss5 + _Stopstress5);
                list.Add(string.Format("StopbefSIDL1 = (Stoptotloss1+ Stopstress1) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Stoptotloss1, _Stopstress1, _StopbefSIDL1));
                list.Add(string.Format("StopbefSIDL2 = (Stoptotloss2+ Stopstress2) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Stoptotloss2, _Stopstress2, _StopbefSIDL2));
                list.Add(string.Format("StopbefSIDL3 = (Stoptotloss3+ Stopstress3) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Stoptotloss3, _Stopstress3, _StopbefSIDL3));
                list.Add(string.Format("StopbefSIDL4 = (Stoptotloss4+ Stopstress4) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Stoptotloss4, _Stopstress4, _StopbefSIDL4));
                list.Add(string.Format("StopbefSIDL5 = (Stoptotloss5+ Stopstress5) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Stoptotloss5, _Stopstress5, _StopbefSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.30 : Total Top Stress before SIDL at = {0} days, (From Input Tab 2, A 3)

                #region STEP 6.31 : Total Bottom Stress before SIDL at = 56 days, (From Input Tab 2, A 3)

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.31 : Total Bottom Stress before SIDL at = {0} days, (From Input Tab 2, A 3)", cwccb_day));
                list.Add(string.Format("---------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("--------"));
                list.Add(string.Format("Bottom stress, Losses due to Creep + Shrinkage + Relaxation (From STEP 6.25)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("Sbottomtotloss1 = -7.268, Sbottomtotloss2 =- 4.80, Sbottomtotloss3 = -4.86, Sbottomtotloss4 = -11.18, Sbottomtotloss5 = -20.04"));
                list.Add(string.Format("Sbottomtotloss1 = {0:f4}, Sbottomtotloss2 = {1:f4}, Sbottomtotloss3 = {2:f4}, Sbottomtotloss4 = {3:f4}, Sbottomtotloss5 = {4:f4}", _Sbottomtotloss1, _Sbottomtotloss2, _Sbottomtotloss3, _Sbottomtotloss4, _Sbottomtotloss5));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stress at Transfer after Prestress (From STEP 6.20)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Sbottomstress1 = {0:f4}, Sbottomstress2 = {1:f4}, Sbottomstress3 = {2:f4}, Sbottomstress4 = {3:f4}, Sbottomstress5 = {4:f4}", _Sbottomstress1, _Sbottomstress2, _Sbottomstress3, _Sbottomstress4, _Sbottomstress5));
                //list.Add(string.Format("Sbottomstress1 = 115.86, Sbottomstress2 = 261.126, Sbottomstress3 = 491.552, Sbottomstress4 = 473.688, Sbottomstress5 = 311.649"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stress "));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _SbottombefSIDL1 = (_Sbottomtotloss1 + _Sbottomstress1);
                double _SbottombefSIDL2 = (_Sbottomtotloss2 + _Sbottomstress2);
                double _SbottombefSIDL3 = (_Sbottomtotloss3 + _Sbottomstress3);
                double _SbottombefSIDL4 = (_Sbottomtotloss4 + _Sbottomstress4);
                double _SbottombefSIDL5 = (_Sbottomtotloss5 + _Sbottomstress5);
                list.Add(string.Format("SbottombefSIDL1 = (Sbottomtotloss1+ Sbottomstress1) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Sbottomtotloss1, _Sbottomstress1, _SbottombefSIDL1));
                list.Add(string.Format("SbottombefSIDL2 = (Sbottomtotloss2+ Sbottomstress2) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Sbottomtotloss2, _Sbottomstress2, _SbottombefSIDL2));
                list.Add(string.Format("SbottombefSIDL3 = (Sbottomtotloss3+ Sbottomstress3) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Sbottomtotloss3, _Sbottomstress3, _SbottombefSIDL3));
                list.Add(string.Format("SbottombefSIDL4 = (Sbottomtotloss4+ Sbottomstress4) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Sbottomtotloss4, _Sbottomstress4, _SbottombefSIDL4));
                list.Add(string.Format("SbottombefSIDL5 = (Sbottomtotloss5+ Sbottomstress5) = ({0:f4} + {1:f4}) = {2:f4} Ton/Sq.m.", _Sbottomtotloss5, _Sbottomstress5, _SbottombefSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.31 : Total Bottom Stress before SIDL at = 56 days, (From Input Tab 2, A 3)

                #region STEP 6.32 : CHECK on Total Stress before SIDL at = 56 days, (From Input Tab 2, A 3)



                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.32 : CHECK on Total Stress before SIDL at = {0} days, (From Input Tab 2, A 3)", cwccb_day));
                list.Add(string.Format("------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Temporary Compressive stress after 28 days = fc_temp28 = {0:f4} Mpa  (Taken from STEP 6)", fc_temp28));
                list.Add(string.Format("Temporary tensile stress after 28 days =  ft_temp28 =  {0:f4} Mpa  (Taken from STEP 6)", _ft_temp28));
                list.Add(string.Format(""));
                #region Check at Support

                list.Add(string.Format("Check at Support:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopbefSIDL1/100) > -ft_temp28 ) OK, StopbefSIDL1/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_StopbefSIDL1 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL1/100) > ft_temp28 ) NOT OK, StopbefSIDL1/100 = {0:f4}/100 = {1:f4} and ft_temp28 = {2:f4} NOT OK,", _StopbefSIDL1, Math.Abs(_StopbefSIDL1 / 100), Math.Abs(_ft_temp28)));
                }
                else if (Math.Abs(_StopbefSIDL1 / 100) < Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL1/100) < ft_temp28 ) OK, StopbefSIDL1/100={0:f4}/100={1:f4} and ft_temp28= {2:f4} OK,", _StopbefSIDL1, Math.Abs(_StopbefSIDL1 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((StopbefSIDL1/100) < fc_temp28 ) OK, StopbefSIDL1/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_StopbefSIDL1 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL1/100) < fc_temp28 ) OK, StopbefSIDL1/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _StopbefSIDL1, Math.Abs(_StopbefSIDL1 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_StopbefSIDL1 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL1/100) > fc_temp28 ) NOT OK, StopbefSIDL1/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _StopbefSIDL1, Math.Abs(_StopbefSIDL1 / 100), Math.Abs(fc_temp28)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > -ft_temp28 ) OK, SbottombefSIDL1/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL1 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL1/100) > ft_temp28 ) OK, SbottombefSIDL1/100={0:f4}/100={1:f4} and ft_temp28= {2:f4} OK,", _SbottombefSIDL1, Math.Abs(_SbottombefSIDL1 / 100), Math.Abs(_ft_temp28)));
                }
                else if (Math.Abs(_SbottombefSIDL1 / 100) < Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL1/100) < ft_temp28 ) NOT OK, SbottombefSIDL1/100={0:f4}/100={1:f4} and ft_temp28= {2:f4} NOT OK,", _SbottombefSIDL1, Math.Abs(_SbottombefSIDL1 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((SbottombefSIDL1/100) < fc_temp28 ) OK, SbottombefSIDL1/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL1 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL1/100) < fc_temp28 ) OK, SbottombefSIDL1/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _SbottombefSIDL1, Math.Abs(_SbottombefSIDL1 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_SbottombefSIDL1 / 100) >= Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL1/100) > fc_temp28 ) NOT OK, SbottombefSIDL1/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _SbottombefSIDL1, Math.Abs(_SbottombefSIDL1 / 100), Math.Abs(fc_temp28)));
                }
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp28 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  fc_temp28 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  fc_temp28= 20.00, OK,"));

                #endregion Check at Support:

                #region Check at Span/8

                list.Add(string.Format("Check at Span/8:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopbefSIDL2/100) > -ft_temp28 ) OK, StopbefSIDL2/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_StopbefSIDL2 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL2/100) > ft_temp28 ) OK, StopbefSIDL2/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} OK,", _StopbefSIDL2, Math.Abs(_StopbefSIDL2 / 100), Math.Abs(_ft_temp28)));
                }
                else if (Math.Abs(_StopbefSIDL2 / 100) < Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL2/100) < ft_temp28 ) NOT OK, StopbefSIDL2/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} NOT OK,", _StopbefSIDL2, Math.Abs(_StopbefSIDL2 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((StopbefSIDL2/100) < fc_temp28 ) OK, StopbefSIDL2/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_StopbefSIDL2 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL2/100) < fc_temp28 ) OK, StopbefSIDL2/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _StopbefSIDL2, Math.Abs(_StopbefSIDL2 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_StopbefSIDL2 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL2/100) > fc_temp28 ) NOT OK, StopbefSIDL2/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _StopbefSIDL2, Math.Abs(_StopbefSIDL2 / 100), Math.Abs(fc_temp28)));
                }


                //list.Add(string.Format("If((SbottombefSIDL2/100) > -ft_temp28 ) OK, SbottombefSIDL2/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL2 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL2/100) > ft_temp28 ) OK, SbottombefSIDL2/100={0:f4}/100={1:f4} and ft_temp28= {2:f4} OK,", _SbottombefSIDL2, Math.Abs(_SbottombefSIDL2 / 100), Math.Abs(_ft_temp28)));
                }
                else if (Math.Abs(_SbottombefSIDL2 / 100) < Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL2/100) < ft_temp28 ) NOT OK, SbottombefSIDL2/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} NOT OK,", _SbottombefSIDL2, Math.Abs(_SbottombefSIDL2 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((SbottombefSIDL2/100) < fc_temp28 ) OK, SbottombefSIDL2/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL2 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL2/100) < fc_temp28 ) OK, SbottombefSIDL2/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _SbottombefSIDL2, Math.Abs(_SbottombefSIDL2 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_SbottombefSIDL2 / 100) >= Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL2/100) > fc_temp28 ) NOT OK, SbottombefSIDL2/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _SbottombefSIDL2, Math.Abs(_SbottombefSIDL2 / 100), Math.Abs(fc_temp28)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp28 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  fc_temp28 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  fc_temp28= 20.00, OK,"));

                #endregion Check at Span/8
                //list.Add(string.Format(""));
                //list.Add(string.Format("Check at Span/8:"));
                //list.Add(string.Format("If((StopbefSIDL2/100) > - ft_temp28 ) OK, StopbefSIDL2/100 = 256.326/100 = 2.56 and  -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL2/100) <  fc_temp28 ) OK, StopbefSIDL2/100 = 256.326/100 = 2.56 and  fc_temp28= 20.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL2/100) > - ft_temp28 ) OK, StopbefSIDL2/100 = 930.93/100 = 9.31 and  -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL2/100) <  fc_temp28 ) OK, StopbefSIDL2/100 = 930.93/100 = 9.31 and  fc_temp28= 20.00, OK,"));
                list.Add(string.Format(""));
                #region Check at Span/4

                list.Add(string.Format("Check at Span/4:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopbefSIDL3/100) > -ft_temp28 ) OK, StopbefSIDL3/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_StopbefSIDL3 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL3/100) > ft_temp28 ) OK, StopbefSIDL3/100={0:f4}/100={1:f4} and ft_temp28= {2:f4} OK,", _StopbefSIDL3, Math.Abs(_StopbefSIDL3 / 100), Math.Abs(_ft_temp28)));
                }
                else if ((_StopbefSIDL3 / 100) < -_ft_temp28)
                {
                    list.Add(string.Format("If((StopbefSIDL3/100) < -ft_temp28 ) NOT OK, StopbefSIDL3/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} NOT OK,", _StopbefSIDL3, Math.Abs(_StopbefSIDL3 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((StopbefSIDL3/100) < fc_temp28 ) OK, StopbefSIDL3/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_StopbefSIDL3 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL3/100) < fc_temp28 ) OK, StopbefSIDL3/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _StopbefSIDL3, Math.Abs(_StopbefSIDL3 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_StopbefSIDL3 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL3/100) > fc_temp28 ) NOT OK, StopbefSIDL3/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _StopbefSIDL3, Math.Abs(_StopbefSIDL3 / 100), Math.Abs(fc_temp28)));
                }


                //list.Add(string.Format("If((SbottombefSIDL3/100) > -ft_temp28 ) OK, SbottombefSIDL3/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL3 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL3/100) > ft_temp28 ) OK, SbottombefSIDL3/100={0:f4}/100={1:f4} and ft_temp28= {2:f4} OK,", _SbottombefSIDL3, Math.Abs(_SbottombefSIDL3 / 100), Math.Abs(_ft_temp28)));
                }
                else if (Math.Abs(_SbottombefSIDL3 / 100) < Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL3/100) < ft_temp28 ) NOT OK, SbottombefSIDL3/100={0:f4}/100={1:f4} and ft_temp28= {2:f4} NOT OK,", _SbottombefSIDL3, Math.Abs(_SbottombefSIDL3 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((SbottombefSIDL3/100) < fc_temp28 ) OK, SbottombefSIDL3/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL3 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL3/100) < fc_temp28 ) OK, SbottombefSIDL3/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _SbottombefSIDL3, Math.Abs(_SbottombefSIDL3 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_SbottombefSIDL3 / 100) >= Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL3/100) > fc_temp28 ) NOT OK, SbottombefSIDL3/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _SbottombefSIDL3, Math.Abs(_SbottombefSIDL3 / 100), Math.Abs(fc_temp28)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp28 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  fc_temp28 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  fc_temp28= 20.00, OK,"));

                #endregion Check at Span/ 4

                //list.Add(string.Format("If((StopbefSIDL3/100) > - ft_temp28 ) OK, StopbefSIDL3/100 = 486.692 /100 = 4.86 and  -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL3/100) <  fc_temp28 ) OK, StopbefSIDL3/100 = 486.692 /100 = 4.86 and  fc_temp28= 20.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL3/100) > - ft_temp28 ) OK, StopbefSIDL3/100 = 1096.78/100 = 10.97 and  -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL3/100) <  fc_temp28 ) OK, StopbefSIDL3/100 = 1096.78/100 = 10.97 and  fc_temp28= 20.00, OK,"));
                list.Add(string.Format(""));
                #region Check at Span3/8

                list.Add(string.Format("Check at Span3/8:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopbefSIDL4/100) > -ft_temp28 ) OK, StopbefSIDL4/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_StopbefSIDL4 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL4/100) > ft_temp28 ) OK, StopbefSIDL4/100={0:f4}/100={1:f4} and ft_temp28= {2:f4} OK,", _StopbefSIDL4, Math.Abs(_StopbefSIDL4 / 100), Math.Abs(_ft_temp28)));
                }
                else if (Math.Abs(_StopbefSIDL4 / 100) < Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL4/100) < -ft_temp28 ) NOT OK, StopbefSIDL4/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} NOT OK,", _StopbefSIDL4, Math.Abs(_StopbefSIDL4 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((StopbefSIDL4/100) < fc_temp28 ) OK, StopbefSIDL4/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_StopbefSIDL4 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL4/100) < fc_temp28 ) OK, StopbefSIDL4/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _StopbefSIDL4, Math.Abs(_StopbefSIDL4 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_StopbefSIDL4 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL4/100) > fc_temp28 ) NOT OK, StopbefSIDL4/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _StopbefSIDL4, Math.Abs(_StopbefSIDL4 / 100), Math.Abs(fc_temp28)));
                }


                //list.Add(string.Format("If((SbottombefSIDL4/100) > -ft_temp28 ) OK, SbottombefSIDL4/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL4 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL4/100) > ft_temp28 ) OK, SbottombefSIDL4/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} OK,", _SbottombefSIDL4, Math.Abs(_SbottombefSIDL4 / 100), Math.Abs(_ft_temp28)));
                }
                else if ((_SbottombefSIDL4 / 100) < -_ft_temp28)
                {
                    list.Add(string.Format("If((SbottombefSIDL4/100) < -ft_temp28 ) NOT OK, SbottombefSIDL4/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} NOT OK,", _SbottombefSIDL4, Math.Abs(_SbottombefSIDL4 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((SbottombefSIDL4/100) < fc_temp28 ) OK, SbottombefSIDL4/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL4 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL4/100) < fc_temp28 ) OK, SbottombefSIDL4/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _SbottombefSIDL4, Math.Abs(_SbottombefSIDL4 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_SbottombefSIDL4 / 100) >= Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL4/100) > fc_temp28 ) NOT OK, SbottombefSIDL4/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _SbottombefSIDL4, Math.Abs(_SbottombefSIDL4 / 100), Math.Abs(fc_temp28)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp28 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  fc_temp28 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  fc_temp28= 20.00, OK,"));

                #endregion Check at Span 3/ 8

                //list.Add(string.Format("If((StopbefSIDL4/100) > - ft_temp28 ) OK, StopbefSIDL4/100 = 462.508/100 = 4.63 and  -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL4/100) <  fc_temp28 ) OK, StopbefSIDL4/100 = 462.508/100 = 4.63 and  fc_temp28= 20.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL4/100) > - ft_temp28 ) OK, StopbefSIDL4/100 = 1355.24/100 = 13.55 and  -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL4/100) <  fc_temp28 ) OK, StopbefSIDL4/100 = 1355.24/100 = 13.55 and  fc_temp28= 20.00, OK,"));
                list.Add(string.Format(""));
                #region Check at Span /2

                list.Add(string.Format("Check at Span/2:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopbefSIDL5/100) > -ft_temp28 ) OK, StopbefSIDL5/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_StopbefSIDL5 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL5/100) > ft_temp28 ) OK, StopbefSIDL5/100={0:f4}/100={1:f4} and ft_temp28= {2:f4} OK,", _StopbefSIDL5, Math.Abs(_StopbefSIDL5 / 100), Math.Abs(_ft_temp28)));
                }
                else if (Math.Abs(_StopbefSIDL5 / 100) < Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL5/100) < ft_temp28 ) NOT OK, StopbefSIDL5/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} NOT OK,", _StopbefSIDL5, Math.Abs(_StopbefSIDL5 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((StopbefSIDL5/100) < fc_temp28 ) OK, StopbefSIDL5/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_StopbefSIDL5 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL5/100) < fc_temp28 ) OK, StopbefSIDL5/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _StopbefSIDL5, Math.Abs(_StopbefSIDL5 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_StopbefSIDL5 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((StopbefSIDL5/100) > fc_temp28 ) NOT OK, StopbefSIDL5/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _StopbefSIDL5, Math.Abs(_StopbefSIDL5 / 100), Math.Abs(fc_temp28)));
                }


                //list.Add(string.Format("If((SbottombefSIDL5/100) > -ft_temp28 ) OK, SbottombefSIDL5/100=108.59/100=1.09 and -ft_temp28= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL5 / 100) > Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL5/100) > ft_temp28 ) OK, SbottombefSIDL5/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} OK,", _SbottombefSIDL5, Math.Abs(_SbottombefSIDL5 / 100), Math.Abs(_ft_temp28)));
                }
                else if (Math.Abs(_SbottombefSIDL5 / 100) < Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL5/100) < ft_temp28 ) NOT OK, SbottombefSIDL5/100={0:f4}/100={1:f4} and -ft_temp28= {2:f4} NOT OK,", _SbottombefSIDL5, Math.Abs(_SbottombefSIDL5 / 100), Math.Abs(_ft_temp28)));
                }
                //list.Add(string.Format("If((SbottombefSIDL5/100) < fc_temp28 ) OK, SbottombefSIDL5/100=108.59/100=1.09 and fc_temp28= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL5 / 100) < Math.Abs(fc_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL5/100) < fc_temp28 ) OK, SbottombefSIDL5/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} OK,", _SbottombefSIDL5, Math.Abs(_SbottombefSIDL5 / 100), Math.Abs(fc_temp28)));
                }
                else if (Math.Abs(_SbottombefSIDL5 / 100) >= Math.Abs(_ft_temp28))
                {
                    list.Add(string.Format("If((SbottombefSIDL5/100) > fc_temp28 ) NOT OK, SbottombefSIDL5/100={0:f4}/100={1:f4} and fc_temp28= {2:f4} NOT OK,", _SbottombefSIDL5, Math.Abs(_SbottombefSIDL5 / 100), Math.Abs(fc_temp28)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp28 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  fc_temp28 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  fc_temp28= 20.00, OK,"));

                #endregion Check at Span / 2

                //list.Add(string.Format("If((StopbefSIDL5/100) > - ft_temp28 ) OK, StopbefSIDL5/100 = 291.609 /100 = 2.91 and  -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL5/100) <  fc_temp28 ) OK, StopbefSIDL5/100 = 291.609 /100 = 2.91 and  fc_temp28= 20.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL5/100) > - ft_temp28 ) OK, StopbefSIDL5/100 = 1374.18 /100 = 13.74 and  -ft_temp28= -2.00, OK,"));
                //list.Add(string.Format("If((StopbefSIDL5/100) <  fc_temp28 ) OK, StopbefSIDL5/100 = 1374.18 /100 = 13.74 and  fc_temp28= 20.00, OK,"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                #endregion STEP 6.32 : CHECK on Total Stress before SIDL at = 56 days, (From Input Tab 2, A 3)

                #region STEP 6.33 : Bending Moments for SIDL at Various Span Sections (Ton Metres) (From STEP 3, TABLE 5)

                list.Add(string.Format("STEP 6.33 : Bending Moments for SIDL at Various Span Sections (Ton Metres) (From STEP 3, TABLE 5)"));
                list.Add(string.Format("--------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _BMSIDL1 = forces.FRC_SIDL_Moment.F1;
                double _BMSIDL2 = forces.FRC_SIDL_Moment.F3;
                double _BMSIDL3 = forces.FRC_SIDL_Moment.F4;
                double _BMSIDL4 = forces.FRC_SIDL_Moment.F5;
                double _BMSIDL5 = forces.FRC_SIDL_Moment.F6;
                list.Add(string.Format("Super Imposed Dead Load (SIDL) "));
                list.Add(string.Format("At  Support   = BMSIDL1 = {0:f4}", _BMSIDL1));
                list.Add(string.Format("At  Span/8    = BMSIDL2 = {0:f4}", _BMSIDL2));
                list.Add(string.Format("At  Span/4    = BMSIDL3 = {0:f4}", _BMSIDL3));
                list.Add(string.Format("At  Span3/8   = BMSIDL4 = {0:f4}", _BMSIDL4));
                list.Add(string.Format("At  Span/2    = BMSIDL5 = {0:f4}", _BMSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.33 : Bending Moments for SIDL at Various Span Sections (Ton Metres) (From STEP 3, TABLE 5)

                #region STEP 6.34 : Top Stresses at Sections due to SIDL
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.34 : Top Stresses at Sections due to SIDL"));
                list.Add(string.Format("-------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format("(From Final Section Properties at Table4)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Top Section Modulus = Zt = {0}  Cu.m.", Zt.ToString(", ")));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress due to SIDL"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _StopSIDL1 = _BMSIDL1 / Zt.F1;
                double _StopSIDL2 = _BMSIDL2 / Zt.F3;
                double _StopSIDL3 = _BMSIDL3 / Zt.F4;
                double _StopSIDL4 = _BMSIDL4 / Zt.F5;
                double _StopSIDL5 = _BMSIDL5 / Zt.F6;
                list.Add(string.Format("StopSIDL1   (At support)  =  BMSIDL1 / Zt1 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL1, Zt.F1, _StopSIDL1));
                list.Add(string.Format("StopSIDL2   (Span/8)      =  BMSIDL2 / Zt2 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL2, Zt.F3, _StopSIDL2));
                list.Add(string.Format("StopSIDL3   (Span/4)      =  BMSIDL3 / Zt3 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL3, Zt.F4, _StopSIDL3));
                list.Add(string.Format("StopSIDL4   (Span3/8)     =  BMSIDL4 / Zt4 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL4, Zt.F5, _StopSIDL4));
                list.Add(string.Format("StopSIDL5   (Span/2)      =  BMSIDL5 / Zt5 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL5, Zt.F6, _StopSIDL5));
                list.Add(string.Format(""));
                #endregion STEP 6.34 : Top Stresses at Sections due to SIDL

                #region STEP 6.35 : Top Stresses at Sections due to SIDL
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.35 : Bottom Stresses at Sections due to SIDL"));
                list.Add(string.Format("----------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format("(From Final Section Properties at Table4)"));

                list.Add(string.Format("Bottom Section Modulus = Zb = {0}  Cu.m.", Zb.ToString(", ")));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom stress due to SIDL"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _SbottomSIDL1 = -_BMSIDL1 / Zb.F1;
                double _SbottomSIDL2 = -_BMSIDL2 / Zb.F3;
                double _SbottomSIDL3 = -_BMSIDL3 / Zb.F4;
                double _SbottomSIDL4 = -_BMSIDL4 / Zb.F5;
                double _SbottomSIDL5 = -_BMSIDL5 / Zb.F6;
                list.Add(string.Format("SbottomSIDL1   (At support)  =  BMSIDL1 / Zb1 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL1, Zb.F1, _SbottomSIDL1));
                list.Add(string.Format("SbottomSIDL2   (Span/8)      =  BMSIDL2 / Zb2 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL2, Zb.F3, _SbottomSIDL2));
                list.Add(string.Format("SbottomSIDL3   (Span/4)      =  BMSIDL3 / Zb3 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL3, Zb.F4, _SbottomSIDL3));
                list.Add(string.Format("SbottomSIDL4   (Span3/8)     =  BMSIDL4 / Zb4 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL4, Zb.F5, _SbottomSIDL4));
                list.Add(string.Format("SbottomSIDL5   (Span/2)      =  BMSIDL5 / Zb5 = {0:f3}/{1:f3} = {2:f3}", _BMSIDL5, Zb.F6, _SbottomSIDL5));
                list.Add(string.Format(""));
                #endregion STEP 6.35 : Bottom Stresses at Sections due to SIDL

                #region STEP 6.36 : Total Top Stresses after SIDL

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.36 : Total Top Stresses after SIDL"));
                list.Add(string.Format("------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stresses before applying SIDL (From STEP 6.30) "));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("StopbefSIDL1   (At support) = {0:f4} Ton/Sq.m.", _StopbefSIDL1));
                list.Add(string.Format("StopbefSIDL2    (Span/8)    = {0:f4} Ton/Sq.m.", _StopbefSIDL2));
                list.Add(string.Format("StopbefSIDL3    (Span/4)    = {0:f4} Ton/Sq.m.", _StopbefSIDL3));
                list.Add(string.Format("StopbefSIDL4    (Span3/8)   = {0:f4} Ton/Sq.m.", _StopbefSIDL4));
                list.Add(string.Format("StopbefSIDL5    (Span/2)    = {0:f4} Ton/Sq.m.", _StopbefSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress due to SIDL (From STEP 6.34)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("StopSIDL1   (At support)   = {0:f4} Ton/Sq.m.", _StopSIDL1));
                list.Add(string.Format("StopSIDL2    (Span/8)      = {0:f4} Ton/Sq.m.", _StopSIDL2));
                list.Add(string.Format("StopSIDL3    (Span/4)      = {0:f4} Ton/Sq.m.", _StopSIDL3));
                list.Add(string.Format("StopSIDL4   (Span3/8)      = {0:f4} Ton/Sq.m.", _StopSIDL4));
                list.Add(string.Format("StopSIDL5    (Span/2)      = {0:f4} Ton/Sq.m.", _StopSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Top Stresses after applying SIDL"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _StopafterSIDL1 = _StopbefSIDL1 + _StopSIDL1;
                double _StopafterSIDL2 = _StopbefSIDL2 + _StopSIDL2;
                double _StopafterSIDL3 = _StopbefSIDL3 + _StopSIDL3;
                double _StopafterSIDL4 = _StopbefSIDL4 + _StopSIDL4;
                double _StopafterSIDL5 = _StopbefSIDL5 + _StopSIDL5;
                list.Add(string.Format("StopafterSIDL1 = StopbefSIDL1 + StopSIDL1 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _StopbefSIDL1, _StopSIDL1, _StopafterSIDL1));
                list.Add(string.Format("StopafterSIDL2 = StopbefSIDL2 + StopSIDL2 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _StopbefSIDL2, _StopSIDL2, _StopafterSIDL2));
                list.Add(string.Format("StopafterSIDL3 = StopbefSIDL3 + StopSID3 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _StopbefSIDL3, _StopSIDL3, _StopafterSIDL3));
                list.Add(string.Format("StopafterSIDL4 = StopbefSIDL4 + StopSIDL4 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _StopbefSIDL4, _StopSIDL4, _StopafterSIDL4));
                list.Add(string.Format("StopafterSIDL5 = StopbefSIDL5 + StopSIDL5 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _StopbefSIDL5, _StopSIDL5, _StopafterSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.36 : Total Top Stresses after SIDL

                #region STEP 6.37 : Total Bottom Stresses after SIDL

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.37 : Total Bottom Stresses after SIDL"));
                list.Add(string.Format("------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom stresses before applying SIDL (From STEP 6.30) "));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottombefSIDL1   (At support) = {0:f4} Ton/Sq.m.", _SbottombefSIDL1));
                list.Add(string.Format("SbottombefSIDL2    (Span/8)    = {0:f4} Ton/Sq.m.", _SbottombefSIDL2));
                list.Add(string.Format("SbottombefSIDL3    (Span/4)    = {0:f4} Ton/Sq.m.", _SbottombefSIDL3));
                list.Add(string.Format("SbottombefSIDL4    (Span3/8)   = {0:f4} Ton/Sq.m.", _SbottombefSIDL4));
                list.Add(string.Format("SbottombefSIDL5    (Span/2)    = {0:f4} Ton/Sq.m.", _SbottombefSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom stress due to SIDL (From STEP 6.34)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomSIDL1   (At support)   = {0:f4} Ton/Sq.m.", _SbottomSIDL1));
                list.Add(string.Format("SbottomSIDL2    (Span/8)      = {0:f4} Ton/Sq.m.", _SbottomSIDL2));
                list.Add(string.Format("SbottomSIDL3    (Span/4)      = {0:f4} Ton/Sq.m.", _SbottomSIDL3));
                list.Add(string.Format("SbottomSIDL4   (Span3/8)      = {0:f4} Ton/Sq.m.", _SbottomSIDL4));
                list.Add(string.Format("SbottomSIDL5    (Span/2)      = {0:f4} Ton/Sq.m.", _SbottomSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Bottom Stresses after applying SIDL"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _SbottomafterSIDL1 = _SbottombefSIDL1 + _SbottomSIDL1;
                double _SbottomafterSIDL2 = _SbottombefSIDL2 + _SbottomSIDL2;
                double _SbottomafterSIDL3 = _SbottombefSIDL3 + _SbottomSIDL3;
                double _SbottomafterSIDL4 = _SbottombefSIDL4 + _SbottomSIDL4;
                double _SbottomafterSIDL5 = _SbottombefSIDL5 + _SbottomSIDL5;
                list.Add(string.Format("SbottomafterSIDL1 = SbottombefSIDL1 + SbottomSIDL1 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _SbottombefSIDL1, _SbottomSIDL1, _SbottomafterSIDL1));
                list.Add(string.Format("SbottomafterSIDL2 = SbottombefSIDL2 + SbottomSIDL2 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _SbottombefSIDL2, _SbottomSIDL2, _SbottomafterSIDL2));
                list.Add(string.Format("SbottomafterSIDL3 = SbottombefSIDL3 + SbottomSIDL3 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _SbottombefSIDL3, _SbottomSIDL3, _SbottomafterSIDL3));
                list.Add(string.Format("SbottomafterSIDL4 = SbottombefSIDL4 + SbottomSIDL4 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _SbottombefSIDL4, _SbottomSIDL4, _SbottomafterSIDL4));
                list.Add(string.Format("SbottomafterSIDL5 = SbottombefSIDL5 + SbottomSIDL5 = {0:f3} + {1:f3} = {2:f3}  Ton/Sq.m.", _SbottombefSIDL5, _SbottomSIDL5, _SbottomafterSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.37 : Total Bottom Stresses after SIDL

                #region STEP 6.38 : CHECK on  Stress  after applying (Super Imposed Dead Load) SIDL

                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.38 : CHECK on Total Stress after SIDL at = {0} days, (From Input Tab 2, A 3)", cwccb_day));
                list.Add(string.Format("------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Temporary Compressive stress after {0} days = _fc_temp14 = {1:f4} Mpa  (Taken from STEP 6)", fsp_day, _fc_temp14));
                list.Add(string.Format("Temporary tensile stress after {0} days =  ft_temp14 =  {1:f4} Mpa  (Taken from STEP 6)", fsp_day, _ft_temp14));
                list.Add(string.Format(""));
                #region Check at Support

                list.Add(string.Format("Check at Support:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopafterSIDL1/100) > -ft_temp14 ) OK, StopafterSIDL1/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));

                if (Math.Abs(_StopafterSIDL1 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL1/100) > ft_temp14 ) NOT OK, StopafterSIDL1/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} NOT OK,", _StopafterSIDL1, Math.Abs(_StopafterSIDL1 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL1 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL1/100) < ft_temp14 ) OK, StopafterSIDL1/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} OK,", _StopafterSIDL1, Math.Abs(_StopafterSIDL1 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((StopafterSIDL1/100) < _fc_temp14 ) OK, StopafterSIDL1/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_StopafterSIDL1 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL1/100) < fc_temp14 ) OK, StopafterSIDL1/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} OK,", _StopafterSIDL1, Math.Abs(_StopafterSIDL1 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL1 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL1/100) > fc_temp14 ) NOT OK, StopafterSIDL1/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} NOT OK,", _StopafterSIDL1, Math.Abs(_StopafterSIDL1 / 100), Math.Abs(_fc_temp14)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > -ft_temp14 ) OK, SbottombefSIDL1/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL1 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL1/100) > ft_temp14 ) OK, SbottombefSIDL1/100={0:f4}/100={1:f4} and ft_temp14= {2:f4} OK,", _SbottombefSIDL1, Math.Abs(_SbottombefSIDL1 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL1 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL1/100) < ft_temp14 ) NOT OK, SbottombefSIDL1/100={0:f4}/100={1:f4} and ft_temp14= {2:f4} NOT OK,", _SbottombefSIDL1, Math.Abs(_SbottombefSIDL1 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((SbottombefSIDL1/100) < _fc_temp14 ) OK, SbottombefSIDL1/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL1 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL1/100) < fc_temp14 ) OK, SbottombefSIDL1/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} OK,", _SbottombefSIDL1, Math.Abs(_SbottombefSIDL1 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL1 / 100) >= Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL1/100) > fc_temp14 ) NOT OK, SbottombefSIDL1/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} NOT OK,", _SbottombefSIDL1, Math.Abs(_SbottombefSIDL1 / 100), Math.Abs(_fc_temp14)));
                }
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp14 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  _fc_temp14 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  _fc_temp14= 20.00, OK,"));

                #endregion Check at Support:

                #region Check at Span/8

                list.Add(string.Format("Check at Span/8:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopafterSIDL2/100) > -ft_temp14 ) OK, StopafterSIDL2/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));
                if (Math.Abs(_StopafterSIDL2 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL2/100) > ft_temp14 ) OK, StopafterSIDL2/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} OK,", _StopafterSIDL2, Math.Abs(_StopafterSIDL2 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL2 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL2/100) < ft_temp14 ) NOT OK, StopafterSIDL2/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} NOT OK,", _StopafterSIDL2, Math.Abs(_StopafterSIDL2 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((StopafterSIDL2/100) < _fc_temp14 ) OK, StopafterSIDL2/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_StopafterSIDL2 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL2/100) < fc_temp14 ) OK, StopafterSIDL2/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} OK,", _StopafterSIDL2, Math.Abs(_StopafterSIDL2 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL2 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL2/100) > fc_temp14 ) NOT OK, StopafterSIDL2/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} NOT OK,", _StopafterSIDL2, Math.Abs(_StopafterSIDL2 / 100), Math.Abs(_fc_temp14)));
                }


                //list.Add(string.Format("If((SbottombefSIDL2/100) > -ft_temp14 ) OK, SbottombefSIDL2/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL2 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL2/100) > ft_temp14 ) OK, SbottombefSIDL2/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} OK,", _SbottombefSIDL2, Math.Abs(_SbottombefSIDL2 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL2 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL2/100) < -ft_temp14 ) NOT OK, SbottombefSIDL2/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} NOT OK,", _SbottombefSIDL2, Math.Abs(_SbottombefSIDL2 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((SbottombefSIDL2/100) < _fc_temp14 ) OK, SbottombefSIDL2/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL2 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL2/100) < fc_temp14 ) OK, SbottombefSIDL2/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} OK,", _SbottombefSIDL2, Math.Abs(_SbottombefSIDL2 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL2 / 100) >= Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL2/100) > fc_temp14 ) NOT OK, SbottombefSIDL2/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} NOT OK,", _SbottombefSIDL2, Math.Abs(_SbottombefSIDL2 / 100), Math.Abs(_fc_temp14)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp14 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  _fc_temp14 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  _fc_temp14= 20.00, OK,"));

                #endregion Check at Span/8
                //list.Add(string.Format(""));
                //list.Add(string.Format("Check at Span/8:"));
                //list.Add(string.Format("If((StopafterSIDL2/100) > - ft_temp14 ) OK, StopafterSIDL2/100 = 256.326/100 = 2.56 and  -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL2/100) <  _fc_temp14 ) OK, StopafterSIDL2/100 = 256.326/100 = 2.56 and  _fc_temp14= 20.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL2/100) > - ft_temp14 ) OK, StopafterSIDL2/100 = 930.93/100 = 9.31 and  -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL2/100) <  _fc_temp14 ) OK, StopafterSIDL2/100 = 930.93/100 = 9.31 and  _fc_temp14= 20.00, OK,"));
                list.Add(string.Format(""));
                #region Check at Span/4

                list.Add(string.Format("Check at Span/4:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopafterSIDL3/100) > -ft_temp14 ) OK, StopafterSIDL3/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));
                if (Math.Abs(_StopafterSIDL3 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL3/100) > ft_temp14 ) OK, StopafterSIDL3/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} OK,", _StopafterSIDL3, Math.Abs(_StopafterSIDL3 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL3 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL3/100) < ft_temp14 ) NOT OK, StopafterSIDL3/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} NOT OK,", _StopafterSIDL3, Math.Abs(_StopafterSIDL3 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((StopafterSIDL3/100) < _fc_temp14 ) OK, StopafterSIDL3/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_StopafterSIDL3 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL3/100) < fc_temp14 ) OK, StopafterSIDL3/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} OK,", _StopafterSIDL3, Math.Abs(_StopafterSIDL3 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL3 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL3/100) > fc_temp14 ) NOT OK, StopafterSIDL3/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} NOT OK,", _StopafterSIDL3, Math.Abs(_StopafterSIDL3 / 100), Math.Abs(_fc_temp14)));
                }


                //list.Add(string.Format("If((SbottombefSIDL3/100) > -ft_temp14 ) OK, SbottombefSIDL3/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL3 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL3/100) > ft_temp14 ) OK, SbottombefSIDL3/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} OK,", _SbottombefSIDL3, Math.Abs(_SbottombefSIDL3 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL3 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL3/100) < ft_temp14 ) NOT OK, SbottombefSIDL3/100={0:f4}/100={1:f4} and ft_temp14= {2:f4} NOT OK,", _SbottombefSIDL3, Math.Abs(_SbottombefSIDL3 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((SbottombefSIDL3/100) < _fc_temp14 ) OK, SbottombefSIDL3/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL3 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL3/100) < fc_temp14 ) OK, SbottombefSIDL3/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} OK,", _SbottombefSIDL3, Math.Abs(_SbottombefSIDL3 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL3 / 100) >= Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL3/100) > fc_temp14 ) NOT OK, SbottombefSIDL3/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} NOT OK,", _SbottombefSIDL3, Math.Abs(_SbottombefSIDL3 / 100), Math.Abs(_fc_temp14)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp14 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  _fc_temp14 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  _fc_temp14= 20.00, OK,"));

                #endregion Check at Span/ 4

                //list.Add(string.Format("If((StopafterSIDL3/100) > - ft_temp14 ) OK, StopafterSIDL3/100 = 486.692 /100 = 4.86 and  -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL3/100) <  _fc_temp14 ) OK, StopafterSIDL3/100 = 486.692 /100 = 4.86 and  _fc_temp14= 20.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL3/100) > - ft_temp14 ) OK, StopafterSIDL3/100 = 1096.78/100 = 10.97 and  -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL3/100) <  _fc_temp14 ) OK, StopafterSIDL3/100 = 1096.78/100 = 10.97 and  _fc_temp14= 20.00, OK,"));
                list.Add(string.Format(""));
                #region Check at Span3/8

                list.Add(string.Format("Check at Span3/8:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopafterSIDL4/100) > -ft_temp14 ) OK, StopafterSIDL4/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));
                if (Math.Abs(_StopafterSIDL4 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL4/100) > ft_temp14 ) OK, StopafterSIDL4/100={0:f4}/100={1:f4} and ft_temp14= {2:f4} OK,", _StopafterSIDL4, Math.Abs(_StopafterSIDL4 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL4 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL4/100) < ft_temp14 ) NOT OK, StopafterSIDL4/100={0:f4}/100={1:f4} and -ft_temp14= {2:f4} NOT OK,", _StopafterSIDL4, Math.Abs(_StopafterSIDL4 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((StopafterSIDL4/100) < _fc_temp14 ) OK, StopafterSIDL4/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_StopafterSIDL4 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL4/100) < fc_temp14 ) OK, StopafterSIDL4/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} OK,", _StopafterSIDL4, Math.Abs(_StopafterSIDL4 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL4 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL4/100) > fc_temp14 ) NOT OK, StopafterSIDL4/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} NOT OK,", _StopafterSIDL4, Math.Abs(_StopafterSIDL4 / 100), Math.Abs(_fc_temp14)));
                }


                //list.Add(string.Format("If((SbottombefSIDL4/100) > -ft_temp14 ) OK, SbottombefSIDL4/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL4 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL4/100) > ft_temp14 ) OK, SbottombefSIDL4/100={0:f4}/100={1:f4} and ft_temp14= {2:f4} OK,", _SbottombefSIDL4, Math.Abs(_SbottombefSIDL4 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL4 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL4/100) < ft_temp14 ) NOT OK, SbottombefSIDL4/100={0:f4}/100={1:f4} and ft_temp14= {2:f4} NOT OK,", _SbottombefSIDL4, Math.Abs(_SbottombefSIDL4 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((SbottombefSIDL4/100) < _fc_temp14 ) OK, SbottombefSIDL4/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL4 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL4/100) < fc_temp14 ) OK, SbottombefSIDL4/100={0:f4}/100={1:f4} and fc_temp14= {2:f4} OK,", _SbottombefSIDL4, Math.Abs(_SbottombefSIDL4 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL4 / 100) >= Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL4/100) > fc_temp14 ) NOT OK, SbottombefSIDL4/100={0:f4}/100={1:f4} and _fc_temp14= {2:f4} NOT OK,", _SbottombefSIDL4, Math.Abs(_SbottombefSIDL4 / 100), Math.Abs(_fc_temp14)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp14 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  _fc_temp14 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  _fc_temp14= 20.00, OK,"));

                #endregion Check at Span 3/ 8

                //list.Add(string.Format("If((StopafterSIDL4/100) > - ft_temp14 ) OK, StopafterSIDL4/100 = 462.508/100 = 4.63 and  -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL4/100) <  _fc_temp14 ) OK, StopafterSIDL4/100 = 462.508/100 = 4.63 and  _fc_temp14= 20.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL4/100) > - ft_temp14 ) OK, StopafterSIDL4/100 = 1355.24/100 = 13.55 and  -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL4/100) <  _fc_temp14 ) OK, StopafterSIDL4/100 = 1355.24/100 = 13.55 and  _fc_temp14= 20.00, OK,"));
                list.Add(string.Format(""));
                #region Check at Span /2

                list.Add(string.Format("Check at Span/2:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format("If((StopafterSIDL5/100) > -ft_temp14 ) OK, StopafterSIDL5/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));
                if (Math.Abs(_StopafterSIDL5 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL5/100) > ft_temp14 ) OK, StopafterSIDL5/100={0:f4}/100={1:f4} and  ft_temp14= {2:f4} OK,", _StopafterSIDL5, Math.Abs(_StopafterSIDL5 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL5 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL5/100) <  ft_temp14 ) NOT OK, StopafterSIDL5/100={0:f4}/100={1:f4} and  ft_temp14= {2:f4} NOT OK,", _StopafterSIDL5, Math.Abs(_StopafterSIDL5 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((StopafterSIDL5/100) < _fc_temp14 ) OK, StopafterSIDL5/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_StopafterSIDL5 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL5/100) < fc_temp14 ) OK, StopafterSIDL5/100={0:f4}/100={1:f4} and  fc_temp14= {2:f4} OK,", _StopafterSIDL5, Math.Abs(_StopafterSIDL5 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_StopafterSIDL5 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((StopafterSIDL5/100) > fc_temp14 ) NOT OK, StopafterSIDL5/100={0:f4}/100={1:f4} and  fc_temp14= {2:f4} NOT OK,", _StopafterSIDL5, Math.Abs(_StopafterSIDL5 / 100), Math.Abs(_fc_temp14)));
                }


                //list.Add(string.Format("If((SbottombefSIDL5/100) > -ft_temp14 ) OK, SbottombefSIDL5/100=108.59/100=1.09 and -ft_temp14= -2.00, OK,"));
                if (Math.Abs(_SbottombefSIDL5 / 100) > Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL5/100) >  ft_temp14 ) OK, SbottombefSIDL5/100={0:f4}/100={1:f4} and  ft_temp14= {2:f4} OK,", _SbottombefSIDL5, Math.Abs(_SbottombefSIDL5 / 100), Math.Abs(_ft_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL5 / 100) < Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL5/100) < ft_temp14 ) NOT OK, SbottombefSIDL5/100={0:f4}/100={1:f4} and  ft_temp14= {2:f4} NOT OK,", _SbottombefSIDL5, Math.Abs(_SbottombefSIDL5 / 100), Math.Abs(_ft_temp14)));
                }
                //list.Add(string.Format("If((SbottombefSIDL5/100) < _fc_temp14 ) OK, SbottombefSIDL5/100=108.59/100=1.09 and _fc_temp14= 20.00, OK,"));
                if (Math.Abs(_SbottombefSIDL5 / 100) < Math.Abs(_fc_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL5/100) < fc_temp14 ) OK, SbottombefSIDL5/100={0:f4}/100={1:f4} and  fc_temp14= {2:f4} OK,", _SbottombefSIDL5, Math.Abs(_SbottombefSIDL5 / 100), Math.Abs(_fc_temp14)));
                }
                else if (Math.Abs(_SbottombefSIDL5 / 100) >= Math.Abs(_ft_temp14))
                {
                    list.Add(string.Format("If((SbottombefSIDL5/100) > fc_temp14 ) NOT OK, SbottombefSIDL5/100={0:f4}/100={1:f4} and  fc_temp14= {2:f4} NOT OK,", _SbottombefSIDL5, Math.Abs(_SbottombefSIDL5 / 100), Math.Abs(_fc_temp14)));
                }


                //list.Add(string.Format("If((SbottombefSIDL1/100) > - ft_temp14 ) OK, SbottombefSIDL1/100 =734.56/100=7.35 and -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((SbottombefSIDL1/100) <  _fc_temp14 ) OK, SbottombefSIDL1/100 =734.56/100 = 7.35 and  _fc_temp14= 20.00, OK,"));

                #endregion Check at Span / 2

                //list.Add(string.Format("If((StopafterSIDL5/100) > - ft_temp14 ) OK, StopafterSIDL5/100 = 291.609 /100 = 2.91 and  -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL5/100) <  _fc_temp14 ) OK, StopafterSIDL5/100 = 291.609 /100 = 2.91 and  _fc_temp14= 20.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL5/100) > - ft_temp14 ) OK, StopafterSIDL5/100 = 1374.18 /100 = 13.74 and  -ft_temp14= -2.00, OK,"));
                //list.Add(string.Format("If((StopafterSIDL5/100) <  _fc_temp14 ) OK, StopafterSIDL5/100 = 1374.18 /100 = 13.74 and  _fc_temp14= 20.00, OK,"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                #endregion STEP 6.38 : CHECK on  Stress  after applying (Super Imposed Dead Load) SIDL

                #region STEP 6.39 : Stress at C.G of cables after SIDL
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.39 : Stress at C.G of cables after SIDL"));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Top Stress after applying SIDL"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("StopafterSIDL1 = {0:f3}Ton/Sq.m.", _StopafterSIDL1));
                list.Add(string.Format("StopafterSIDL2 = {0:f3}Ton/Sq.m.", _StopafterSIDL2));
                list.Add(string.Format("StopafterSIDL3 = {0:f3}Ton/Sq.m.", _StopafterSIDL3));
                list.Add(string.Format("StopafterSIDL4 = {0:f3}Ton/Sq.m.", _StopafterSIDL4));
                list.Add(string.Format("StopafterSIDL5 = {0:f3}Ton/Sq.m.", _StopafterSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Bottom Stress after SIDL"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomafterSIDL1 = {0:f3}Ton/Sq.m.", _SbottomafterSIDL1));
                list.Add(string.Format("SbottomafterSIDL2 = {0:f3}Ton/Sq.m.", _SbottomafterSIDL2));
                list.Add(string.Format("SbottomafterSIDL3 = {0:f3}Ton/Sq.m.", _SbottomafterSIDL3));
                list.Add(string.Format("SbottomafterSIDL4 = {0:f3}Ton/Sq.m.", _SbottomafterSIDL4));
                list.Add(string.Format("SbottomafterSIDL5 = {0:f3}Ton/Sq.m.", _SbottomafterSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format("Depth of Box Girder = D = {0:f4} m.", D));
                list.Add(string.Format(""));
                list.Add(string.Format("Total_Support_ Eccentricity = Ecc1 = {0:f3}", _Ecc1));
                list.Add(string.Format("Total_L/8_ Eccentricity =     Ecc2 = {0:f3}", _Ecc2));
                list.Add(string.Format("Total_L/4_ Eccentricity =     Ecc3 = {0:f3}", _Ecc3));
                list.Add(string.Format("Total_3L/8_ Eccentricity =    Ecc4 = {0:f3}", _Ecc4));
                list.Add(string.Format("Total_3L/8_ Eccentricity =    Ecc5 = {0:f3}", _Ecc5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stress at C.G of cables after SIDL "));
                list.Add(string.Format("-----------------------------------"));
                list.Add(string.Format(""));

                double _Scgaftersidl1 = _SbottomafterSIDL1 - (_SbottomafterSIDL1 - _StopafterSIDL1) * _Ecc1 / D;
                list.Add(string.Format("Scgaftersidl1 = SbottomafterSIDL1 - (SbottomafterSIDL1 - StopafterSIDL1) x Ecc1 / D"));
                list.Add(string.Format("              = {0:f4} - ({0:f4} - {1:f4}) x {2:f4} / {3:f4}", _SbottomafterSIDL1, _StopafterSIDL1, _Ecc1, D));
                list.Add(string.Format("              = {0:f4}", _Scgaftersidl1));
                list.Add(string.Format(""));


                double _Scgaftersidl2 = _SbottomafterSIDL2 - (_SbottomafterSIDL2 - _StopafterSIDL2) * _Ecc2 / D;
                list.Add(string.Format("Scgaftersidl2 = SbottomafterSIDL2 - (SbottomafterSIDL2 - StopafterSIDL2) x Ecc2 / D"));
                list.Add(string.Format("              = {0:f4} - ({0:f4} - {1:f4}) x {2:f4} / {3:f4}", _SbottomafterSIDL2, _StopafterSIDL2, _Ecc2, D));
                list.Add(string.Format("              = {0:f4}", _Scgaftersidl2));
                list.Add(string.Format(""));



                double _Scgaftersidl3 = _SbottomafterSIDL3 - (_SbottomafterSIDL3 - _StopafterSIDL3) * _Ecc3 / D;
                list.Add(string.Format("Scgaftersidl3 = SbottomafterSIDL3 - (SbottomafterSIDL3 - StopafterSIDL3) x Ecc3 / D"));
                list.Add(string.Format("              = {0:f4} - ({0:f4} - {1:f4}) x {2:f4} / {3:f4}", _SbottomafterSIDL3, _StopafterSIDL3, _Ecc3, D));
                list.Add(string.Format("              = {0:f4}", _Scgaftersidl3));
                list.Add(string.Format(""));



                double _Scgaftersidl4 = _SbottomafterSIDL4 - (_SbottomafterSIDL4 - _StopafterSIDL4) * _Ecc4 / D;
                list.Add(string.Format("Scgaftersidl4 = SbottomafterSIDL4 - (SbottomafterSIDL4 - StopafterSIDL4) x Ecc4 / D"));
                list.Add(string.Format("              = {0:f4} - ({0:f4} - {1:f4}) x {2:f4} / {3:f4}", _SbottomafterSIDL4, _StopafterSIDL4, _Ecc4, D));
                list.Add(string.Format("              = {0:f4}", _Scgaftersidl4));
                list.Add(string.Format(""));


                double _Scgaftersidl5 = _SbottomafterSIDL5 - (_SbottomafterSIDL5 - _StopafterSIDL5) * _Ecc5 / D;
                list.Add(string.Format("Scgaftersidl5 = SbottomafterSIDL5 - (SbottomafterSIDL5 - StopafterSIDL5) x Ecc5 / D"));
                list.Add(string.Format("              = {0:f4} - ({0:f4} - {1:f4}) x {2:f4} / {3:f4}", _SbottomafterSIDL5, _StopafterSIDL5, _Ecc5, D));
                list.Add(string.Format("              = {0:f4}", _Scgaftersidl5));



                list.Add(string.Format("Scgaftersidl1 = {0:f4}, Scgaftersidl2 = {1:f4},  Scgaftersidl3 = {2:f4},  Scgaftersidl4  = {3:f4}, Scgaftersidl5 = {4:f4}",
                    _Scgaftersidl1, _Scgaftersidl2, _Scgaftersidl3, _Scgaftersidl4, _Scgaftersidl5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.39 : Stress at C.G of cables after SIDL

                #region STEP 6.40 : Average Stress at C.G of cables after SIDL
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.40 : Average Stress at C.G of cables after SIDL "));
                list.Add(string.Format("----------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data:"));
                list.Add(string.Format(""));

                list.Add(string.Format("Scgaftersidl1 = {0:f4}, Scgaftersidl2 = {1:f4},  Scgaftersidl3 = {2:f4},  Scgaftersidl4  = {3:f4}, Scgaftersidl5 = {4:f4}",
                    _Scgaftersidl1, _Scgaftersidl2, _Scgaftersidl3, _Scgaftersidl4, _Scgaftersidl5));
                list.Add(string.Format(""));

                double _Savcgaftersidl = (((_Scgaftersidl1 + _Scgaftersidl2) / 2) * _L.F2
                                        + ((_Scgaftersidl2 + _Scgaftersidl3) / 2) * _L.F3
                                        + ((_Scgaftersidl3 + _Scgaftersidl4) / 2) * _L.F4
                                        + ((_Scgaftersidl4 + _Scgaftersidl5) / 2) * _L.F5)
                                        / (_L.F2 + _L.F3 + _L.F4 + _L.F5);
                list.Add(string.Format("Savcgaftersidl =  [((Scgaftersidl1 + Scgaftersidl2)/2) x L2 "));
                list.Add(string.Format("                 + ((Scgaftersidl2 + Scgaftersidl3)/2) x L3 "));
                list.Add(string.Format("                 + ((Scgaftersidl3 + Scgaftersidl4)/2) x L4 "));
                list.Add(string.Format("                 + ((Scgaftersidl4 + Scgaftersidl5)/2) x L5]"));
                list.Add(string.Format("                 / (L2+ L3+ L4+ L5)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               =  (({0:f4} + {1:f4})/2) x {2:f4} ", _Scgaftersidl1, _Scgaftersidl2, _L.F2));
                list.Add(string.Format("                 + (({0:f4} + {1:f4})/2) x {2:f4} ", _Scgaftersidl2, _Scgaftersidl3, _L.F3));
                list.Add(string.Format("                 + (({0:f4} + {1:f4})/2) x {2:f4} ", _Scgaftersidl3, _Scgaftersidl4, _L.F4));
                list.Add(string.Format("                 + (({0:f4} + {1:f4})/2) x {2:f4} ", _Scgaftersidl4, _Scgaftersidl5, _L.F5));
                list.Add(string.Format("                 / ({0:f4} + {1:f4} + {2:f4}+ {3:f4})", _L.F2, _L.F3, _L.F4, _L.F5));
                list.Add(string.Format(""));
                list.Add(string.Format("               =  {0:f4}  ", _Savcgaftersidl));

                list.Add(string.Format(""));
                #endregion STEP 6.40 : Average Stress at C.G of cables after SIDL

                #region STEP 6.41: Losses in Prestress, {0} days to infinity (From Input Tab 2, A 3)
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.41: Losses in Prestress, {0} days to infinity (From Input Tab 2, A 3)", cwccb_day));
                list.Add(string.Format("------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Percentage of Relaxation Loss in 4 hours = Re4 = {0:f4} % (From  STEP 6.15)", _Re4));
                list.Add(string.Format(""));
                list.Add(string.Format("Percentage of Relaxation Loss in {0} to {1} days = Reperloss = {2:f4} (From  STEP 6.23)", fsp_day, cwccb_day, _Reperloss));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Relaxation Loss (Tons) = Retot = {0:f4} Tons (From  STEP 6.14)", _Retot));
                list.Add(string.Format(""));
                list.Add(string.Format("Residual Shrinkage Strain at {0} days = [Resh{0}] = {1} (From Input Tab 2 B:19)", cwccb_day, Resh56));
                list.Add(string.Format(""));
                list.Add(string.Format("Creep Strain at {0} days / 10 Mpa = [Crst{0}] = {1} (From Input Tab 2 B:20)", cwccb_day, Crst56));
                list.Add(string.Format(""));
                list.Add(string.Format("Young's Modulus of Elasticity = Eps = {0} GPa (From Input Tab 2 B:8)", Eps));
                list.Add(string.Format(""));
                list.Add(string.Format("Nominal Area = A = {0} Sq.mm. (From Input Tab 2 B:3)", NA));
                list.Add(string.Format(""));
                list.Add(string.Format("Number of Cables at Mid Span (Span/2) n6 = {0:f3} (From Step 4, TABLE 12)", Cable_Nos_At_L2.SUM));
                list.Add(string.Format(""));
                list.Add(string.Format("Number of Strands per Cable = Ns = {0} (From Input Tab 2 B:2)", Ns));
                list.Add(string.Format(""));
                list.Add(string.Format("Average Stress at C.G of cables after SIDL = Savcgaftersidl = {0:f3} Ton/Sq.m. (From STEP 6.40)", _Savcgaftersidl));
                list.Add(string.Format(""));
                list.Add(string.Format("Percentage of Residual Relaxation Loss ({0}  days to infinity) =  Reresperloss (From Input Tab 2, A 3)", cwccb_day));
                list.Add(string.Format(""));

                double _Reresperloss = 100 - _Re4 - _Reperloss;
                list.Add(string.Format("Reresperloss = 100 - Re4 - Reperloss = 100 - {0:f4} - {1:f4} = {2:f4} ", _Re4, _Reperloss, _Reresperloss));
                list.Add(string.Format(""));
                list.Add(string.Format("Relaxation Loss in {0} days to infinity = Reloss56 ", cwccb_day));
                list.Add(string.Format(""));
                double _Reloss56 = _Reresperloss * _Retot / 100.0;
                list.Add(string.Format("Reloss{0} = Reresperloss x Retot / 100 = {1:f4} x {2:f4} / 100 = {3:f4}  Ton", cwccb_day, _Reresperloss, _Retot, _Reloss56));
                list.Add(string.Format(""));
                list.Add(string.Format("Shrinkage Loss at {0} days to infinity = Shloss{0}", cwccb_day));
                list.Add(string.Format(""));

                double _Shloss56 = Resh56 * (Eps * 1000) * (NA / 10000) * Cable_Nos_At_L2.SUM * Ns;
                list.Add(string.Format("Shloss{0} = Resh{0} x (Eps x 1000) x (A/10000) x n6 x Ns", cwccb_day));
                list.Add(string.Format("         = {0} x {1} x 1000 x ({2}/10000) x {3} x {4}", Resh56, Eps, NA, Cable_Nos_At_L2.SUM, Ns));
                list.Add(string.Format("         = {0:f4}  Ton", _Shloss56));
                list.Add(string.Format(""));
                list.Add(string.Format("Creep Loss at {0} days to infinity = Crloss{0}", cwccb_day));
                list.Add(string.Format(""));

                double _Crloss56 = ((_Savcgaftersidl / 1000) * Crst56 * (Eps * 1000) * NA * Cable_Nos_At_L2.SUM * Ns) / 10000;
                list.Add(string.Format("Crloss{0} = ((Savcgaftersidl/1000) x Crst56 x (Eps x 1000) x A x n6 x Ns)/10000", cwccb_day));
                list.Add(string.Format("          = (({0:f4}/1000) x {1} x ({2} x 1000) x {3:f4} x {4:f4} x {5:f4})/10000", _Savcgaftersidl, Crst56, Eps, NA, Cable_Nos_At_L2.SUM, Ns));
                list.Add(string.Format("          = {0:f4} Ton", _Crloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                #endregion STEP 6.41: Losses in Prestress, {0} days to infinity (From Input Tab 2, A 3)

                #region STEP 6.42 : Top Stresses due to Losses in  Prestress on account of CREEP+SHRINKAGE+RELAXATION


                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.42 : Top Stresses due to Losses in  Prestress on account of CREEP+SHRINKAGE+RELAXATION"));
                list.Add(string.Format("----------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data : "));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Losses in Prestress Loss in {0} days to infinity (From STEP 6.41)", cwccb_day));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Relaxation Loss in {0} days to infinity = Reloss{0} = {1:f4} Ton", cwccb_day, _Reloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Shrinkage Loss at {0} days to infinity = Shloss{0} = {1:f4}  Ton", cwccb_day, _Shloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Creep Loss at {0} days to infinity = Crloss{0} = {1} Ton", cwccb_day, _Crloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("(From STEP 6, Design for Flexure)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Section Properties at Support, D, Span/8, Span/4, Spanx3/8, Span/2 (Data at ‘D’ is ignored)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Prestressing Forces P1 = {0:f4}, P2 = {1:f4}, P3 = {2:f4}, P4 = {3:f4}, P5 = {4:f4}",
                    _P1, _P2, _P3, _P4, _P5));
                list.Add(string.Format(""));
                list.Add(string.Format("Area = A1 = {0:f4} Sq.m., A2 ={1:f4} Sq.m., A3 = {2:f4} Sq.m., A4 = {3:f4} Sq.m., A5 = {4:f4} Sq.m.",
                    _A1, _A2, _A3, _A4, _A5));
                list.Add(string.Format(""));
                list.Add(string.Format("C.G. from soffit = Yb1 = {0:f4} m., Yb2 = {1:f4} m., Yb3 = {2:f4} m., Yb4 = {3:f4} m., Yb5 = {4:f4} m",
                    _Yb1, _Yb2, _Yb3, _Yb4, _Yb5));
                list.Add(string.Format(""));
                list.Add(string.Format("Eccentricity of Cables from bottom Ecc1 = {0:f4}, Ecc2 = {1:f4}, Ecc3 = {2:f4}, Ecc4 = {3:f4}, Ecc5 = {4:f4}",
                    _Ecc1, _Ecc2, _Ecc3, _Ecc4, _Ecc5));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Section Modulus = Zt1 = {0:f4} Cu.m , Zt2 = {1:f4} Cu.m., Zt3 = {2:f4} Cu.m., Zt4 = {3:f4} Cu.m., Zt5 = {4:f4} Cu.m.",
                    Zt.F1, Zt.F3, Zt.F4, Zt.F5, Zt.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                //double _Zt1 = Zt.F1;
                //double _Zt2 = Zt.F3;
                //double _Zt3 = Zt.F4;
                //double _Zt4 = Zt.F5;
                //double _Zt5 = Zt.F6;

                double _Stopcrshrl1 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A1) - (_Yb1 - _Ecc1) / Zt.F1);

                list.Add(string.Format("Top Stress at Support = Stopcrshrl1 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A1) - (Yb1-Ecc1)/Zt1)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) - ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A1, _Yb1, _Ecc1, Zt.F1));
                list.Add(string.Format("                                    = {0:f3}", _Stopcrshrl1));
                list.Add(string.Format(""));


                double _Stopcrshrl2 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A2) - (_Yb2 - _Ecc2) / Zt.F3);

                list.Add(string.Format("Top Stress at Span/8  = Stopcrshrl2 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A2) - (Yb2-Ecc2)/Zt2)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) - ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A2, _Yb2, _Ecc2, Zt.F3));
                list.Add(string.Format("                                    = {0:f3}", _Stopcrshrl2));
                list.Add(string.Format(""));


                double _Stopcrshrl3 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A3) - (_Yb3 - _Ecc3) / Zt.F4);

                list.Add(string.Format("Top Stress at Span/4  = Stopcrshrl3 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A3) - (Yb3-Ecc3)/Zt3)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) - ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A3, _Yb3, _Ecc3, Zt.F4));
                list.Add(string.Format("                                    = {0:f3}", _Stopcrshrl3));
                list.Add(string.Format(""));


                double _Stopcrshrl4 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A4) - (_Yb4 - _Ecc4) / Zt.F5);

                list.Add(string.Format("Top Stress at Span3/8 = Stopcrshrl4 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A4) - (Yb4-Ecc4)/Zt4)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) - ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A4, _Yb4, _Ecc4, Zt.F5));
                list.Add(string.Format("                                    = {0:f3}", _Stopcrshrl4));
                list.Add(string.Format(""));


                double _Stopcrshrl5 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A5) - (_Yb5 - _Ecc5) / Zt.F6);

                list.Add(string.Format("Top Stress at Span3/8 = Stopcrshrl5 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A5) - (Yb5-Ecc5)/Zt5)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) - ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A5, _Yb5, _Ecc5, Zt.F6));
                list.Add(string.Format("                                    = {0:f3}", _Stopcrshrl5));
                list.Add(string.Format(""));


                //list.Add(string.Format("Top Stress at Span/8 = Stopcrshrl2 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A2) - (Yb2- Ecc2)/Zt2)"));
                //list.Add(string.Format("= -(182.15+94.14+230.13) x ((1/5.6081) - (1.496 -0.496)/ 4.869) =-( 506.42 x  (0.178-0.205))=13.67"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("Top Stress at Span/4  = Stopcrshrl3 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A3) - (Yb3- Ecc3)/Zt3)"));
                //list.Add(string.Format("= -(182.15+94.14+230.13) x ((1/4.966) - (1.525 -0.428)/ 4.795) = -(506.42 x  (0.20-0.23))=15.19"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("Top Stress at Span3/8  = Stopcrshrl4 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A4) - (Yb4- Ecc4)/Zt4)"));
                //list.Add(string.Format("= -(182.15+94.14+230.13) x ((1/4.966) - (1.525 -0.257)/ 4.795) = -(506.42 x  (0.20-0.26))=30.39"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("Top Stress at Span/2 = Stopcrshrl5 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A5) - (Yb5- Ecc5)/Zt5)"));
                //list.Add(string.Format("= -(182.15+94.14+230.13) x ((1/4.966) - (1.525 -0.173)/ 4.795) =-( 506.42 x (0.20-0.28))=40.51"));
                //list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopcrshrl1 = {0:f3}, Stopcrshrl2 = {1:f3}, Stopcrshrl3 ={2:f3}, Stopcrshrl4={3:f3}, Stopcrshrl5={4:f3}", _Stopcrshrl1, _Stopcrshrl2, _Stopcrshrl3, _Stopcrshrl4, _Stopcrshrl5));
                list.Add(string.Format(""));

                #endregion STEP 6.42 : Top Stresses due to Losses in  Prestress on account of CREEP+SHRINKAGE+RELAXATION

                #region STEP 6.43 : Bottom Stresses due to Losses in  Prestress on account of CREEP+SHRINKAGE+RELAXATION


                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.43 : Bottom Stresses due to Losses in  Prestress on account of CREEP+SHRINKAGE+RELAXATION"));
                list.Add(string.Format("----------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data : "));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Losses in Prestress Loss in {0} days to infinity (From STEP 6.41)", cwccb_day));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Relaxation Loss in {0} days to infinity = Reloss{0} = {1:f4} Ton", cwccb_day, _Reloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Shrinkage Loss at {0} days to infinity = Shloss{0} = {1:f4}  Ton", cwccb_day, _Shloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Creep Loss at {0} days to infinity = Crloss{0} = {1} Ton", cwccb_day, _Crloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("(From STEP 6, Design for Flexure)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Section Properties at Support, D, Span/8, Span/4, Spanx3/8, Span/2 (Data at ‘D’ is ignored)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Prestressing Forces P1 = {0:f4}, P2 = {1:f4}, P3 = {2:f4}, P4 = {3:f4}, P5 = {4:f4}",
                    _P1, _P2, _P3, _P4, _P5));
                list.Add(string.Format(""));
                list.Add(string.Format("Area = A1 = {0:f4} Sq.m., A2 ={1:f4} Sq.m., A3 = {2:f4} Sq.m., A4 = {3:f4} Sq.m., A5 = {4:f4} Sq.m.",
                    _A1, _A2, _A3, _A4, _A5));
                list.Add(string.Format(""));
                list.Add(string.Format("C.G. from soffit = Yb1 = {0:f4} m., Yb2 = {1:f4} m., Yb3 = {2:f4} m., Yb4 = {3:f4} m., Yb5 = {4:f4} m",
                    _Yb1, _Yb2, _Yb3, _Yb4, _Yb5));
                list.Add(string.Format(""));
                list.Add(string.Format("Eccentricity of Cables from bottom Ecc1 = {0:f4}, Ecc2 = {1:f4}, Ecc3 = {2:f4}, Ecc4 = {3:f4}, Ecc5 = {4:f4}",
                    _Ecc1, _Ecc2, _Ecc3, _Ecc4, _Ecc5));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Section Modulus = Zb1 = {0:f4} Cu.m , Zb2 = {1:f4} Cu.m., Zb3 = {2:f4} Cu.m., Zb4 = {3:f4} Cu.m., Zb5 = {4:f4} Cu.m.",
                    Zb.F1, Zb.F3, Zb.F4, Zb.F5, Zb.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                //double _Zb1 = Zb.F1;
                //double _Zb2 = Zb.F3;
                //double _Zb3 = Zb.F4;
                //double _Zb4 = Zb.F5;
                //double _Zb5 = Zb.F6;

                double _Sbottomcrshrl1 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A1) + (_Yb1 - _Ecc1) / Zb.F1);

                list.Add(string.Format("Bottom Stress at Support = Sbottomcrshrl1 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A1) + (Yb1-Ecc1)/Zb1)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) + ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A1, _Yb1, _Ecc1, Zb.F1));
                list.Add(string.Format("                                    = {0:f3}", _Sbottomcrshrl1));
                list.Add(string.Format(""));


                double _Sbottomcrshrl2 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A2) + (_Yb2 - _Ecc2) / Zb.F3);

                list.Add(string.Format("Bottom Stress at Span/8  = Sbottomcrshrl2 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A2) + (Yb2-Ecc2)/Zb2)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) + ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A2, _Yb2, _Ecc2, Zb.F3));
                list.Add(string.Format("                                    = {0:f3}", _Sbottomcrshrl2));
                list.Add(string.Format(""));


                double _Sbottomcrshrl3 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A3) + (_Yb3 - _Ecc3) / Zb.F4);

                list.Add(string.Format("Bottom Stress at Span/4  = Sbottomcrshrl3 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A3) + (Yb3-Ecc3)/Zb3)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) + ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A3, _Yb3, _Ecc3, Zb.F4));
                list.Add(string.Format("                                    = {0:f3}", _Sbottomcrshrl3));
                list.Add(string.Format(""));


                double _Sbottomcrshrl4 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A4) + (_Yb4 - _Ecc4) / Zb.F5);

                list.Add(string.Format("Bottom Stress at Span3/8 = Sbottomcrshrl4 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A4) + (Yb4-Ecc4)/Zb4)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) + ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A4, _Yb4, _Ecc4, Zb.F5));
                list.Add(string.Format("                                    = {0:f3}", _Sbottomcrshrl4));
                list.Add(string.Format(""));


                double _Sbottomcrshrl5 = -(_Crloss56 + _Shloss56 + _Reloss56) * ((1 / _A5) + (_Yb5 - _Ecc5) / Zb.F6);

                list.Add(string.Format("Bottom Stress at Span3/8 = Sbottomcrshrl5 = -(Crloss56+ Shloss56+ Reloss56) x ((1/A5) + (Yb5-Ecc5)/Zb5)"));
                list.Add(string.Format("                                    = -({0:f3} + {1:f3} + {2:f3}) x ((1/{3:f3}) + ({4:f3} - {5:f3})/ {6:f3})", _Crloss56, _Shloss56, _Reloss56, _A5, _Yb5, _Ecc5, Zb.F6));
                list.Add(string.Format("                                    = {0:f3}", _Sbottomcrshrl5));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomcrshrl1 = {0:f3}, Sbottomcrshrl2 = {1:f3}, Sbottomcrshrl3 ={2:f3}, Sbottomcrshrl4={3:f3}, Sbottomcrshrl5={4:f3}", _Sbottomcrshrl1, _Sbottomcrshrl2, _Sbottomcrshrl3, _Sbottomcrshrl4, _Sbottomcrshrl5));
                list.Add(string.Format(""));

                #endregion STEP 6.43 : Bottom Stresses due to Losses in  Prestress on account of CREEP+SHRINKAGE+RELAXATION

                #region STEP 6.44 : Total Top Stresses after SIDL & all Losses

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.44 : Total Top Stresses after SIDL & all Losses"));
                list.Add(string.Format("-------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data:"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Top Stress after applying SIDL (From STEP 6.36)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("StopafterSIDL1 = {0:f4}, StopafterSIDL2 = {1:f4}, StopafterSIDL3 = {2:f4}, StopafterSIDL4 = {3:f4}, StopafterSIDL5 = {4:f4}",
                    _StopafterSIDL1, _StopafterSIDL2, _StopafterSIDL3, _StopafterSIDL4, _StopafterSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stress due to Losses in  Prestress on account of CREEP+SHRINKAGE+RELAXATION (From STEP 6.42)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopcrshrl1 = {0:f4}, Stopcrshrl2 = {1:f4}, Stopcrshrl3 = {2:f4}, Stopcrshrl4 = {3:f4}, Stopcrshrl5 = {4:f4}",
                    _Stopcrshrl1, _Stopcrshrl2, _Stopcrshrl3, _Stopcrshrl4, _Stopcrshrl5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Top Stresses after SIDL & all Losses"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Stopsidlallloss1 = _StopafterSIDL1 + _Stopcrshrl1;
                double _Stopsidlallloss2 = _StopafterSIDL2 + _Stopcrshrl2;
                double _Stopsidlallloss3 = _StopafterSIDL3 + _Stopcrshrl3;
                double _Stopsidlallloss4 = _StopafterSIDL4 + _Stopcrshrl4;
                double _Stopsidlallloss5 = _StopafterSIDL5 + _Stopcrshrl5;
                list.Add(string.Format("Stopsidlallloss1 = StopafterSIDL1+ Stopcrshrl1 = {0:f3} + ({1:f3}) = {2:f3}", _StopafterSIDL1, _Stopcrshrl1, _Stopsidlallloss1));
                list.Add(string.Format("Stopsidlallloss2 = StopafterSIDL2+ Stopcrshrl2 = {0:f3} + ({1:f3}) = {2:f3}", _StopafterSIDL2, _Stopcrshrl2, _Stopsidlallloss2));
                list.Add(string.Format("Stopsidlallloss3 = StopafterSIDL3+ Stopcrshrl3 = {0:f3} + ({1:f3}) = {2:f3}", _StopafterSIDL3, _Stopcrshrl3, _Stopsidlallloss3));
                list.Add(string.Format("Stopsidlallloss4 = StopafterSIDL4+ Stopcrshrl4 = {0:f3} + ({1:f3}) = {2:f3}", _StopafterSIDL4, _Stopcrshrl4, _Stopsidlallloss4));
                list.Add(string.Format("Stopsidlallloss5 = StopafterSIDL5+ Stopcrshrl5 = {0:f3} + ({1:f3}) = {2:f3}", _StopafterSIDL5, _Stopcrshrl5, _Stopsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopsidlallloss1={0:f3}, Stopsidlallloss2={1:f3}, Stopsidlallloss3={2:f3}, Stopsidlallloss4={3:f3},Stopsidlallloss5={4:f3} ",
                    _Stopsidlallloss1, _Stopsidlallloss2, _Stopsidlallloss3, _Stopsidlallloss4, _Stopsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.44 : Total Top Stresses after SIDL & all Losses

                #region STEP 6.45 : Total Bottom Stresses after SIDL & all Losses

                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.45 : Total Bottom Stresses after SIDL & all Losses"));
                list.Add(string.Format("----------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Bottom Stress after applying SIDL (From STEP 6.36)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomafterSIDL1 = {0:f4}, SbottomafterSIDL2 = {1:f4}, SbottomafterSIDL3 = {2:f4}, SbottomafterSIDL4 = {3:f4}, SbottomafterSIDL5 = {4:f4}",
                    _SbottomafterSIDL1, _SbottomafterSIDL2, _SbottomafterSIDL3, _SbottomafterSIDL4, _SbottomafterSIDL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stress due to Losses in  Prestress on account of CREEP+SHRINKAGE+RELAXATION (From STEP 6.42)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomcrshrl1 = {0:f4}, Sbottomcrshrl2 = {1:f4}, Sbottomcrshrl3 = {2:f4}, Sbottomcrshrl4 = {3:f4}, Sbottomcrshrl5 = {4:f4}",
                    _Sbottomcrshrl1, _Sbottomcrshrl2, _Sbottomcrshrl3, _Sbottomcrshrl4, _Sbottomcrshrl5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Bottom Stresses after SIDL & all Losses"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Sbottomsidlallloss1 = _SbottomafterSIDL1 + _Sbottomcrshrl1;
                double _Sbottomsidlallloss2 = _SbottomafterSIDL2 + _Sbottomcrshrl2;
                double _Sbottomsidlallloss3 = _SbottomafterSIDL3 + _Sbottomcrshrl3;
                double _Sbottomsidlallloss4 = _SbottomafterSIDL4 + _Sbottomcrshrl4;
                double _Sbottomsidlallloss5 = _SbottomafterSIDL5 + _Sbottomcrshrl5;
                list.Add(string.Format("Sbottomsidlallloss1 = SbottomafterSIDL1+ Sbottomcrshrl1 = {0:f3} + ({1:f3}) = {2:f3}", _SbottomafterSIDL1, _Sbottomcrshrl1, _Sbottomsidlallloss1));
                list.Add(string.Format("Sbottomsidlallloss2 = SbottomafterSIDL2+ Sbottomcrshrl2 = {0:f3} + ({1:f3}) = {2:f3}", _SbottomafterSIDL2, _Sbottomcrshrl2, _Sbottomsidlallloss2));
                list.Add(string.Format("Sbottomsidlallloss3 = SbottomafterSIDL3+ Sbottomcrshrl3 = {0:f3} + ({1:f3}) = {2:f3}", _SbottomafterSIDL3, _Sbottomcrshrl3, _Sbottomsidlallloss3));
                list.Add(string.Format("Sbottomsidlallloss4 = SbottomafterSIDL4+ Sbottomcrshrl4 = {0:f3} + ({1:f3}) = {2:f3}", _SbottomafterSIDL4, _Sbottomcrshrl4, _Sbottomsidlallloss4));
                list.Add(string.Format("Sbottomsidlallloss5 = SbottomafterSIDL5+ Sbottomcrshrl5 = {0:f3} + ({1:f3}) = {2:f3}", _SbottomafterSIDL5, _Sbottomcrshrl5, _Sbottomsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomsidlallloss1={0:f3}, Sbottomsidlallloss2={1:f3}, Sbottomsidlallloss3={2:f3}, Sbottomsidlallloss4={3:f3},Sbottomsidlallloss5={4:f3} ",
                    _Sbottomsidlallloss1, _Sbottomsidlallloss2, _Sbottomsidlallloss3, _Sbottomsidlallloss4, _Sbottomsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.45 : Total Bottom Stresses after SIDL & all Losses

                #region STEP 6.46 : CHECK on  Total Stress after SIDL and All Losses
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.46 : CHECK on  Total Stress after SIDL and All Losses"));
                list.Add(string.Format("-------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Top Stresses after SIDL & all Losses (From  STEP 6.44)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopsidlallloss1 = {0:f3}, Stopsidlallloss2 = {1:f3}, Stopsidlallloss3 = {2:f3}, Stopsidlallloss4 = {3:f3}, Stopsidlallloss5 = {4:f3}",
                    _Stopsidlallloss1, _Stopsidlallloss2, _Stopsidlallloss3, _Stopsidlallloss4, _Stopsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Bottom Stresses after SIDL & all Losses (From  STEP 6.45)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomsidlallloss1 = {0:f3}, Sbottomsidlallloss2 = {1:f3}, Sbottomsidlallloss3 = {2:f3},Sbottomsidlallloss4 = {3:f3},Sbottomsidlallloss5 = {4:f3}",
                    _Sbottomsidlallloss1, _Sbottomsidlallloss2, _Sbottomsidlallloss3, _Sbottomsidlallloss4, _Sbottomsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format("Service Stage compressive stress = {0:f3} MPa (From Tab2 User Input Data, (26))", _fc_serv));



                #region Check at Support
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Support :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopsidlallloss1 / 100) > Math.Abs(-125 / 100))
                {
                    list.Add(string.Format("If((Stopsidlallloss1/100) > 1.25 ) NOT OK, Stopsidlallloss1/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopsidlallloss1, Math.Abs(_Stopsidlallloss1 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss1 / 100) < Math.Abs(-125 / 100))
                {
                    list.Add(string.Format("If((Stopsidlallloss1/100) < 1.25 ) OK, Stopsidlallloss1/100 = {0:f3}/100 = {1:f3}, OK,", _Stopsidlallloss1, Math.Abs(_Stopsidlallloss1 / 100)));
                }
                if (Math.Abs(_Stopsidlallloss1 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss1/100) < {0:f3} ) OK, Stopsidlallloss1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopsidlallloss1, Math.Abs(_Stopsidlallloss1 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss1 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss1/100) > {0:f3} ) NOT OK, Stopsidlallloss1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopsidlallloss1, Math.Abs(_Stopsidlallloss1 / 100)));
                }
                if ((_Sbottomsidlallloss1 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss1/100) > 0.0 ) OK, Sbottomsidlallloss1/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomsidlallloss1, (_Sbottomsidlallloss1 / 100)));
                }
                else if ((_Sbottomsidlallloss1 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss1/100) < 0.0 ) NOT OK, Sbottomsidlallloss1/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomsidlallloss1, (_Sbottomsidlallloss1 / 100)));
                }
                if (Math.Abs(_Sbottomsidlallloss1 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss1/100) < {0:f3}) OK, Sbottomsidlallloss1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss1, Math.Abs(_Sbottomsidlallloss1 / 100)));
                }
                if (Math.Abs(_Sbottomsidlallloss1 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss1/100) > {0:f3}) NOT OK, Sbottomsidlallloss1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss1, Math.Abs(_Sbottomsidlallloss1 / 100)));
                }

                //list.Add(string.Format("If((Sbottomsidlallloss1/100) > 0.0 ) OK, Sbottomsidlallloss1/100 =607.45/100=6.08, OK,"));
                //list.Add(string.Format("If((Sbottomsidlallloss1/100) < 13.46) OK, Sbottomsidlallloss1/100 =607.45/100 = 6.08, OK,"));
                list.Add(string.Format(""));
                #endregion Check at Support
                list.Add(string.Format(""));
                #region Check at Span/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/8 :"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopsidlallloss2 / 100) > Math.Abs(-125 / 100))
                {
                    list.Add(string.Format("If((Stopsidlallloss2/100) > 1.25 ) OK, Stopsidlallloss2/100 = {0:f3}/100 = {1:f3}, OK,", _Stopsidlallloss2, Math.Abs(_Stopsidlallloss2 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss2 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopsidlallloss2/100) < 1.25 ) NOT OK, Stopsidlallloss2/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopsidlallloss2, Math.Abs(_Stopsidlallloss2 / 100)));
                }
                if (Math.Abs(_Stopsidlallloss2 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss2/100) < {0:f3} ) OK, Stopsidlallloss2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopsidlallloss2, Math.Abs(_Stopsidlallloss2 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss2 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss2/100) > {0:f3} ) NOT OK, Stopsidlallloss2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopsidlallloss2, Math.Abs(_Stopsidlallloss2 / 100)));
                }
                if ((_Sbottomsidlallloss2 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss2/100) > 0.0 ) OK, Sbottomsidlallloss2/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomsidlallloss2, (_Sbottomsidlallloss2 / 100)));
                }
                else if ((_Sbottomsidlallloss2 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss2/100) < 0.0 ) NOT OK, Sbottomsidlallloss2/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomsidlallloss2, (_Sbottomsidlallloss2 / 100)));
                }
                if (Math.Abs(_Sbottomsidlallloss2 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss2/100) < {0:f3}) OK, Sbottomsidlallloss2/100 = {1:f3}/100 = {1:f3}, OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss2, (_Sbottomsidlallloss2 / 100)));
                }
                else if (Math.Abs(_Sbottomsidlallloss2 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss2/100) > {0:f3}) NOT OK, Sbottomsidlallloss2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss2, Math.Abs(_Sbottomsidlallloss2 / 100)));
                }

                //list.Add(string.Format("If((Sbottomsidlallloss1/100) > 0.0 ) OK, Sbottomsidlallloss1/100 =607.45/100=6.08, OK,"));
                //list.Add(string.Format("If((Sbottomsidlallloss1/100) < 13.46) OK, Sbottomsidlallloss1/100 =607.45/100 = 6.08, OK,"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion Check at Span/8
                list.Add(string.Format(""));
                #region Check at Span/4
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/4 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopsidlallloss3 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopsidlallloss3/100) > 1.25 ) OK, Stopsidlallloss3/100 = {0:f3}/100 = {1:f3}, OK,", _Stopsidlallloss3, Math.Abs(_Stopsidlallloss3 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss3 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopsidlallloss3/100) < 1.25 ) NOT OK, Stopsidlallloss3/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopsidlallloss3, Math.Abs(_Stopsidlallloss3 / 100)));
                }
                if (Math.Abs(_Stopsidlallloss3 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss3/100) < {0:f3} ) OK, Stopsidlallloss3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopsidlallloss3, Math.Abs(_Stopsidlallloss3 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss3 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss3/100) > {0:f3} ) NOT OK, Stopsidlallloss3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopsidlallloss3, Math.Abs(_Stopsidlallloss3 / 100)));
                }
                if ((_Sbottomsidlallloss3 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss3/100) > 0.0 ) OK, Sbottomsidlallloss3/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomsidlallloss3, (_Sbottomsidlallloss3 / 100)));
                }
                else if ((_Sbottomsidlallloss3 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss3/100) < 0.0 ) NOT OK, Sbottomsidlallloss3/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomsidlallloss3, (_Sbottomsidlallloss3 / 100)));
                }
                if (Math.Abs(_Sbottomsidlallloss3 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss3/100) < {0:f3}) OK, Sbottomsidlallloss3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss3, Math.Abs(_Sbottomsidlallloss3 / 100)));
                }
                else if (Math.Abs(_Sbottomsidlallloss3 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss3/100) > {0:f3}) NOT OK, Sbottomsidlallloss3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss3, Math.Abs(_Sbottomsidlallloss3 / 100)));
                }

                //list.Add(string.Format("If((Sbottomsidlallloss1/100) > 0.0 ) OK, Sbottomsidlallloss1/100 =607.45/100=6.08, OK,"));
                //list.Add(string.Format("If((Sbottomsidlallloss1/100) < 13.46) OK, Sbottomsidlallloss1/100 =607.45/100 = 6.08, OK,"));
                list.Add(string.Format(""));
                #endregion Check at Span/4
                list.Add(string.Format(""));
                #region Check at Span3/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span3/8 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopsidlallloss4 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopsidlallloss4/100) > 1.25 ) OK, Stopsidlallloss4/100 = {0:f3}/100 = {1:f3}, OK,", _Stopsidlallloss4, Math.Abs(_Stopsidlallloss4 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss4 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopsidlallloss4/100) < 1.25 ) NOT OK, Stopsidlallloss4/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopsidlallloss4, Math.Abs(_Stopsidlallloss4 / 100)));
                }
                if (Math.Abs(_Stopsidlallloss4 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss4/100) < {0:f3} ) OK, Stopsidlallloss4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopsidlallloss4, Math.Abs(_Stopsidlallloss4 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss4 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss4/100) > {0:f3} ) NOT OK, Stopsidlallloss4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopsidlallloss4, Math.Abs(_Stopsidlallloss4 / 100)));
                }
                if ((_Sbottomsidlallloss4 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss4/100) > 0.0 ) OK, Sbottomsidlallloss4/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomsidlallloss4, (_Sbottomsidlallloss4 / 100)));
                }
                else if ((_Sbottomsidlallloss4 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss4/100) < 0.0 ) NOT OK, Sbottomsidlallloss4/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomsidlallloss4, (_Sbottomsidlallloss4 / 100)));
                }
                if (Math.Abs(_Sbottomsidlallloss4 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss4/100) < {0:f3}) OK, Sbottomsidlallloss4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss4, Math.Abs(_Sbottomsidlallloss4 / 100)));
                }
                else if (Math.Abs(_Sbottomsidlallloss4 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss4/100) > {0:f3}) NOT OK, Sbottomsidlallloss4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss4, Math.Abs(_Sbottomsidlallloss4 / 100)));
                }

                //list.Add(string.Format("If((Sbottomsidlallloss1/100) > 0.0 ) OK, Sbottomsidlallloss1/100 =607.45/100=6.08, OK,"));
                //list.Add(string.Format("If((Sbottomsidlallloss1/100) < 13.46) OK, Sbottomsidlallloss1/100 =607.45/100 = 6.08, OK,"));
                list.Add(string.Format(""));
                #endregion Check at Span3/8
                list.Add(string.Format(""));
                #region Check at Span/2
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span /2 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopsidlallloss5 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopsidlallloss5/100) > -125 ) OK, Stopsidlallloss5/100 = {0:f3}/100 = {1:f3}, OK,", _Stopsidlallloss5, Math.Abs(_Stopsidlallloss5 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss5 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopsidlallloss5/100) < -125 ) NOT OK, Stopsidlallloss5/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopsidlallloss5, Math.Abs(_Stopsidlallloss5 / 100)));
                }
                if (Math.Abs(_Stopsidlallloss5 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss5/100) < {0:f3} ) OK, Stopsidlallloss5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopsidlallloss5, Math.Abs(_Stopsidlallloss5 / 100)));
                }
                else if (Math.Abs(_Stopsidlallloss5 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopsidlallloss5/100) < {0:f3} ) NOT OK, Stopsidlallloss5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopsidlallloss5, Math.Abs(_Stopsidlallloss5 / 100)));
                }
                if ((_Sbottomsidlallloss5 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss5/100) > 0.0 ) OK, Sbottomsidlallloss5/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomsidlallloss5, (_Sbottomsidlallloss5 / 100)));
                }
                else if ((_Sbottomsidlallloss5 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomsidlallloss5/100) < 0.0 ) NOT OK, Sbottomsidlallloss5/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomsidlallloss5, (_Sbottomsidlallloss5 / 100)));
                }
                if (Math.Abs(_Sbottomsidlallloss5 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss5/100) < {0:f3}) OK, Sbottomsidlallloss5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss5, Math.Abs(_Sbottomsidlallloss5 / 100)));
                }
                if (Math.Abs(_Sbottomsidlallloss5 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomsidlallloss5/100) > {0:f3}) NOT OK, Sbottomsidlallloss5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomsidlallloss5, Math.Abs(_Sbottomsidlallloss5 / 100)));
                }
                list.Add(string.Format(""));
                #endregion Check at Span/2

                #endregion STEP 6.46 : CHECK on  Total Stress after SIDL and All Losses

                #region STEP 6.47 : Bending Moments for Live Load (LL) at Various Span Sections (Ton Metres)
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.47 : Bending Moments for Live Load (LL) at Various Span Sections (Ton Metres)"));
                list.Add(string.Format("-------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Live Load / Moving Vehicle Load (LL) (From STEP 3, TABLE 5)"));
                list.Add(string.Format(""));
                double _BMLL1 = forces.FRC_LL_Moment.F1;
                double _BMLL2 = forces.FRC_LL_Moment.F3;
                double _BMLL3 = forces.FRC_LL_Moment.F4;
                double _BMLL4 = forces.FRC_LL_Moment.F5;
                double _BMLL5 = forces.FRC_LL_Moment.F6;
                list.Add(string.Format("At  Support  = BMLL1 = {0:f3}", _BMLL1));
                list.Add(string.Format("At  Span/8   = BMLL2 = {0:f3}", _BMLL2));
                list.Add(string.Format("At  Span/4   = BMLL3 = {0:f3}", _BMLL3));
                list.Add(string.Format("At  Span3/8  = BMLL4 = {0:f3}", _BMLL4));
                list.Add(string.Format("At  Span/2   = BMLL5 = {0:f3}", _BMLL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.48 : Top Stresses at Sections due to LL"));
                list.Add(string.Format("------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format("(From Final Section Properties at Table4)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Section Modulus = Zt = {0}  Cu.m.", Zt.ToString(", ")));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress due to LL"));
                list.Add(string.Format(""));
                double _StopLL1 = _BMLL1 / Zt.F1;
                double _StopLL2 = _BMLL2 / Zt.F3;
                double _StopLL3 = _BMLL3 / Zt.F4;
                double _StopLL4 = _BMLL4 / Zt.F5;
                double _StopLL5 = _BMLL5 / Zt.F6;
                list.Add(string.Format("StopLL1  (At support)  =  BMLL1 / Zt1 = {0:f4} / {1:f4} = 0.0", _BMLL1, Zt.F1, _StopLL1));
                list.Add(string.Format("StopLL2   (Span/8)     =  BMLL2 / Zt2 = {0:f4} / {1:f4} = 0.0", _BMLL2, Zt.F3, _StopLL2));
                list.Add(string.Format("StopLL3   (Span/4)     =  BMLL3 / Zt3 = {0:f4} / {1:f4} = 0.0", _BMLL3, Zt.F4, _StopLL3));
                list.Add(string.Format("StopLL4   (Span3/8)    =  BMLL4 / Zt4 = {0:f4} / {1:f4} = 0.0", _BMLL4, Zt.F5, _StopLL4));
                list.Add(string.Format("StopLL5   (Span/2)     =  BMLL5 / Zt5 = {0:f4} / {1:f4} = 0.0", _BMLL5, Zt.F6, _StopLL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.49 : Bottom Stresses at Sections due to LL"));
                list.Add(string.Format("--------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format("(From Final Section Properties at Table4)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Section Modulus = Zb = {0}  Cu.m.", Zb.ToString(", ")));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom stress due to LL"));
                list.Add(string.Format(""));
                double _SbottomLL1 = -_BMLL1 / Zb.F1;
                double _SbottomLL2 = -_BMLL2 / Zb.F3;
                double _SbottomLL3 = -_BMLL3 / Zb.F4;
                double _SbottomLL4 = -_BMLL4 / Zb.F5;
                double _SbottomLL5 = -_BMLL5 / Zb.F6;
                list.Add(string.Format("SbottomLL1  (At support)  =  BMLL1 / Zb1 = {0:f4} / {1:f4} = 0.0", _BMLL1, Zb.F1, _SbottomLL1));
                list.Add(string.Format("SbottomLL2   (Span/8)     =  BMLL2 / Zb2 = {0:f4} / {1:f4} = 0.0", _BMLL2, Zb.F3, _SbottomLL2));
                list.Add(string.Format("SbottomLL3   (Span/4)     =  BMLL3 / Zb3 = {0:f4} / {1:f4} = 0.0", _BMLL3, Zb.F4, _SbottomLL3));
                list.Add(string.Format("SbottomLL4   (Span3/8)    =  BMLL4 / Zb4 = {0:f4} / {1:f4} = 0.0", _BMLL4, Zb.F5, _SbottomLL4));
                list.Add(string.Format("SbottomLL5   (Span/2)     =  BMLL5 / Zb5 = {0:f4} / {1:f4} = 0.0", _BMLL5, Zb.F6, _SbottomLL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.50 : STRESS DUE TO TEMP RISE"));
                list.Add(string.Format("-----------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stresses due to Rise in Temperature at various segments (From STEP 5, Para 5.1, TABLE 13)"));
                list.Add(string.Format("Stemprise1 = {0:f4} kN/Sq.m", _Stemprise1));
                //list.Add(string.Format("Stemprise2 = {0:f4} kN/Sq.m", _Stemprise2));
                list.Add(string.Format("Stemprise4 = {0:f4} kN/Sq.m ", _Stemprise4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress due to Temperature Rise"));
                list.Add(string.Format("-----------------------------------"));
                list.Add(string.Format(""));

                double _Stoptemprise1 = _Stemprise1 / 10;
                double _Stoptemprise2 = _Stemprise1 / 10;
                double _Stoptemprise3 = _Stemprise1 / 10;
                double _Stoptemprise4 = _Stemprise1 / 10;
                double _Stoptemprise5 = _Stemprise1 / 10;
                list.Add(string.Format("Stoptemprise1 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise1, _Stoptemprise1));
                list.Add(string.Format("Stoptemprise2 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise1, _Stoptemprise2));
                list.Add(string.Format("Stoptemprise3 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise1, _Stoptemprise3));
                list.Add(string.Format("Stoptemprise4 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise1, _Stoptemprise4));
                list.Add(string.Format("Stoptemprise5 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise1, _Stoptemprise5));


                list.Add(string.Format("Bottom  stress due to Temperature Rise"));
                list.Add(string.Format("----------------------------------------"));
                double _Sbottomtemprise1 = _Stemprise4 / 10;
                double _Sbottomtemprise2 = _Stemprise4 / 10;
                double _Sbottomtemprise3 = _Stemprise4 / 10;
                double _Sbottomtemprise4 = _Stemprise4 / 10;
                double _Sbottomtemprise5 = _Stemprise4 / 10;
                list.Add(string.Format("Sbottomtemprise1 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise4, _Sbottomtemprise1));
                list.Add(string.Format("Sbottomtemprise2 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise4, _Sbottomtemprise2));
                list.Add(string.Format("Sbottomtemprise3 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise4, _Sbottomtemprise3));
                list.Add(string.Format("Sbottomtemprise4 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise4, _Sbottomtemprise4));
                list.Add(string.Format("Sbottomtemprise5 = Stemprise1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stemprise4, _Sbottomtemprise5));
                list.Add(string.Format(""));

                #endregion STEP 6.46 : CHECK on  Total Stress after SIDL and All Losses

                #region STEP 6.51 : STRESS DUE TO TEMP FALL
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.51 : STRESS DUE TO TEMP FALL "));
                list.Add(string.Format("-------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stresses due to Fall in Temperature at various segments (From STEP 5, Para 5.2, TABLE  20)"));
                list.Add(string.Format("Stempfall1 = {0:f4} kN/Sq.m", _Stempfall1));
                list.Add(string.Format("Stempfall4 = {0:f4} kN/Sq.m ", _Stempfall6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress due to Temperature Fall"));
                list.Add(string.Format("-----------------------------------"));
                list.Add(string.Format(""));

                double _Stoptempfall1 = _Stempfall1 / 10;
                double _Stoptempfall2 = _Stempfall1 / 10;
                double _Stoptempfall3 = _Stempfall1 / 10;
                double _Stoptempfall4 = _Stempfall1 / 10;
                double _Stoptempfall5 = _Stempfall1 / 10;
                list.Add(string.Format("Stoptempfall1 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall1, _Stoptempfall1));
                list.Add(string.Format("Stoptempfall2 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall1, _Stoptempfall2));
                list.Add(string.Format("Stoptempfall3 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall1, _Stoptempfall3));
                list.Add(string.Format("Stoptempfall4 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall1, _Stoptempfall4));
                list.Add(string.Format("Stoptempfall5 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall1, _Stoptempfall5));


                list.Add(string.Format("Bottom  stress due to Temperature Fall"));
                list.Add(string.Format("----------------------------------------"));
                list.Add(string.Format(""));
                double _Sbottomtempfall1 = _Stempfall6 / 10;
                double _Sbottomtempfall2 = _Stempfall6 / 10;
                double _Sbottomtempfall3 = _Stempfall6 / 10;
                double _Sbottomtempfall4 = _Stempfall6 / 10;
                double _Sbottomtempfall5 = _Stempfall6 / 10;
                list.Add(string.Format("Sbottomtempfall1 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall6, _Sbottomtempfall1));
                list.Add(string.Format("Sbottomtempfall2 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall6, _Sbottomtempfall2));
                list.Add(string.Format("Sbottomtempfall3 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall6, _Sbottomtempfall3));
                list.Add(string.Format("Sbottomtempfall4 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall6, _Sbottomtempfall4));
                list.Add(string.Format("Sbottomtempfall5 = Stempfall1 / 10 = {0:f3} / 10  =  {1:f3}  kN/Sq.m ", _Stempfall6, _Sbottomtempfall5));
                list.Add(string.Format(""));
                #endregion STEP 6.51 : STRESS DUE TO TEMP FALL

                #region STEP 6.52 : Service stage Top Stresses without extra time dependent loss without temperature
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.52 : Service stage Top Stresses without extra time dependent loss without temperature"));
                list.Add(string.Format("---------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Top  Stresses after SIDL & all Losses (From  STEP 6.44)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopsidlallloss1 = {0:f3}, Stopsidlallloss2 = {1:f3}, Stopsidlallloss3 = {2:f3}", _Stopsidlallloss1, _Stopsidlallloss2, _Stopsidlallloss3));
                list.Add(string.Format("Stopsidlallloss4 = {0:f3}, Stopsidlallloss5 = {1:f3}", _Stopsidlallloss4, _Stopsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses at Sections due to LL (From  STEP 6.48)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("StopLL1= {0:f3}, StopLL2 = {1:f3}, StopLL3 = {2:f3}, StopLL4 = {3:f3}, StopLL5 = {4:f3}",
                    _StopLL1, _StopLL2, _StopLL3, _StopLL4, _StopLL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses"));
                list.Add(string.Format("------------"));
                list.Add(string.Format(""));
                double _Stopnoextratime1 = _Stopsidlallloss1 + _StopLL1;
                double _Stopnoextratime2 = _Stopsidlallloss2 + _StopLL2;
                double _Stopnoextratime3 = _Stopsidlallloss3 + _StopLL3;
                double _Stopnoextratime4 = _Stopsidlallloss4 + _StopLL4;
                double _Stopnoextratime5 = _Stopsidlallloss5 + _StopLL5;
                list.Add(string.Format("Stopnoextratime1 = Stopsidlallloss1 + StopLL1 = {0:f3} + {1:f3} = {2:f3}", _Stopsidlallloss1, _StopLL1, _Stopnoextratime1));
                list.Add(string.Format("Stopnoextratime2 = Stopsidlallloss2 + StopLL2 = {0:f3} + {1:f3} = {2:f3}", _Stopsidlallloss2, _StopLL2, _Stopnoextratime2));
                list.Add(string.Format("Stopnoextratime3 = Stopsidlallloss3 + StopLL3 = {0:f3} + {1:f3} = {2:f3}", _Stopsidlallloss3, _StopLL3, _Stopnoextratime3));
                list.Add(string.Format("Stopnoextratime4 = Stopsidlallloss4 + StopLL4 = {0:f3} + {1:f3} = {2:f3}", _Stopsidlallloss4, _StopLL4, _Stopnoextratime4));
                list.Add(string.Format("Stopnoextratime5 = Stopsidlallloss5 + StopLL5 = {0:f3} + {1:f3} = {2:f3}", _Stopsidlallloss5, _StopLL5, _Stopnoextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopnoextratime1 = {0:f3}, Stopnoextratime2 = {1:f3}, Stopnoextratime3 = {2:f3}, ", _Stopnoextratime1, _Stopnoextratime2, _Stopnoextratime3));
                list.Add(string.Format("Stopnoextratime4 = {0:f3}, Stopnoextratime5 = {1:f3}", _Stopnoextratime4, _Stopnoextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.52 : Service stage Top Stresses without extra time dependent loss without temperature

                #region STEP 6.53 : Service stage Bottom Stresses without extra time dependent loss without temperature
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.53 : Service stage Bottom Stresses without extra time dependent loss without temperature"));
                list.Add(string.Format("------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Bottom  Stresses after SIDL & all Losses (From  STEP 6.44)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomsidlallloss1 = {0:f3}, Sbottomsidlallloss2 = {1:f3}, Sbottomsidlallloss3 = {2:f3}", _Sbottomsidlallloss1, _Sbottomsidlallloss2, _Sbottomsidlallloss3));
                list.Add(string.Format("Sbottomsidlallloss4 = {0:f3}, Sbottomsidlallloss5 = {1:f3}", _Sbottomsidlallloss4, _Sbottomsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses at Sections due to LL (From  STEP 6.48)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomLL1= {0:f3}, SbottomLL2 = {1:f3}, SbottomLL3 = {2:f3}, SbottomLL4 = {3:f3}, SbottomLL5 = {4:f3}",
                    _SbottomLL1, _SbottomLL2, _SbottomLL3, _SbottomLL4, _SbottomLL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("------------"));
                list.Add(string.Format(""));
                double _Sbottomnoextratime1 = _Sbottomsidlallloss1 + _SbottomLL1;
                double _Sbottomnoextratime2 = _Sbottomsidlallloss2 + _SbottomLL2;
                double _Sbottomnoextratime3 = _Sbottomsidlallloss3 + _SbottomLL3;
                double _Sbottomnoextratime4 = _Sbottomsidlallloss4 + _SbottomLL4;
                double _Sbottomnoextratime5 = _Sbottomsidlallloss5 + _SbottomLL5;
                list.Add(string.Format("Sbottomnoextratime1 = Sbottomsidlallloss1 + SbottomLL1 = {0:f3} + ({1:f3}) = {2:f3}", _Sbottomsidlallloss1, _SbottomLL1, _Sbottomnoextratime1));
                list.Add(string.Format("Sbottomnoextratime2 = Sbottomsidlallloss2 + SbottomLL2 = {0:f3} + ({1:f3}) = {2:f3}", _Sbottomsidlallloss2, _SbottomLL2, _Sbottomnoextratime2));
                list.Add(string.Format("Sbottomnoextratime3 = Sbottomsidlallloss3 + SbottomLL3 = {0:f3} + ({1:f3}) = {2:f3}", _Sbottomsidlallloss3, _SbottomLL3, _Sbottomnoextratime3));
                list.Add(string.Format("Sbottomnoextratime4 = Sbottomsidlallloss4 + SbottomLL4 = {0:f3} + ({1:f3}) = {2:f3}", _Sbottomsidlallloss4, _SbottomLL4, _Sbottomnoextratime4));
                list.Add(string.Format("Sbottomnoextratime5 = Sbottomsidlallloss5 + SbottomLL5 = {0:f3} + ({1:f3}) = {2:f3}", _Sbottomsidlallloss5, _SbottomLL5, _Sbottomnoextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomnoextratime1 = {0:f3}, Sbottomnoextratime2 = {1:f3}, Sbottomnoextratime3 = {2:f3}, ", _Sbottomnoextratime1, _Sbottomnoextratime2, _Sbottomnoextratime3));
                list.Add(string.Format("Sbottomnoextratime4 = {0:f3}, Sbottomnoextratime5 = {1:f3}", _Sbottomnoextratime4, _Sbottomnoextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.53 : Service stage Bottom Stresses without extra time dependent loss without temperature

                #region STEP 6.54 : Service stage checks without extra time dependent loss without temperature
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.54 : Service stage checks without extra time dependent loss without temperature"));
                list.Add(string.Format("--------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Top Stresses after SIDL & all Losses (From  STEP 6.44)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Stopnoextratime1 = {0:f3}, Stopnoextratime2 = {1:f3}, Stopnoextratime3 = {2:f3}, Stopnoextratime4 = {3:f3}, Stopnoextratime5 = {4:f3}",
                    _Stopnoextratime1, _Stopnoextratime2, _Stopnoextratime3, _Stopnoextratime4, _Stopnoextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Bottom Stresses after SIDL & all Losses (From  STEP 6.45)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomnoextratime1 = {0:f3}, Sbottomnoextratime2 = {1:f3}, Sbottomnoextratime3 = {2:f3},Sbottomnoextratime4 = {3:f3},Sbottomnoextratime5 = {4:f3}",
                    _Sbottomnoextratime1, _Sbottomnoextratime2, _Sbottomnoextratime3, _Sbottomnoextratime4, _Sbottomnoextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format("Service Stage compressive stress = {0} MPa (From Tab2 User Input Data, (26))", fc_serv));


                #region Check at Support
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Support :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopnoextratime1 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime1/100) > 1.25 ) NOT OK, Stopnoextratime1/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopnoextratime1, Math.Abs(_Stopnoextratime1 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime1 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime1/100) < 1.25 ) OK, Stopnoextratime1/100 = {0:f3}/100 = {1:f3}, OK,", _Stopnoextratime1, Math.Abs(_Stopnoextratime1 / 100)));
                }
                if (Math.Abs(_Stopnoextratime1 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopnoextratime1/100) < {0:f3} ) OK, Stopnoextratime1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopnoextratime1, Math.Abs(_Stopnoextratime1 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime1 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopnoextratime1/100) > {0:f3} ) NOT OK, Stopnoextratime1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopnoextratime1, Math.Abs(_Stopnoextratime1 / 100)));
                }
                if ((_Sbottomnoextratime1 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime1/100) > 0.0 ) OK, Sbottomnoextratime1/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomnoextratime1, (_Sbottomnoextratime1 / 100)));
                }
                else if ((_Sbottomnoextratime1 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime1/100) < 0.0 ) NOT OK, Sbottomnoextratime1/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomnoextratime1, (_Sbottomnoextratime1 / 100)));
                }
                if (Math.Abs(_Sbottomnoextratime1 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime1/100) < {0:f3}) OK, Sbottomnoextratime1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomnoextratime1, Math.Abs(_Sbottomnoextratime1 / 100)));
                }
                if (Math.Abs(_Sbottomnoextratime1 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime1/100) > {0:f3}) NOT OK, Sbottomnoextratime1/100 = {1:f3}/100 = {2:f3}, NOT OK,", _fc_serv, _Sbottomnoextratime1, (_Sbottomnoextratime1 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Support

                #region Check at Span/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/8 :"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopnoextratime2 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime2/100) > 1.25 ) OK, Stopnoextratime2/100 = {0:f3}/100 = {1:f3}, OK,", _Stopnoextratime2, Math.Abs(_Stopnoextratime2 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime2 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime2/100) < 1.25 ) NOT OK, Stopnoextratime2/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopnoextratime2, Math.Abs(_Stopnoextratime2 / 100)));
                }
                if (Math.Abs(_Stopnoextratime2 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopnoextratime2/100) < {0:f3} ) OK, Stopnoextratime2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopnoextratime2, Math.Abs(_Stopnoextratime2 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime2 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopnoextratime2/100) > {0:f3} ) NOT OK, Stopnoextratime2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopnoextratime2, Math.Abs(_Stopnoextratime2 / 100)));
                }
                if ((_Sbottomnoextratime2 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime2/100) > 0.0 ) OK, Sbottomnoextratime2/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomnoextratime2, (_Sbottomnoextratime2 / 100)));
                }
                else if ((_Sbottomnoextratime2 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime2/100) < 0.0 ) NOT OK, Sbottomnoextratime2/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomnoextratime2, (_Sbottomnoextratime2 / 100)));
                }
                if (Math.Abs(_Sbottomnoextratime2 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime2/100) < {0:f3}) OK, Sbottomnoextratime2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomnoextratime2, Math.Abs(_Sbottomnoextratime2 / 100)));
                }
                else if (Math.Abs(_Sbottomnoextratime2 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime2/100) > {0:f3}) NOT OK, Sbottomnoextratime2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomnoextratime2, Math.Abs(_Sbottomnoextratime2 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Span/8

                list.Add(string.Format(""));
                #region Check at Span/4
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/4 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopnoextratime3 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime3/100) > 1.25 ) OK, Stopnoextratime3/100 = {0:f3}/100 = {1:f3}, OK,", _Stopnoextratime3, Math.Abs(_Stopnoextratime3 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime3 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime3/100) < 1.25 ) NOT OK, Stopnoextratime3/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopnoextratime3, Math.Abs(_Stopnoextratime3 / 100)));
                }
                if (Math.Abs(_Stopnoextratime3 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopnoextratime3/100) < {0:f3} ) OK, Stopnoextratime3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopnoextratime3, Math.Abs(_Stopnoextratime3 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime3 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopnoextratime3/100) > {0:f3} ) NOT OK, Stopnoextratime3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopnoextratime3, Math.Abs(_Stopnoextratime3 / 100)));
                }
                if ((_Sbottomnoextratime3 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime3/100) > 0.0 ) OK, Sbottomnoextratime3/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomnoextratime3, (_Sbottomnoextratime3 / 100)));
                }
                else if ((_Sbottomnoextratime3 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime3/100) < 0.0 ) NOT OK, Sbottomnoextratime3/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomnoextratime3, (_Sbottomnoextratime3 / 100)));
                }
                if (Math.Abs(_Sbottomnoextratime3 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime3/100) < {0:f3}) OK, Sbottomnoextratime3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomnoextratime3, Math.Abs(_Sbottomnoextratime3 / 100)));
                }
                if (Math.Abs(_Sbottomnoextratime3 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime3/100) > {0:f3}) NOT OK, Sbottomnoextratime3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomnoextratime3, Math.Abs(_Sbottomnoextratime3 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Span/4

                list.Add(string.Format(""));
                #region Check at Span3/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span3/8 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopnoextratime4 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime4/100) > 1.25 ) OK, Stopnoextratime4/100 = {0:f3}/100 = {1:f3}, OK,", _Stopnoextratime4, Math.Abs(_Stopnoextratime4 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime4 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime4/100) < 1.25 ) NOT OK, Stopnoextratime4/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopnoextratime4, Math.Abs(_Stopnoextratime4 / 100)));
                }
                if (Math.Abs(_Stopnoextratime4 / 100) < _fc_serv)
                {
                    list.Add(string.Format("If((Stopnoextratime4/100) < {0:f3} ) OK, Stopnoextratime4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopnoextratime4, Math.Abs(_Stopnoextratime4 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime4 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopnoextratime4/100) > {0:f3} ) NOT OK, Stopnoextratime4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopnoextratime4, Math.Abs(_Stopnoextratime4 / 100)));
                }
                if ((_Sbottomnoextratime4 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime4/100) > 0.0 ) OK, Sbottomnoextratime4/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomnoextratime4, (_Sbottomnoextratime4 / 100)));
                }
                else if ((_Sbottomnoextratime4 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime4/100) < 0.0 ) NOT OK, Sbottomnoextratime4/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomnoextratime4, (_Sbottomnoextratime4 / 100)));
                }
                if (Math.Abs(_Sbottomnoextratime4 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime4/100) < {0:f3}) OK, Sbottomnoextratime4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomnoextratime4, Math.Abs(_Sbottomnoextratime4 / 100)));
                }
                if (Math.Abs(_Sbottomnoextratime4 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime4/100) > {0:f3}) NOT OK, Sbottomnoextratime4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomnoextratime4, Math.Abs(_Sbottomnoextratime4 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Span3/8

                list.Add(string.Format(""));
                #region Check at Span/2
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span /2 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopnoextratime5 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime5/100) > -125 ) OK, Stopnoextratime5/100 = {0:f3}/100 = {1:f3}, OK,", _Stopnoextratime5, Math.Abs(_Stopnoextratime5 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime5 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopnoextratime5/100) < -125 ) NOT OK, Stopnoextratime5/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopnoextratime5, Math.Abs(_Stopnoextratime5 / 100)));
                }
                if (Math.Abs(_Stopnoextratime5 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopnoextratime5/100) < {0:f3} ) OK, Stopnoextratime5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopnoextratime5, Math.Abs(_Stopnoextratime5 / 100)));
                }
                else if (Math.Abs(_Stopnoextratime5 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopnoextratime5/100) < {0:f3} ) NOT OK, Stopnoextratime5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopnoextratime5, Math.Abs(_Stopnoextratime5 / 100)));
                }
                if ((_Sbottomnoextratime5 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime5/100) > 0.0 ) OK, Sbottomnoextratime5/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomnoextratime5, (_Sbottomnoextratime5 / 100)));
                }
                else if ((_Sbottomnoextratime5 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomnoextratime5/100) < 0.0 ) NOT OK, Sbottomnoextratime5/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomnoextratime5, (_Sbottomnoextratime5 / 100)));
                }
                if (Math.Abs(_Sbottomnoextratime5 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime5/100) < {0:f3}) OK, Sbottomnoextratime5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomnoextratime5, Math.Abs(_Sbottomnoextratime5 / 100)));
                }
                else if (Math.Abs(_Sbottomnoextratime5 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomnoextratime5/100) > {0:f3}) NOT OK, Sbottomnoextratime5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomnoextratime5, Math.Abs(_Sbottomnoextratime5 / 100)));
                }
                list.Add(string.Format(""));
                #endregion Check at Span/2


                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.54 : Service stage checks without extra time dependent loss without temperature

                #region STEP 6.55 : Service stage Top  Stresses  without extra time dependent loss with temperature rise& 50% Liveload

                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.55 : Service stage Top  Stresses  without extra time dependent loss with temperature rise& 50% Liveload"));
                list.Add(string.Format("---------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Top  Stresses after SIDL & all Losses (From  STEP 6.44)"));
                list.Add(string.Format("--------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopsidlallloss1 = {0:f3}, Stopsidlallloss2 = {1:f3}, Stopsidlallloss3 =  {2:f3}, ", _Stopsidlallloss1, _Stopsidlallloss2, _Stopsidlallloss3));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopsidlallloss4 = {0:f3}, Stopsidlallloss5 = {1:f3}", _Stopsidlallloss4, _Stopsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses at Sections due to LL (From  STEP 6.48)"));
                list.Add(string.Format("----------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("StopLL1 = {0:f3}, StopLL2= {1:f3}, StopLL3 = {2:f3}, StopLL4= {3:f3}, StopLL5 = {4:f3}", _StopLL1, _StopLL2, _StopLL3, _StopLL4, _StopLL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress due to temp-rise (From  STEP 6.50)"));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stoptemprise1 = {0:f3} , Stoptemprise2 = {1:f3}, Stoptemprise3 = {2:f3}, ", _Stoptemprise1, _Stoptemprise2, _Stoptemprise3));
                list.Add(string.Format("Stoptemprise4 = {0:f3}, Stoptemprise5 = {1:f3}", _Stoptemprise4, _Stoptemprise5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses without extra time dependent loss with temperature rise& 50% Liveload"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Stopextratimetemprisell1 = _Stopsidlallloss1 + 0.5 * _StopLL1 + _Stoptemprise1;
                double _Stopextratimetemprisell2 = _Stopsidlallloss2 + 0.5 * _StopLL2 + _Stoptemprise2;
                double _Stopextratimetemprisell3 = _Stopsidlallloss3 + 0.5 * _StopLL3 + _Stoptemprise3;
                double _Stopextratimetemprisell4 = _Stopsidlallloss4 + 0.5 * _StopLL4 + _Stoptemprise4;
                double _Stopextratimetemprisell5 = _Stopsidlallloss5 + 0.5 * _StopLL5 + _Stoptemprise5;

                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetemprisell1 = Stopsidlallloss1 + 0.5 x StopLL1 + Stoptemprise1"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss1, _StopLL1, _Stoptemprise1));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetemprisell1));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetemprisell2 = Stopsidlallloss2 + 0.5 x StopLL2 + Stoptemprise2"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss2, _StopLL2, _Stoptemprise2));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetemprisell2));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetemprisell3 = Stopsidlallloss3 + 0.5 x StopLL3 + Stoptemprise3"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss3, _StopLL3, _Stoptemprise3));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetemprisell3));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetemprisell4 = Stopsidlallloss4 + 0.5 x StopLL4 + Stoptemprise4"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss4, _StopLL4, _Stoptemprise4));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetemprisell4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetemprisell5 = Stopsidlallloss5 + 0.5 x StopLL5 + Stoptemprise5"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss5, _StopLL5, _Stoptemprise5));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetemprisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetemprisell1 = {0:f3} Ton/Sq.m., Stopextratimetemprisell2 = {1:f3} Ton/Sq.m. ", _Stopextratimetemprisell1, _Stopextratimetemprisell2));
                list.Add(string.Format("Stopextratimetemprisell3 = {0:f3} Ton/Sq.m., Stopextratimetemprisell4 = {1:f3} Ton/Sq.m. ", _Stopextratimetemprisell3, _Stopextratimetemprisell4));
                list.Add(string.Format("Stopextratimetemprisell5 = {0:f3} Ton/Sq.m.", _Stopextratimetemprisell5));
                #endregion STEP 6.55 : Service stage Top  Stresses  without extra time dependent loss with temperature rise& 50% Liveload

                #region STEP 6.56 : Service stage Bottom Stresses without extra time dependent loss with temperature rise& 50% Liveload
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.56 : Service stage Bottom Stresses without extra time dependent loss with temperature rise& 50% Liveload"));
                list.Add(string.Format("-----------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Bottom Stresses after SIDL & all Losses (From STEP 6.45)"));
                list.Add(string.Format("-----------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomsidlallloss1={0:f3}, Sbottomsidlallloss2={1:f3}, Sbottomsidlallloss3={2:f3}, Sbottomsidlallloss4={3:f3},Sbottomsidlallloss5={4:f3} ",
                   _Sbottomsidlallloss1, _Sbottomsidlallloss2, _Sbottomsidlallloss3, _Sbottomsidlallloss4, _Sbottomsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses at Sections due to LL (From  STEP 6.49)"));
                list.Add(string.Format("--------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomLL1={0:f3}, SbottomLL2={1:f3}, SbottomLL3={2:f3}, SbottomLL4={3:f3},SbottomLL5={4:f3} ",
                 _SbottomLL1, _SbottomLL2, _SbottomLL3, _SbottomLL4, _SbottomLL5));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom stress due to temp-rise (From  STEP 6.51)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomtemprise1={0:f3}, Sbottomtemprise2={1:f3}, Sbottomtemprise3={2:f3}, Sbottomtemprise4={3:f3},Sbottomtemprise5={4:f3} ",
                 _Sbottomtemprise1, _Sbottomtemprise2, _Sbottomtemprise3, _Sbottomtemprise4, _Sbottomtemprise5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses without extra time dependent loss with temperature rise& 50% Liveload"));
                list.Add(string.Format(""));
                double _Sbottomextratimetemprisell1 = _Sbottomsidlallloss1 + 0.5 * _SbottomLL1 + _Sbottomtemprise1;
                double _Sbottomextratimetemprisell2 = _Sbottomsidlallloss2 + 0.5 * _SbottomLL2 + _Sbottomtemprise2;
                double _Sbottomextratimetemprisell3 = _Sbottomsidlallloss3 + 0.5 * _SbottomLL3 + _Sbottomtemprise3;
                double _Sbottomextratimetemprisell4 = _Sbottomsidlallloss4 + 0.5 * _SbottomLL4 + _Sbottomtemprise4;
                double _Sbottomextratimetemprisell5 = _Sbottomsidlallloss5 + 0.5 * _SbottomLL5 + _Sbottomtemprise5;

                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetemprisell1 = Sbottomsidlallloss1 + 0.5 x SbottomLL1 + Sbottomtemprise1"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss1, _SbottomLL1, _Sbottomtemprise1));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetemprisell1));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetemprisell2 = Sbottomsidlallloss2 + 0.5 x SbottomLL2 + Sbottomtemprise2"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss2, _SbottomLL2, _Sbottomtemprise2));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetemprisell2));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetemprisell3 = Sbottomsidlallloss3 + 0.5 x SbottomLL3 + Sbottomtemprise3"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss3, _SbottomLL3, _Sbottomtemprise3));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetemprisell3));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetemprisell4 = Sbottomsidlallloss4 + 0.5 x SbottomLL4 + Sbottomtemprise4"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss4, _SbottomLL4, _Sbottomtemprise4));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetemprisell4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetemprisell5 = Sbottomsidlallloss5 + 0.5 x SbottomLL5 + Sbottomtemprise5"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss5, _SbottomLL5, _Sbottomtemprise5));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetemprisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetemprisell1 = {0:f3} Ton/Sq.m., Sbottomextratimetemprisell2 = {1:f3} Ton/Sq.m. ", _Sbottomextratimetemprisell1, _Sbottomextratimetemprisell2));
                list.Add(string.Format("Sbottomextratimetemprisell3 = {0:f3} Ton/Sq.m., Sbottomextratimetemprisell4 = {1:f3} Ton/Sq.m. ", _Sbottomextratimetemprisell3, _Sbottomextratimetemprisell4));
                list.Add(string.Format("Sbottomextratimetemprisell5 = {0:f3} Ton/Sq.m.", _Sbottomextratimetemprisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                #endregion STEP 6.57 : Service stage checks without extra time dependent loss with temperature rise& 50% Liveload

                #region STEP 6.57 : Service stage checks without extra time dependent loss with temperature rise& 50% Liveload
                list.Add(string.Format("STEP 6.57 : Service stage checks without extra time dependent loss with temperature rise& 50% Liveload"));
                list.Add(string.Format("------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top Stresses (From  STEP 6.55)"));
                list.Add(string.Format("--------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetemprisell1 = {0:f3}, Stopextratimetemprisell2 = {1:f3}, Stopextratimetemprisell3 =  {2:f3}, ", _Stopextratimetemprisell1, _Stopextratimetemprisell2, _Stopextratimetemprisell3));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetemprisell4 = {0:f3}, Stopextratimetemprisell5 = {1:f3}", _Stopextratimetemprisell4, _Stopextratimetemprisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses (From STEP 6.56)"));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetemprisell1 = {0:f3}, Sbottomextratimetemprisell2 = {1:f3}, Sbottomextratimetemprisell3 =  {2:f3}, ", _Sbottomextratimetemprisell1, _Sbottomextratimetemprisell2, _Sbottomextratimetemprisell3));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetemprisell4 = {0:f3}, Sbottomextratimetemprisell5 = {1:f3}", _Sbottomextratimetemprisell4, _Sbottomextratimetemprisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Service Stage compressive stress = fc_serv = {0:f3} MPa (From Tab2 User Input Data, (26))", _fc_serv));
                list.Add(string.Format(""));



                #region Check at Support
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Support :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopextratimetemprisell1 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell1/100) > 1.25 ) OK, Stopextratimetemprisell1/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratimetemprisell1, Math.Abs(_Stopextratimetemprisell1 / 100)));
                }
                else if ((_Stopextratimetemprisell1 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell1/100) < 1.25 ) NOT OK, Stopextratimetemprisell1/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetemprisell1, Math.Abs(_Stopextratimetemprisell1 / 100)));
                }
                if (Math.Abs(_Stopextratimetemprisell1 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell1/100) < {0:f3} ) OK, Stopextratimetemprisell1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell1, Math.Abs(_Stopextratimetemprisell1 / 100)));
                }
                else if (Math.Abs(_Stopextratimetemprisell1 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell1/100) > {0:f3} ) NOT OK, Stopextratimetemprisell1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell1, Math.Abs(_Stopextratimetemprisell1 / 100)));
                }
                if ((_Sbottomextratimetemprisell1 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell1/100) > 0.0 ) OK, Sbottomextratimetemprisell1/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetemprisell1, Math.Abs(_Sbottomextratimetemprisell1 / 100)));
                }
                else if ((_Sbottomextratimetemprisell1 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell1/100) < 0.0 ) NOT OK, Sbottomextratimetemprisell1/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetemprisell1, (_Sbottomextratimetemprisell1 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetemprisell1 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell1/100) < {0:f3}) OK, Sbottomextratimetemprisell1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell1, Math.Abs(_Sbottomextratimetemprisell1 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetemprisell1 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell1/100) > {0:f3}) NOT OK, Sbottomextratimetemprisell1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell1, Math.Abs(_Sbottomextratimetemprisell1 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Support

                #region Check at Span/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/8 :"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopextratimetemprisell2 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell2/100) > 1.25 ) OK, Stopextratimetemprisell2/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratimetemprisell2, Math.Abs(_Stopextratimetemprisell2 / 100)));
                }
                else if (Math.Abs(_Stopextratimetemprisell2 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell2/100) < 1.25 ) NOT OK, Stopextratimetemprisell2/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetemprisell2, Math.Abs(_Stopextratimetemprisell2 / 100)));
                }
                if (Math.Abs(_Stopextratimetemprisell2 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell2/100) < {0:f3} ) OK, Stopextratimetemprisell2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell2, Math.Abs(_Stopextratimetemprisell2 / 100)));
                }
                else if (Math.Abs(_Stopextratimetemprisell2 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell2/100) > {0:f3} ) NOT OK, Stopextratimetemprisell2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell2, Math.Abs(_Stopextratimetemprisell2 / 100)));
                }
                if ((_Sbottomextratimetemprisell2 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell2/100) > 0.0 ) OK, Sbottomextratimetemprisell2/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetemprisell2, (_Sbottomextratimetemprisell2 / 100)));
                }
                else if ((_Sbottomextratimetemprisell2 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell2/100) < 0.0 ) NOT OK, Sbottomextratimetemprisell2/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetemprisell2, (_Sbottomextratimetemprisell2 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetemprisell2 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell2/100) < {0:f3}) OK, Sbottomextratimetemprisell2/100 = {1:f3}/100 = {1:f3}, OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell2, Math.Abs(_Sbottomextratimetemprisell2 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetemprisell2 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell2/100) > {0:f3}) NOT OK, Sbottomextratimetemprisell2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell2, Math.Abs(_Sbottomextratimetemprisell2 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Span/8

                list.Add(string.Format(""));
                #region Check at Span/4
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/4 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopextratimetemprisell3 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell3/100) > 1.25 ) OK, Stopextratimetemprisell3/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratimetemprisell3, Math.Abs(_Stopextratimetemprisell3 / 100)));
                }
                else if (Math.Abs(_Stopextratimetemprisell3 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell3/100) < -125 ) NOT OK, Stopextratimetemprisell3/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetemprisell3, Math.Abs(_Stopextratimetemprisell3 / 100)));
                }
                if (Math.Abs(_Stopextratimetemprisell3 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell3/100) < {0:f3} ) OK, Stopextratimetemprisell3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell3, Math.Abs(_Stopextratimetemprisell3 / 100)));
                }
                else if (Math.Abs(_Stopextratimetemprisell3 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell3/100) > {0:f3} ) NOT OK, Stopextratimetemprisell3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell3, Math.Abs(_Stopextratimetemprisell3 / 100)));
                }
                if ((_Sbottomextratimetemprisell3 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell3/100) > 0.0 ) OK, Sbottomextratimetemprisell3/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetemprisell3, (_Sbottomextratimetemprisell3 / 100)));
                }
                else if ((_Sbottomextratimetemprisell3 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell3/100) < 0.0 ) NOT OK, Sbottomextratimetemprisell3/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetemprisell3, (_Sbottomextratimetemprisell3 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetemprisell3 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell3/100) < {0:f3}) OK, Sbottomextratimetemprisell3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell3, Math.Abs(_Sbottomextratimetemprisell3 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetemprisell3 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell3/100) > {0:f3}) NOT OK, Sbottomextratimetemprisell3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell3, Math.Abs(_Sbottomextratimetemprisell3 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Span/4

                list.Add(string.Format(""));
                #region Check at Span3/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span3/8 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopextratimetemprisell4 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell4/100) > 1.25 ) OK, Stopextratimetemprisell4/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratimetemprisell4, Math.Abs(_Stopextratimetemprisell4 / 100)));
                }
                else if (Math.Abs(_Stopextratimetemprisell4 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell4/100) < -125 ) NOT OK, Stopextratimetemprisell4/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetemprisell4, Math.Abs(_Stopextratimetemprisell4 / 100)));
                }
                if (Math.Abs(_Stopextratimetemprisell4 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell4/100) < {0:f3} ) OK, Stopextratimetemprisell4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell4, Math.Abs(_Stopextratimetemprisell4 / 100)));
                }
                else if (Math.Abs(_Stopextratimetemprisell4 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell4/100) > {0:f3} ) NOT OK, Stopextratimetemprisell4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell4, Math.Abs(_Stopextratimetemprisell4 / 100)));
                }
                if ((_Sbottomextratimetemprisell4 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell4/100) > 0.0 ) OK, Sbottomextratimetemprisell4/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetemprisell4, (_Sbottomextratimetemprisell4 / 100)));
                }
                else if ((_Sbottomextratimetemprisell4 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell4/100) < 0.0 ) NOT OK, Sbottomextratimetemprisell4/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetemprisell4, (_Sbottomextratimetemprisell4 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetemprisell4 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell4/100) < {0:f3}) OK, Sbottomextratimetemprisell4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell4, Math.Abs(_Sbottomextratimetemprisell4 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetemprisell4 / 100) > (_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell4/100) > {0:f3}) NOT OK, Sbottomextratimetemprisell4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell4, Math.Abs(_Sbottomextratimetemprisell4 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Span3/8

                list.Add(string.Format(""));
                #region Check at Span/2
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span /2 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopextratimetemprisell5 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell5/100) > -125 ) OK, Stopextratimetemprisell5/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratimetemprisell5, Math.Abs(_Stopextratimetemprisell5 / 100)));
                }
                else if (Math.Abs(_Stopextratimetemprisell5 / 100) < 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetemprisell5/100) < -125 ) NOT OK, Stopextratimetemprisell5/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetemprisell5, Math.Abs(_Stopextratimetemprisell5 / 100)));
                }
                if (Math.Abs(_Stopextratimetemprisell5 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell5/100) < {0:f3} ) OK, Stopextratimetemprisell5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell5, Math.Abs(_Stopextratimetemprisell5 / 100)));
                }
                else if (Math.Abs(_Stopextratimetemprisell5 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Stopextratimetemprisell5/100) < {0:f3} ) NOT OK, Stopextratimetemprisell5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Stopextratimetemprisell5, Math.Abs(_Stopextratimetemprisell5 / 100)));
                }
                if ((_Sbottomextratimetemprisell5 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell5/100) > 0.0 ) OK, Sbottomextratimetemprisell5/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetemprisell5, (_Sbottomextratimetemprisell5 / 100)));
                }
                else if ((_Sbottomextratimetemprisell5 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell5/100) < 0.0 ) NOT OK, Sbottomextratimetemprisell5/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetemprisell5, (_Sbottomextratimetemprisell5 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetemprisell5 / 100) < Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell5/100) < {0:f3}) OK, Sbottomextratimetemprisell5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell5, Math.Abs(_Sbottomextratimetemprisell5 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetemprisell5 / 100) > Math.Abs(_fc_serv))
                {
                    list.Add(string.Format("If((Sbottomextratimetemprisell5/100) > {0:f3}) NOT OK, Sbottomextratimetemprisell5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_fc_serv), _Sbottomextratimetemprisell5, Math.Abs(_Sbottomextratimetemprisell5 / 100)));
                }
                list.Add(string.Format(""));
                #endregion Check at Span/2


                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                #endregion STEP 6.57 : Service stage checks without extra time dependent loss with temperature rise& 50% Liveload

                #region STEP 6.58 : Service stage Top  Stresses  without extra time dependent loss with temperature fall& 50% Liveload

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.58 : Service stage Top  Stresses  without extra time dependent loss with temperature fall& 50% Liveload"));
                list.Add(string.Format("---------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Top  Stresses after SIDL & all Losses (From STEP 6.44)"));
                list.Add(string.Format("--------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopsidlallloss1 = {0:f3}, Stopsidlallloss2 = {1:f3}, Stopsidlallloss3 =  {2:f3}, ", _Stopsidlallloss1, _Stopsidlallloss2, _Stopsidlallloss3));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopsidlallloss4 = {0:f3}, Stopsidlallloss5 = {1:f3}", _Stopsidlallloss4, _Stopsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses at Sections due to LL (From  STEP 6.48)"));
                list.Add(string.Format("----------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("StopLL1 = {0:f3}, StopLL2= {1:f3}, StopLL3 = {2:f3}, StopLL4= {3:f3}, StopLL5 = {4:f3}", _StopLL1, _StopLL2, _StopLL3, _StopLL4, _StopLL5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top stress due to temp-fall (From  STEP 6.50)"));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stoptempfall1 = {0:f3} , Stoptempfall2 = {1:f3}, Stoptempfall3 = {2:f3}, ", _Stoptempfall1, _Stoptempfall2, _Stoptempfall3));
                list.Add(string.Format("Stoptempfall4 = {0:f3}, Stoptempfall5 = {1:f3}", _Stoptempfall4, _Stoptempfall5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses without extra time dependent loss with temperature fall& 50% Liveload"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Stopextratimetempfallll1 = _Stopsidlallloss1 + 0.5 * _StopLL1 + _Stoptempfall1;
                double _Stopextratimetempfallll2 = _Stopsidlallloss2 + 0.5 * _StopLL2 + _Stoptempfall2;
                double _Stopextratimetempfallll3 = _Stopsidlallloss3 + 0.5 * _StopLL3 + _Stoptempfall3;
                double _Stopextratimetempfallll4 = _Stopsidlallloss4 + 0.5 * _StopLL4 + _Stoptempfall4;
                double _Stopextratimetempfallll5 = _Stopsidlallloss5 + 0.5 * _StopLL5 + _Stoptempfall5;

                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetempfallll1 = Stopsidlallloss1 + 0.5 x StopLL1 + Stoptempfall1"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss1, _StopLL1, _Stoptempfall1));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetempfallll1));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetempfallll2 = Stopsidlallloss2 + 0.5 x StopLL2 + Stoptempfall2"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss2, _StopLL2, _Stoptempfall2));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetempfallll2));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetempfallll3 = Stopsidlallloss3 + 0.5 x StopLL3 + Stoptempfall3"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss3, _StopLL3, _Stoptempfall3));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetempfallll3));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetempfallll4 = Stopsidlallloss4 + 0.5 x StopLL4 + Stoptempfall4"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss4, _StopLL4, _Stoptempfall4));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetempfallll4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetempfallll5 = Stopsidlallloss5 + 0.5 x StopLL5 + Stoptempfall5"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Stopsidlallloss5, _StopLL5, _Stoptempfall5));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Stopextratimetempfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetempfallll1 = {0:f3} Ton/Sq.m., Stopextratimetempfallll2 = {1:f3} Ton/Sq.m. ", _Stopextratimetempfallll1, _Stopextratimetempfallll2));
                list.Add(string.Format("Stopextratimetempfallll3 = {0:f3} Ton/Sq.m., Stopextratimetempfallll4 = {1:f3} Ton/Sq.m. ", _Stopextratimetempfallll3, _Stopextratimetempfallll4));
                list.Add(string.Format("Stopextratimetempfallll5 = {0:f3} Ton/Sq.m.", _Stopextratimetempfallll5));
                #endregion STEP 6.58 : Service stage Top  Stresses  without extra time dependent loss with temperature fall& 50% Liveload

                #region STEP 6.59 : Service stage Bottom Stresses without extra time dependent loss with temperature fall& 50% Liveload
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.59 : Service stage Bottom Stresses without extra time dependent loss with temperature fall& 50% Liveload"));
                list.Add(string.Format("-----------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Bottom Stresses after SIDL & all Losses (From STEP 6.45)"));
                list.Add(string.Format("-----------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomsidlallloss1={0:f3}, Sbottomsidlallloss2={1:f3}, Sbottomsidlallloss3={2:f3}, Sbottomsidlallloss4={3:f3},Sbottomsidlallloss5={4:f3} ",
                   _Sbottomsidlallloss1, _Sbottomsidlallloss2, _Sbottomsidlallloss3, _Sbottomsidlallloss4, _Sbottomsidlallloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses at Sections due to LL (From  STEP 6.49)"));
                list.Add(string.Format("--------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("SbottomLL1={0:f3}, SbottomLL2={1:f3}, SbottomLL3={2:f3}, SbottomLL4={3:f3},SbottomLL5={4:f3} ",
                 _SbottomLL1, _SbottomLL2, _SbottomLL3, _SbottomLL4, _SbottomLL5));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom stress due to temp-fall (From  STEP 6.51)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomtempfall1={0:f3}, Sbottomtempfall2={1:f3}, Sbottomtempfall3={2:f3}, Sbottomtempfall4={3:f3},Sbottomtempfall5={4:f3} ",
                 _Sbottomtempfall1, _Sbottomtempfall2, _Sbottomtempfall3, _Sbottomtempfall4, _Sbottomtempfall5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses without extra time dependent loss with temperature fall& 50% Liveload"));
                list.Add(string.Format(""));
                double _Sbottomextratimetempfallll1 = _Sbottomsidlallloss1 + 0.5 * _SbottomLL1 + _Sbottomtempfall1;
                double _Sbottomextratimetempfallll2 = _Sbottomsidlallloss2 + 0.5 * _SbottomLL2 + _Sbottomtempfall2;
                double _Sbottomextratimetempfallll3 = _Sbottomsidlallloss3 + 0.5 * _SbottomLL3 + _Sbottomtempfall3;
                double _Sbottomextratimetempfallll4 = _Sbottomsidlallloss4 + 0.5 * _SbottomLL4 + _Sbottomtempfall4;
                double _Sbottomextratimetempfallll5 = _Sbottomsidlallloss5 + 0.5 * _SbottomLL5 + _Sbottomtempfall5;

                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetempfallll1 = Sbottomsidlallloss1 + 0.5 x SbottomLL1 + Sbottomtempfall1"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss1, _SbottomLL1, _Sbottomtempfall1));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetempfallll1));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetempfallll2 = Sbottomsidlallloss2 + 0.5 x SbottomLL2 + Sbottomtempfall2"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss2, _SbottomLL2, _Sbottomtempfall2));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetempfallll2));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetempfallll3 = Sbottomsidlallloss3 + 0.5 x SbottomLL3 + Sbottomtempfall3"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss3, _SbottomLL3, _Sbottomtempfall3));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetempfallll3));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetempfallll4 = Sbottomsidlallloss4 + 0.5 x SbottomLL4 + Sbottomtempfall4"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss4, _SbottomLL4, _Sbottomtempfall4));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetempfallll4));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetempfallll5 = Sbottomsidlallloss5 + 0.5 x SbottomLL5 + Sbottomtempfall5"));
                list.Add(string.Format("                         = {0:f3} + 0.5 x {1:f3} + {2:f3}", _Sbottomsidlallloss5, _SbottomLL5, _Sbottomtempfall5));
                list.Add(string.Format("                         = {0:f3} Ton/Sq.m.", _Sbottomextratimetempfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetempfallll1 = {0:f3} Ton/Sq.m., Sbottomextratimetempfallll2 = {1:f3} Ton/Sq.m. ", _Sbottomextratimetempfallll1, _Sbottomextratimetempfallll2));
                list.Add(string.Format("Sbottomextratimetempfallll3 = {0:f3} Ton/Sq.m., Sbottomextratimetempfallll4 = {1:f3} Ton/Sq.m. ", _Sbottomextratimetempfallll3, _Sbottomextratimetempfallll4));
                list.Add(string.Format("Sbottomextratimetempfallll5 = {0:f3} Ton/Sq.m.", _Sbottomextratimetempfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                #endregion STEP 6.59 : Service stage checks without extra time dependent loss with temperature fall& 50% Liveload

                #region STEP 6.60 : Service stage checks without extra time dependent loss with temperature fall& 50% Liveload
                list.Add(string.Format("STEP 6.60 : Service stage checks without extra time dependent loss with temperature fall& 50% Liveload"));
                list.Add(string.Format("------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top Stresses (From  STEP 6.55)"));
                list.Add(string.Format("--------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetempfallll1 = {0:f3}, Stopextratimetempfallll2 = {1:f3}, Stopextratimetempfallll3 =  {2:f3}, ", _Stopextratimetempfallll1, _Stopextratimetempfallll2, _Stopextratimetempfallll3));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetempfallll4 = {0:f3}, Stopextratimetempfallll5 = {1:f3}", _Stopextratimetempfallll4, _Stopextratimetempfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses (From STEP 6.56)"));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetempfallll1 = {0:f3}, Sbottomextratimetempfallll2 = {1:f3}, Sbottomextratimetempfallll3 =  {2:f3}, ", _Sbottomextratimetempfallll1, _Sbottomextratimetempfallll2, _Sbottomextratimetempfallll3));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetempfallll4 = {0:f3}, Sbottomextratimetempfallll5 = {1:f3}", _Sbottomextratimetempfallll4, _Sbottomextratimetempfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _comp_stress = _fc_serv * 1.15;
                list.Add(string.Format("Service Stage compressive stress = fc_serv = {0:f3} * 1.15 MPa = {1:f3} MPa, Modulas of Rupture = {2:f3}", _fc_serv, _comp_stress, Modrup));
                list.Add(string.Format(""));

                #region Check at Support
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Support :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopextratimetempfallll1 / 100) > Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll1/100) > {0:f3} ) NOT OK, Stopextratimetempfallll1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(Modrup), _Stopextratimetempfallll1, Math.Abs(_Stopextratimetempfallll1 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll1 / 100) < Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll1/100) < {0:f3} ) OK, Stopextratimetempfallll1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(Modrup), _Stopextratimetempfallll1, Math.Abs(_Stopextratimetempfallll1 / 100)));
                }
                if (Math.Abs(_Stopextratimetempfallll1 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll1/100) < {0:f3} ) OK, Stopextratimetempfallll1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll1, Math.Abs(_Stopextratimetempfallll1 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll1 / 100) > Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll1/100) > {0:f3} ) NOT OK, Stopextratimetempfallll1/100 = {0:f3}/100 = {1:f3}, NOT OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll1, Math.Abs(_Stopextratimetempfallll1 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll1 / 100) > Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll1/100) > {0:f3} ) OK, Sbottomextratimetempfallll1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(Modrup), _Sbottomextratimetempfallll1, Math.Abs(_Sbottomextratimetempfallll1 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll1 / 100) < Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll1/100) < {0:f3} ) NOT OK, Sbottomextratimetempfallll1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(Modrup), _Sbottomextratimetempfallll1, Math.Abs(_Sbottomextratimetempfallll1 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll1 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll1/100) < {0:f3}) OK, Sbottomextratimetempfallll1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll1, Math.Abs(_Sbottomextratimetempfallll1 / 100)));
                }
                else if ((_Sbottomextratimetempfallll1 / 100) > _comp_stress)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll1/100) > {0:f3}) NOT OK, Sbottomextratimetempfallll1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll1, Math.Abs(_Sbottomextratimetempfallll1 / 100)));
                }

                //list.Add(string.Format("If((Sbottomextratimetempfallll1/100) > 0.0 ) OK, Sbottomextratimetempfallll1/100 =607.45/100=6.08, OK,"));
                //list.Add(string.Format("If((Sbottomextratimetempfallll1/100) < 15.48) OK, Sbottomextratimetempfallll1/100 =607.45/100 = 6.08, OK,"));
                list.Add(string.Format(""));
                #endregion Check at Support

                #region Check at Span/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/8 :"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopextratimetempfallll2 / 100) > Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll2/100) > {0:f3} ) NOT OK, Stopextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(Modrup), _Stopextratimetempfallll2, Math.Abs(_Stopextratimetempfallll2 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll2 / 100) < Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll2/100) < {0:f3} ) OK, Stopextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(Modrup), _Stopextratimetempfallll2, Math.Abs(_Stopextratimetempfallll2 / 100)));
                }
                if (Math.Abs(_Stopextratimetempfallll2 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll2/100) < {0:f3} ) OK, Stopextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll2, Math.Abs(_Stopextratimetempfallll2 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll2 / 100) > Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll2/100) > {0:f3} ) NOT OK, Stopextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll2, Math.Abs(_Stopextratimetempfallll2 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll2 / 100) > Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll2/100) > {0:f3} ) OK, Sbottomextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(Modrup), _Sbottomextratimetempfallll2, Math.Abs(_Sbottomextratimetempfallll2 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll2 / 100) < Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll2/100) < {0:f3} ) NOT OK, Sbottomextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(Modrup), _Sbottomextratimetempfallll2, Math.Abs(_Sbottomextratimetempfallll2 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll2 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll2/100) < {0:f3} ) OK, Sbottomextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll2, Math.Abs(_Sbottomextratimetempfallll2 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll2 / 100) > Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll2/100) > {0:f3} ) NOT OK, Sbottomextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll2, Math.Abs(_Sbottomextratimetempfallll2 / 100)));
                }

                //list.Add(string.Format("If((Sbottomextratimetempfallll1/100) > 0.0 ) OK, Sbottomextratimetempfallll1/100 =607.45/100=6.08, OK,"));
                //list.Add(string.Format("If((Sbottomextratimetempfallll1/100) < 15.48) OK, Sbottomextratimetempfallll1/100 =607.45/100 = 6.08, OK,"));
                list.Add(string.Format(""));
                #endregion Check at Span/8
                list.Add(string.Format(""));
                #region Check at Span/4
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/4 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopextratimetempfallll3 / 100) > Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll3/100) > {0:f3} ) OK, Stopextratimetempfallll3/100 = {0:f3}/100 = {1:f3}, OK,", Math.Abs(-Modrup), _Stopextratimetempfallll3, Math.Abs(_Stopextratimetempfallll3 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll3 / 100) < Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll3/100) < {0:f3} ) NOT OK, Stopextratimetempfallll3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(-Modrup), _Stopextratimetempfallll3, Math.Abs(_Stopextratimetempfallll3 / 100)));
                }
                if (Math.Abs(_Stopextratimetempfallll3 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll3/100) < {0:f3} ) OK, Stopextratimetempfallll3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll3, Math.Abs(_Stopextratimetempfallll3 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll3 / 100) > Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll3/100) > {0:f3} ) NOT OK, Stopextratimetempfallll3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll3, Math.Abs(_Stopextratimetempfallll3 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll3 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll3/100) > {0:f3} ) OK, Sbottomextratimetempfallll3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(-Modrup), _Sbottomextratimetempfallll3, Math.Abs(_Sbottomextratimetempfallll3 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll3 / 100) < Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll3/100) < {0:f3} ) NOT OK, Sbottomextratimetempfallll3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(-Modrup), _Sbottomextratimetempfallll3, Math.Abs(_Sbottomextratimetempfallll3 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll3 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll3/100) < {0:f3}) OK, Sbottomextratimetempfallll3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll3, Math.Abs(_Sbottomextratimetempfallll3 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll3 / 100) > Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll3/100) > {0:f3}) NOT OK, Sbottomextratimetempfallll3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll3, Math.Abs(_Sbottomextratimetempfallll3 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Span/4
                list.Add(string.Format(""));
                #region Check at Span3/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span3/8 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if (Math.Abs(_Stopextratimetempfallll4 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll4/100) > {0:f3} ) OK, Stopextratimetempfallll4/100 = {0:f3}/100 = {1:f3}, OK,", Math.Abs(-Modrup), _Stopextratimetempfallll4, Math.Abs(_Stopextratimetempfallll4 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll4 / 100) < Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll4/100) < {0:f3} ) NOT OK, Stopextratimetempfallll4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(-Modrup), _Stopextratimetempfallll4, Math.Abs(_Stopextratimetempfallll4 / 100)));
                }
                if (Math.Abs(_Stopextratimetempfallll4 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll4/100) < {0:f3} ) OK, Stopextratimetempfallll4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll4, Math.Abs(_Stopextratimetempfallll4 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll4 / 100) > Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll4/100) > {0:f3} ) NOT OK, Stopextratimetempfallll4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll4, Math.Abs(_Stopextratimetempfallll4 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll4 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll4/100) > {0:f3} ) OK, Sbottomextratimetempfallll4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(-Modrup), _Sbottomextratimetempfallll4, Math.Abs(_Sbottomextratimetempfallll4 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll4 / 100) < Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll4/100) < {0:f3} ) NOT OK, Sbottomextratimetempfallll4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(-Modrup), _Sbottomextratimetempfallll4, Math.Abs(_Sbottomextratimetempfallll4 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll4 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll4/100) < {0:f3}) OK, Sbottomextratimetempfallll4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll4, Math.Abs(_Sbottomextratimetempfallll4 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll4 / 100) > Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll4/100) > {0:f3}) NOT OK, Sbottomextratimetempfallll4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll4, Math.Abs(_Sbottomextratimetempfallll4 / 100)));
                }

                list.Add(string.Format(""));
                #endregion Check at Span3/8
                list.Add(string.Format(""));
                #region Check at Span/2
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span /2 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));
                if (Math.Abs(_Stopextratimetempfallll5 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll5/100) > {0:f3} ) OK, Stopextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(-Modrup), _Stopextratimetempfallll5, Math.Abs(_Stopextratimetempfallll5 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll5 / 100) < Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll5/100) < {0:f3} ) NOT OK, Stopextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(-Modrup), _Stopextratimetempfallll5, Math.Abs(_Stopextratimetempfallll5 / 100)));
                }
                if (Math.Abs(_Stopextratimetempfallll5 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll5/100) < {0:f3} ) OK, Stopextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll5, Math.Abs(_Stopextratimetempfallll5 / 100)));
                }
                else if (Math.Abs(_Stopextratimetempfallll5 / 100) > Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetempfallll5/100) < {0:f3} ) NOT OK, Stopextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_comp_stress), _Stopextratimetempfallll5, Math.Abs(_Stopextratimetempfallll5 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll5 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll5/100) > {0:f3} ) OK, Sbottomextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(-Modrup), _Sbottomextratimetempfallll5, Math.Abs(_Sbottomextratimetempfallll5 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll5 / 100) < Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll5/100) < {0:f3} ) NOT OK, Sbottomextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(-Modrup), _Sbottomextratimetempfallll5, Math.Abs(_Sbottomextratimetempfallll5 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll5 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll5/100) < {0:f3}) OK, Sbottomextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll5, Math.Abs(_Sbottomextratimetempfallll5 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll5 / 100) > Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll5/100) > {0:f3}) NOT OK, Sbottomextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_comp_stress), _Sbottomextratimetempfallll5, Math.Abs(_Sbottomextratimetempfallll5 / 100)));
                }

                //list.Add(string.Format("If((Sbottomextratimetempfallll1/100) > 0.0 ) OK, Sbottomextratimetempfallll1/100 =607.45/100=6.08, OK,"));
                //list.Add(string.Format("If((Sbottomextratimetempfallll1/100) < 15.48) OK, Sbottomextratimetempfallll1/100 =607.45/100 = 6.08, OK,"));
                list.Add(string.Format(""));
                #endregion Check at Span/2
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("NOTE : TENSION IS ALLOWED IN TEMP. CASE IN DECK SLAB,  (STRESS<MODULUS OF RUPTURE), "));
                list.Add(string.Format("FOR WHICH UNTENSIONED STEEL IS PROVIDED"));
                list.Add(string.Format(""));
                #endregion STEP 6.60 : Service stage checks without extra time dependent loss with temperature fall& 50% Liveload

                #region STEP 6.61 : Relaxation Loss
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.61 : Relaxation Loss"));
                list.Add(string.Format("----------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Extra Time Dependent Loss = T_loss = {0:f3}%   (Tab1 User Input data 14)", T_loss));
                double _Extimeloss = _fact_ex_tm;
                list.Add(string.Format("Factor for extra time dependent loss considered = Extimeloss = {0:f3} (Tab2 User Input data B 28)", _Extimeloss));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Relaxation Loss (Tons) = Retot = {0:f3} Tons  (From  STEP 6.14)", _Retot));
                list.Add(string.Format(""));
                list.Add(string.Format("Percentage of Relaxation Loss in 4 hours = Re4 = {0:f3} %  (From  STEP 6.15)", _Re4));
                list.Add(string.Format(""));
                list.Add(string.Format("Percentage of Relaxation Loss in {0} to {1} days = Reperloss= {2:f3}  (From  STEP 6.23)", fsp_day, cwccb_day, _Reperloss));
                list.Add(string.Format(""));
                list.Add(string.Format("Percentage of Residual Relaxation Loss ({0} days to infinity) = Reresperloss = {1:f3} (From Input Tab 2, A 3)", cwccb_day, _Reresperloss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _RelaxationLoss = (_Extimeloss - 1) * _Retot * (_Re4 + _Reperloss + _Reresperloss) / 100.0;
                list.Add(string.Format("RelaxationLoss = (Extimeloss - 1) x Retot x (Re4 + Reperloss + Reresperloss)/100"));
                list.Add(string.Format("               = ({0:f4} - 1) x {1:f4} x ({2:f4} + {3:f4} + {4:f4})/100", _Extimeloss, _Retot, _Re4, _Reperloss, _Reresperloss));
                list.Add(string.Format("               = {0:f4}", _RelaxationLoss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.61 : Relaxation Loss

                #region STEP 6.62 : Creep Loss
                list.Add(string.Format("STEP 6.62 : Creep Loss "));
                list.Add(string.Format("-----------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Extra Time Dependent Loss = T_loss = {0}% (Tab1 User Input data 14)", T_loss));
                list.Add(string.Format("Factor for extra time dependent loss considered = Extimeloss = {0} (Tab2 User Input data B 28)", _Extimeloss));
                list.Add(string.Format("Losses due to Creep ({0}-{1} days) = Creeploss1456 = {2:f3} (From  STEP 6.23)", fsp_day, cwccb_day, _Creeploss1456));
                list.Add(string.Format("Creep Loss at {0} days to infinity = Crloss56 = {1:f3} Ton (From  STEP 6.41)", cwccb_day, _Crloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _CreepLoss = ((_Extimeloss - 1) * (_Creeploss1456 + _Crloss56));
                list.Add(string.Format(""));
                list.Add(string.Format("CreepLoss = (Extimeloss -1)*( Creeploss1456+ Crloss56)"));
                list.Add(string.Format("          = ({0} - 1)*( {1:f3} + {2:f3})", _Extimeloss, _Creeploss1456, _Crloss56));
                list.Add(string.Format("          = {0:f3}", _CreepLoss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.62 : Creep Loss

                #region STEP 6.63 : Shrinkage Loss
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.63 : Shrinkage Loss"));
                list.Add(string.Format("---------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Extra Time Dependent Loss = T_loss = {0}% (Tab1 User Input data 14)", T_loss));
                list.Add(string.Format("Factor for extra time dependent loss considered = Extimeloss = {0:f3} (Tab2 User Input data B 28)", _Extimeloss));
                list.Add(string.Format("Shrinkage Loss in 14 to 56 days = Shrinkloss1456 = {0:f3} (From  STEP 6.23)", _Shrinkloss1456));
                list.Add(string.Format("Shrinkage Loss at 56 days to infinity = Shloss56 = {0:f3} Ton (From  STEP 6.41)", _Shloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _ShrinkageLoss = ((_Extimeloss - 1) * (_Shrinkloss1456 + _Shloss56));
                list.Add(string.Format("ShrinkageLoss = (Extimeloss -1)*( _Shrinkloss1456+ _Shloss56)"));
                list.Add(string.Format("              = ({0} - 1)*( {1:f3} + {2:f3})", _Extimeloss, _Shrinkloss1456, _Shloss56));
                list.Add(string.Format("              = {0:f3}", _ShrinkageLoss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.63 : Shrinkage Loss

                #region STEP 6.64 : Top Stresses due to extra Losses in Prestress
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.64 : Top Stresses due to extra Losses in Prestress"));
                list.Add(string.Format("----------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("RelaxationLoss = {0:f4} (From  STEP 6.61)", _RelaxationLoss));
                list.Add(string.Format("CreepLoss = {0:f4} (From  STEP 6.62)", _CreepLoss));
                list.Add(string.Format("ShrinkageLoss = {0:f4} (From  STEP 6.63)", _ShrinkageLoss));
                list.Add(string.Format("Area, A = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} (From  STEP 2, TABLE 4)", _A1, _A2, _A3, _A4, _A5));
                list.Add(string.Format("CG from soffit, Yb = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} (From  STEP 2, TABLE 4)", _Yb1, _Yb2, _Yb3, _Yb4, _Yb5));
                list.Add(string.Format("Eccentricities = Ecc = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} (From  STEP 6.6)", _Ecc1, _Ecc2, _Ecc3, _Ecc4, _Ecc5));
                list.Add(string.Format("Zt = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} (From  STEP 2, TABLE 4)", Zt.F1, Zt.F3, Zt.F4, Zt.F5, Zt.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses "));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));
                double _Stopextraloss1 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A1 - (_Yb1 - _Ecc1) / Zt.F1);
                list.Add(string.Format("Stopextraloss1 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zt)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A1, _Yb1, _Ecc1, Zt.F1));
                list.Add(string.Format("               = {0:f3}", _Stopextraloss1));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                double _Stopextraloss2 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A2 - (_Yb2 - _Ecc2) / Zt.F3);
                list.Add(string.Format("Stopextraloss2 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zt)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A2, _Yb2, _Ecc2, Zt.F3));
                list.Add(string.Format("               = {0:f3}", _Stopextraloss2));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                double _Stopextraloss3 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A3 - (_Yb3 - _Ecc3) / Zt.F4);
                list.Add(string.Format("Stopextraloss3 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zt)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A3, _Yb3, _Ecc3, Zt.F4));
                list.Add(string.Format("               = {0:f3}", _Stopextraloss3));
                list.Add(string.Format(""));



                list.Add(string.Format(""));
                double _Stopextraloss4 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A4 - (_Yb4 - _Ecc4) / Zt.F5);
                list.Add(string.Format("Stopextraloss4 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zt)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A4, _Yb4, _Ecc4, Zt.F5));
                list.Add(string.Format("               = {0:f3}", _Stopextraloss4));
                list.Add(string.Format(""));



                list.Add(string.Format(""));
                double _Stopextraloss5 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A5 - (_Yb5 - _Ecc5) / Zt.F6);
                list.Add(string.Format("Stopextraloss5 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zt)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A5, _Yb5, _Ecc5, Zt.F6));
                list.Add(string.Format("               = {0:f3}", _Stopextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextraloss1= {0:f3} , Stopextraloss2 = {1:f3}, Stopextraloss3 = {2:f3}, Stopextraloss4= {3:f3},  Stopextraloss5= {4:f3}",
                    _Stopextraloss1, _Stopextraloss2, _Stopextraloss3, _Stopextraloss4, _Stopextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.64 : Top Stresses due to extra Losses in Prestress


                #region STEP 6.65 : Bottom Stresses due to extra Losses in Prestress
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.65 : Bottom Stresses due to extra Losses in Prestress"));
                list.Add(string.Format("------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("CreepLoss = {0:f4} (From  STEP 6.62)", _CreepLoss));
                list.Add(string.Format("ShrinkageLoss = {0:f4} (From  STEP 6.63)", _ShrinkageLoss));
                list.Add(string.Format("Area, A = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} (From  STEP 2, TABLE 4)", _A1, _A2, _A3, _A4, _A5));
                list.Add(string.Format("CG from soffit, Yb = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} (From  STEP 2, TABLE 4)", _Yb1, _Yb2, _Yb3, _Yb4, _Yb5));
                list.Add(string.Format("Eccentricities = Ecc = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} (From  STEP 6.6)", _Ecc1, _Ecc2, _Ecc3, _Ecc4, _Ecc5));
                list.Add(string.Format("Zb = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} (From  STEP 2, TABLE 4)", Zb.F1, Zb.F3, Zb.F4, Zb.F5, Zb.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses "));
                list.Add(string.Format("----------------"));
                list.Add(string.Format(""));
                double _Sbottomextraloss1 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A1 - (_Yb1 - _Ecc1) / Zb.F1);
                list.Add(string.Format("Sbottomextraloss1 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zb)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A1, _Yb1, _Ecc1, Zb.F1));
                list.Add(string.Format("               = {0:f3}", _Sbottomextraloss1));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                double _Sbottomextraloss2 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A2 - (_Yb2 - _Ecc2) / Zb.F3);
                list.Add(string.Format("Sbottomextraloss2 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zb)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A2, _Yb2, _Ecc2, Zb.F3));
                list.Add(string.Format("               = {0:f3}", _Sbottomextraloss2));
                list.Add(string.Format(""));



                list.Add(string.Format(""));
                double _Sbottomextraloss3 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A3 - (_Yb3 - _Ecc3) / Zb.F4);
                list.Add(string.Format("Sbottomextraloss3 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zb)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A3, _Yb3, _Ecc3, Zb.F4));
                list.Add(string.Format("               = {0:f3}", _Sbottomextraloss3));
                list.Add(string.Format(""));



                list.Add(string.Format(""));
                double _Sbottomextraloss4 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A4 - (_Yb4 - _Ecc4) / Zb.F5);
                list.Add(string.Format("Sbottomextraloss4 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zb)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A4, _Yb4, _Ecc4, Zb.F5));
                list.Add(string.Format("               = {0:f3}", _Sbottomextraloss4));
                list.Add(string.Format(""));



                list.Add(string.Format(""));
                double _Sbottomextraloss5 = -(_RelaxationLoss + _CreepLoss + _ShrinkageLoss) * (1 / _A5 - (_Yb5 - _Ecc5) / Zb.F6);
                list.Add(string.Format("Sbottomextraloss5 = -( RelaxationLoss + CreepLoss + ShrinkageLoss) x (1/ A -( Yb - Ecc)/ Zb)"));
                list.Add(string.Format(""));
                list.Add(string.Format("               = -({0:f3} + {1:f3} + {2:f3})*(1/ {3:f3} -({4:f3}- {5:f3})/ {6:f3})",
                    _RelaxationLoss, _CreepLoss, _ShrinkageLoss, _A5, _Yb5, _Ecc5, Zb.F6));
                list.Add(string.Format("               = {0:f3}", _Sbottomextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextraloss1= {0:f3} , Sbottomextraloss2 = {1:f3}, Sbottomextraloss3 = {2:f3}, Sbottomextraloss4= {3:f3},  Sbottomextraloss5= {4:f3}",
                    _Sbottomextraloss1, _Sbottomextraloss2, _Sbottomextraloss3, _Sbottomextraloss4, _Sbottomextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                #endregion STEP 6.65 : Bottom Stresses due to extra Losses in Prestress


                #region STEP 6.66 : Service stage Top Stresses with extra time dependent loss without temperature load
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.66 : Service stage Top Stresses with extra time dependent loss without temperature load"));
                list.Add(string.Format("-----------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top Stresses without extra time dependent loss without temperature (From STEP 6.52)"));
                list.Add(string.Format("--------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopnoextratime1 = {0:f4}, Stopnoextratime2 = {1:f4}, Stopnoextratime3 = {2:f4}", _Stopnoextratime1, _Stopnoextratime2, _Stopnoextratime3));
                list.Add(string.Format("Stopnoextratime4 = {0:f4}, Stopnoextratime5 = {1:f4}", _Stopnoextratime4, _Stopnoextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses due to extra Losses in Prestress (From STEP 6.64)"));
                list.Add(string.Format("----------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextraloss1 = {0:f4}, Stopextraloss2 = {1:f4}, Stopextraloss3 = {2:f4}", _Stopextraloss1, _Stopextraloss2, _Stopextraloss3));
                list.Add(string.Format("Stopextraloss4 = {0:f4}, Stopextraloss5 = {1:f4}", _Stopextraloss4, _Stopextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top Stresses with extra time dependent loss without temperature load"));
                list.Add(string.Format("-----------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses"));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));
                double _Stopextratime1 = _Stopnoextratime1 + _Stopextraloss1;
                double _Stopextratime2 = _Stopnoextratime2 + _Stopextraloss2;
                double _Stopextratime3 = _Stopnoextratime3 + _Stopextraloss3;
                double _Stopextratime4 = _Stopnoextratime4 + _Stopextraloss4;
                double _Stopextratime5 = _Stopnoextratime5 + _Stopextraloss5;
                list.Add(string.Format("Stopextratime1= Stopnoextratime1+ Stopextraloss1 = {0:f4} + ({1:f3}) = {2:f3}", _Stopnoextratime1, _Stopextraloss1, _Stopextratime1));
                list.Add(string.Format("Stopextratime2= Stopnoextratime2+ Stopextraloss2 = {0:f4} + ({1:f3}) = {2:f3}", _Stopnoextratime2, _Stopextraloss2, _Stopextratime2));
                list.Add(string.Format("Stopextratime3= Stopnoextratime3+ Stopextraloss3 = {0:f4} + ({1:f3}) = {2:f3}", _Stopnoextratime3, _Stopextraloss3, _Stopextratime3));
                list.Add(string.Format("Stopextratime4= Stopnoextratime4+ Stopextraloss4 = {0:f4} + ({1:f3}) = {2:f3}", _Stopnoextratime4, _Stopextraloss4, _Stopextratime4));
                list.Add(string.Format("Stopextratime5= Stopnoextratime5+ Stopextraloss5 = {0:f4} + ({1:f3}) = {2:f3}", _Stopnoextratime5, _Stopextraloss5, _Stopextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratime1 = {0:f4}, Stopextratime2 = {1:f4}, Stopextratime3 = {2:f4}", _Stopextratime1, _Stopextratime2, _Stopextratime3));
                list.Add(string.Format("Stopextratime4 = {0:f4}, Stopextratime5 = {1:f4}", _Stopextratime4, _Stopextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.66 : Service stage Top Stresses with extra time dependent loss without temperature load

                #region STEP 6.67 : Service stage Bottom Stresses with extra time dependent loss without temperature load
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.67 : Service stage Bottom Stresses with extra time dependent loss without temperature load"));
                list.Add(string.Format("-------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses without extra time dependent loss without temperature (From STEP 6.53)"));
                list.Add(string.Format("----------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomnoextratime1 = {0:f4}, Sbottomnoextratime2 = {1:f4}, Sbottomnoextratime3 = {2:f4}", _Sbottomnoextratime1, _Sbottomnoextratime2, _Sbottomnoextratime3));
                list.Add(string.Format("Sbottomnoextratime4 = {0:f4}, Sbottomnoextratime5 = {1:f4}", _Sbottomnoextratime4, _Sbottomnoextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses due to extra Losses in Prestress (From STEP 6.65)"));
                list.Add(string.Format("----------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextraloss1 = {0:f4}, Sbottomextraloss2 = {1:f4}, Sbottomextraloss3 = {2:f4}", _Sbottomextraloss1, _Sbottomextraloss2, _Sbottomextraloss3));
                list.Add(string.Format("Sbottomextraloss4 = {0:f4}, Sbottomextraloss5 = {1:f4}", _Sbottomextraloss4, _Sbottomextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses with extra time dependent loss without temperature load"));
                list.Add(string.Format("-----------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));
                double _Sbottomextratime1 = _Sbottomnoextratime1 + _Sbottomextraloss1;
                double _Sbottomextratime2 = _Sbottomnoextratime2 + _Sbottomextraloss2;
                double _Sbottomextratime3 = _Sbottomnoextratime3 + _Sbottomextraloss3;
                double _Sbottomextratime4 = _Sbottomnoextratime4 + _Sbottomextraloss4;
                double _Sbottomextratime5 = _Sbottomnoextratime5 + _Sbottomextraloss5;
                list.Add(string.Format("Sbottomextratime1= Sbottomnoextratime1+ Sbottomextraloss1 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomnoextratime1, _Sbottomextraloss1, _Sbottomextratime1));
                list.Add(string.Format("Sbottomextratime2= Sbottomnoextratime2+ Sbottomextraloss2 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomnoextratime2, _Sbottomextraloss2, _Sbottomextratime2));
                list.Add(string.Format("Sbottomextratime3= Sbottomnoextratime3+ Sbottomextraloss3 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomnoextratime3, _Sbottomextraloss3, _Sbottomextratime3));
                list.Add(string.Format("Sbottomextratime4= Sbottomnoextratime4+ Sbottomextraloss4 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomnoextratime4, _Sbottomextraloss4, _Sbottomextratime4));
                list.Add(string.Format("Sbottomextratime5= Sbottomnoextratime5+ Sbottomextraloss5 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomnoextratime5, _Sbottomextraloss5, _Sbottomextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratime1 = {0:f4}, Sbottomextratime2 = {1:f4}, Sbottomextratime3 = {2:f4}", _Sbottomextratime1, _Sbottomextratime2, _Sbottomextratime3));
                list.Add(string.Format("Sbottomextratime4 = {0:f4}, Sbottomextratime5 = {1:f4}", _Sbottomextratime4, _Sbottomextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.67 : Service stage Bottom Stresses with extra time dependent loss without temperature load

                #region STEP 6.68 : Service stage Checks with extra time dependent loss without temperature load
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.68 : Service stage Checks with extra time dependent loss without temperature load"));
                list.Add(string.Format("-----------------------------------------------------------------------------------------"));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top Stresses with extra time dependent loss without temperature load    (From STEP 6.66)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Stopextratime1 = {0:f3}, Stopextratime2 = {1:f3}, Stopextratime3 =  {2:f3}, ", _Stopextratime1, _Stopextratime2, _Stopextratime3));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratime4 = {0:f3}, Stopextratime5 = {1:f3}", _Stopextratime4, _Stopextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses with extra time dependent loss without temperature load   (From STEP 6.67)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Sbottomextratime1 = {0:f3}, Sbottomextratime2 = {1:f3}, Sbottomextratime3 =  {2:f3}, ", _Sbottomextratime1, _Sbottomextratime2, _Sbottomextratime3));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratime4 = {0:f3}, Sbottomextratime5 = {1:f3}", _Sbottomextratime4, _Sbottomextratime5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Scompservice = _fc_serv;
                list.Add(string.Format("Service Stage compressive stress = Scompservice = {0:f3} MPa (From Tab 2, User Input Data  B (26))", _Scompservice));
                list.Add(string.Format(""));



                #region Check at Support
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Support :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if ((_Stopextratime1 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Stopextratime1/100) > 0.0 ) OK, Stopextratime1/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratime1, (_Stopextratime1 / 100)));
                }
                else if ((_Stopextratime1 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Stopextratime1/100) < 0.0 ) NOT OK, Stopextratime1/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratime1, (_Stopextratime1 / 100)));
                }
                if (Math.Abs(_Stopextratime1 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime1/100) < {0:f3} (Scompservice) ) OK, Stopextratime1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_Scompservice), _Stopextratime1, Math.Abs(_Stopextratime1 / 100)));
                }
                else if (Math.Abs(_Stopextratime1 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime1/100) > {0:f3} (Scompservice) ) NOT OK, Stopextratime1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_Scompservice), _Stopextratime1, Math.Abs(_Stopextratime1 / 100)));
                }

                if ((_Sbottomextratimetempfallll1 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll1/100) > 0.0 ) OK, Sbottomextratimetempfallll1/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetempfallll1, (_Sbottomextratimetempfallll1 / 100)));
                }
                else if ((_Sbottomextratimetempfallll1 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll1/100) < 0.0 ) NOT OK, Sbottomextratimetempfallll1/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetempfallll1, (_Sbottomextratimetempfallll1 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll1 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll1/100) < {0:f3} (Scompservice)) OK, Sbottomextratimetempfallll1/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll1, Math.Abs(_Sbottomextratimetempfallll1 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll1 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll1/100) > {0:f3} (Scompservice)) NOT OK, Sbottomextratimetempfallll1/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll1, Math.Abs(_Sbottomextratimetempfallll1 / 100)));
                }
                list.Add(string.Format(""));
                #endregion Check at Support

                #region Check at Span/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/8 :"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));

                if ((_Stopextratime2 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Stopextratime2/100) > 0.0 ) OK, Stopextratime2/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratime2, (_Stopextratime2 / 100)));
                }
                else if ((_Stopextratime2 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Stopextratime2/100) < 0.0 ) NOT OK, Stopextratime2/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratime2, (_Stopextratime2 / 100)));
                }
                if (Math.Abs(_Stopextratime2 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime2/100) < {0:f3} (Scompservice) ) OK, Stopextratime2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_Scompservice), _Stopextratime2, Math.Abs(_Stopextratime2 / 100)));
                }
                else if (Math.Abs(_Stopextratime2 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime2/100) > {0:f3} (Scompservice) ) NOT OK, Stopextratime2/100 = {0:f3}/100 = {1:f3}, NOT OK,", Math.Abs(_Scompservice), _Stopextratime2, Math.Abs(_Stopextratime2 / 100)));
                }
                if ((_Sbottomextratimetempfallll2 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll2/100) > 0.0 ) OK, Sbottomextratimetempfallll2/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetempfallll2, (_Sbottomextratimetempfallll2 / 100)));
                }
                else if ((_Sbottomextratimetempfallll2 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll2/100) < 0.0 ) NOT OK, Sbottomextratimetempfallll2/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetempfallll2, (_Sbottomextratimetempfallll2 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll2 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll2/100) < {0:f3} (Scompservice)) OK, Sbottomextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll2, Math.Abs(_Sbottomextratimetempfallll2 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll2 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll2/100) > {0:f3} (Scompservice)) NOT OK, Sbottomextratimetempfallll2/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll2, Math.Abs(_Sbottomextratimetempfallll2 / 100)));
                }
                list.Add(string.Format(""));
                #endregion Check at Span/8

                #region Check at Span/4
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/4 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if ((_Stopextratime3 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Stopextratime3/100) > 0.0 ) OK, Stopextratime3/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratime3, (_Stopextratime3 / 100)));
                }
                else if ((_Stopextratime3 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Stopextratime3/100) < 0.0 ) NOT OK, Stopextratime3/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratime3, (_Stopextratime3 / 100)));
                }
                if (Math.Abs(_Stopextratime3 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime3/100) < {0:f3} (Scompservice) ) OK, Stopextratime3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_Scompservice), _Stopextratime3, Math.Abs(_Stopextratime3 / 100)));
                }
                else if (Math.Abs(_Stopextratime3 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime3/100) < {0:f3} (Scompservice) ) NOT OK, Stopextratime3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_Scompservice), _Stopextratime3, Math.Abs(_Stopextratime3 / 100)));
                }
                if ((_Sbottomextratimetempfallll3 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll3/100) > 0.0 ) OK, Sbottomextratimetempfallll3/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetempfallll3, (_Sbottomextratimetempfallll3 / 100)));
                }
                else if ((_Sbottomextratimetempfallll3 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll3/100) < 0.0 ) NOT OK, Sbottomextratimetempfallll3/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetempfallll3, (_Sbottomextratimetempfallll3 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll3 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll3/100) < {0:f3} (Scompservice)) OK, Sbottomextratimetempfallll3/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll3, Math.Abs(_Sbottomextratimetempfallll3 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll3 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll3/100) > {0:f3} (Scompservice)) NOT OK, Sbottomextratimetempfallll3/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll3, Math.Abs(_Sbottomextratimetempfallll3 / 100)));
                }
                list.Add(string.Format(""));
                #endregion Check at Span/4

                #region Check at Span3/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span3/8 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if ((_Stopextratime4 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Stopextratime4/100) > 0.0 ) OK, Stopextratime4/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratime4, (_Stopextratime4 / 100)));
                }
                else if ((_Stopextratime4 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Stopextratime4/100) < 0.0 ) NOT OK, Stopextratime4/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratime4, (_Stopextratime4 / 100)));
                }
                if (Math.Abs(_Stopextratime4 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime4/100) < {0:f3} (Scompservice) ) OK, Stopextratime4/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_Scompservice), _Stopextratime4, Math.Abs(_Stopextratime4 / 100)));
                }
                else if (Math.Abs(_Stopextratime4 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime4/100) > {0:f3} (Scompservice) ) NOT OK, Stopextratime4/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_Scompservice), _Stopextratime4, Math.Abs(_Stopextratime4 / 100)));
                }
                if ((_Sbottomextratimetempfallll4 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll4/100) > 0.0 ) OK, Sbottomextratimetempfallll4/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetempfallll4, (_Sbottomextratimetempfallll4 / 100)));
                }
                else if ((_Sbottomextratimetempfallll4 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll4/100) < 0.0 ) NOT OK, Sbottomextratimetempfallll4/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetempfallll4, (_Sbottomextratimetempfallll4 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll4 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll4/100) < {0:f3} (Scompservice)) OK, Sbottomextratimetempfallll4/100 = {0:f3}/100 = {1:f3}, OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll4, Math.Abs(_Sbottomextratimetempfallll4 / 100)));
                }
                else if (Math.Abs(_Sbottomextratimetempfallll4 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll4/100) > {0:f3} (Scompservice)) NOT OK, Sbottomextratimetempfallll4/100 = {0:f3}/100 = {1:f3}, NOT OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll4, Math.Abs(_Sbottomextratimetempfallll4 / 100)));
                }
                list.Add(string.Format(""));
                #endregion Check at Span3/8

                #region Check at Span/2
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span /2 :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                if ((_Stopextratime5 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Stopextratime5/100) > 0.0 ) OK, Stopextratime5/100 = {0:f3}/100 = {1:f3}, OK,", _Stopextratime5, (_Stopextratime5 / 100)));
                }
                else if ((_Stopextratime5 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Stopextratime5/100) < 0.0 ) NOT OK, Stopextratime5/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratime5, (_Stopextratime5 / 100)));
                }
                if (Math.Abs(_Stopextratime5 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime5/100) < {0:f3} (Scompservice) ) OK, Stopextratime5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_Scompservice), _Stopextratime5, Math.Abs(_Stopextratime5 / 100)));
                }
                else if (Math.Abs(_Stopextratime5 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Stopextratime5/100) < {0:f3} (Scompservice) ) NOT OK, Stopextratime5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_Scompservice), _Stopextratime5, Math.Abs(_Stopextratime5 / 100)));
                }
                if ((_Sbottomextratimetempfallll5 / 100) > 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll5/100) > 0.0 ) OK, Sbottomextratimetempfallll5/100 = {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetempfallll5, (_Sbottomextratimetempfallll5 / 100)));
                }
                else if ((_Sbottomextratimetempfallll5 / 100) < 0.0)
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll5/100) < 0.0 ) NOT OK, Sbottomextratimetempfallll5/100 = {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetempfallll5, (_Sbottomextratimetempfallll5 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll5 / 100) < Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll5/100) < {0:f3} (Scompservice)) OK, Sbottomextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll5, Math.Abs(_Sbottomextratimetempfallll5 / 100)));
                }
                if (Math.Abs(_Sbottomextratimetempfallll5 / 100) > Math.Abs(_Scompservice))
                {
                    list.Add(string.Format("If((Sbottomextratimetempfallll5/100) > {0:f3} (Scompservice)) NOT OK, Sbottomextratimetempfallll5/100 = {1:f3}/100 = {2:f3}, NOT OK,", Math.Abs(_Scompservice), _Sbottomextratimetempfallll5, Math.Abs(_Sbottomextratimetempfallll5 / 100)));
                }
                list.Add(string.Format(""));
                #endregion Check at Span/2

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("NOTE : TENSION IS ALLOWED IN TEMP. CASE IN DECK SLAB,  (STRESS<MODULUS OF RUPTURE), "));
                list.Add(string.Format("FOR WHICH UNTENSIONED STEEL IS PROVIDED"));
                list.Add(string.Format(""));
                #endregion STEP 6.60 : Service stage checks without extra time dependent loss with temperature fall& 50% Liveload

                list.Add(string.Format(""));
                list.Add(string.Format(""));

                #region STEP 6.69 : Service stage Top Stresses with extra time dependent loss with temperature rise and 50% Live load
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.69 : Service stage Top Stresses with extra time dependent loss with temperature rise and 50% Live load"));
                list.Add(string.Format("--------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top  Stresses  without extra time dependent loss with temperature rise& 50% Liveload (From STEP 6.55)"));
                list.Add(string.Format("------------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));

                list.Add(string.Format("Stopextratimetemprisell1 = {0:f4}, Stopextratimetemprisell2 = {1:f4}, Stopextratimetemprisell3 = {2:f4}", _Stopextratimetemprisell1, _Stopextratimetemprisell2, _Stopextratimetemprisell3));
                list.Add(string.Format("Stopextratimetemprisell4 = {0:f4}, Stopextratimetemprisell5 = {1:f4}", _Stopextratimetemprisell4, _Stopextratimetemprisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses due to extra Losses in Prestress (From STEP 6.64)"));
                list.Add(string.Format("----------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextraloss1 = {0:f4}, Stopextraloss2 = {1:f4}, Stopextraloss3 = {2:f4}", _Stopextraloss1, _Stopextraloss2, _Stopextraloss3));
                list.Add(string.Format("Stopextraloss4 = {0:f4}, Stopextraloss5 = {1:f4}", _Stopextraloss4, _Stopextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top Stresses with extra time dependent loss with temperature rise and 50% Live load"));
                list.Add(string.Format("-------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses"));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));
                double _Stopextratimetrisell1 = _Stopextratimetemprisell1 + _Stopextraloss1;
                double _Stopextratimetrisell2 = _Stopextratimetemprisell2 + _Stopextraloss2;
                double _Stopextratimetrisell3 = _Stopextratimetemprisell3 + _Stopextraloss3;
                double _Stopextratimetrisell4 = _Stopextratimetemprisell4 + _Stopextraloss4;
                double _Stopextratimetrisell5 = _Stopextratimetemprisell5 + _Stopextraloss5;
                list.Add(string.Format("Stopextratimetrisell1= Stopextratimetemprisell1+ Stopextraloss1 = {0:f4} + ({1:f3}) = {2:f3}", _Stopextratimetemprisell1, _Stopextraloss1, _Stopextratimetrisell1));
                list.Add(string.Format("Stopextratimetrisell2= Stopextratimetemprisell2+ Stopextraloss2 = {0:f4} + ({1:f3}) = {2:f3}", _Stopextratimetemprisell2, _Stopextraloss2, _Stopextratimetrisell2));
                list.Add(string.Format("Stopextratimetrisell3= Stopextratimetemprisell3+ Stopextraloss3 = {0:f4} + ({1:f3}) = {2:f3}", _Stopextratimetemprisell3, _Stopextraloss3, _Stopextratimetrisell3));
                list.Add(string.Format("Stopextratimetrisell4= Stopextratimetemprisell4+ Stopextraloss4 = {0:f4} + ({1:f3}) = {2:f3}", _Stopextratimetemprisell4, _Stopextraloss4, _Stopextratimetrisell4));
                list.Add(string.Format("Stopextratimetrisell5= Stopextratimetemprisell5+ Stopextraloss5 = {0:f4} + ({1:f3}) = {2:f3}", _Stopextratimetemprisell5, _Stopextraloss5, _Stopextratimetrisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetrisell1 = {0:f4}, Stopextratimetrisell2 = {1:f4}, Stopextratimetrisell3 = {2:f4}", _Stopextratimetrisell1, _Stopextratimetrisell2, _Stopextratimetrisell3));
                list.Add(string.Format("Stopextratimetrisell4 = {0:f4}, Stopextratimetrisell5 = {1:f4}", _Stopextratimetrisell4, _Stopextratimetrisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.66 : Service stage Top Stresses with extra time dependent loss without temperature load


                #region STEP 6.70 : Service stage Bottom Stresses with extra time dependent loss with temperature rise and 50% Live load
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.70 : Service stage Bottom Stresses with extra time dependent loss with temperature rise and 50% Live load"));
                list.Add(string.Format("----------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom  Stresses  without extra time dependent loss with temperature rise& 50% Liveload (From STEP 6.56)"));
                list.Add(string.Format("---------------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));

                list.Add(string.Format("Sbottomextratimetemprisell1 = {0:f4}, Sbottomextratimetemprisell2 = {1:f4}, Sbottomextratimetemprisell3 = {2:f4}", _Sbottomextratimetemprisell1, _Sbottomextratimetemprisell2, _Sbottomextratimetemprisell3));
                list.Add(string.Format("Sbottomextratimetemprisell4 = {0:f4}, Sbottomextratimetemprisell5 = {1:f4}", _Sbottomextratimetemprisell4, _Sbottomextratimetemprisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses due to extra Losses in Prestress (From STEP 6.65)"));
                list.Add(string.Format("----------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextraloss1 = {0:f4}, Sbottomextraloss2 = {1:f4}, Sbottomextraloss3 = {2:f4}", _Sbottomextraloss1, _Sbottomextraloss2, _Sbottomextraloss3));
                list.Add(string.Format("Sbottomextraloss4 = {0:f4}, Sbottomextraloss5 = {1:f4}", _Sbottomextraloss4, _Sbottomextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses with extra time dependent loss with temperature rise and 50% Live load"));
                list.Add(string.Format("-------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));
                double _Sbottomextratimetrisell1 = _Sbottomextratimetemprisell1 + _Sbottomextraloss1;
                double _Sbottomextratimetrisell2 = _Sbottomextratimetemprisell2 + _Sbottomextraloss2;
                double _Sbottomextratimetrisell3 = _Sbottomextratimetemprisell3 + _Sbottomextraloss3;
                double _Sbottomextratimetrisell4 = _Sbottomextratimetemprisell4 + _Sbottomextraloss4;
                double _Sbottomextratimetrisell5 = _Sbottomextratimetemprisell5 + _Sbottomextraloss5;
                list.Add(string.Format("Sbottomextratimetrisell1= Sbottomextratimetemprisell1+ Sbottomextraloss1 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetemprisell1, _Sbottomextraloss1, _Sbottomextratimetrisell1));
                list.Add(string.Format("Sbottomextratimetrisell2= Sbottomextratimetemprisell2+ Sbottomextraloss2 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetemprisell2, _Sbottomextraloss2, _Sbottomextratimetrisell2));
                list.Add(string.Format("Sbottomextratimetrisell3= Sbottomextratimetemprisell3+ Sbottomextraloss3 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetemprisell3, _Sbottomextraloss3, _Sbottomextratimetrisell3));
                list.Add(string.Format("Sbottomextratimetrisell4= Sbottomextratimetemprisell4+ Sbottomextraloss4 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetemprisell4, _Sbottomextraloss4, _Sbottomextratimetrisell4));
                list.Add(string.Format("Sbottomextratimetrisell5= Sbottomextratimetemprisell5+ Sbottomextraloss5 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetemprisell5, _Sbottomextraloss5, _Sbottomextratimetrisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetrisell1 = {0:f4}, Sbottomextratimetrisell2 = {1:f4}, Sbottomextratimetrisell3 = {2:f4}", _Sbottomextratimetrisell1, _Sbottomextratimetrisell2, _Sbottomextratimetrisell3));
                list.Add(string.Format("Sbottomextratimetrisell4 = {0:f4}, Sbottomextratimetrisell5 = {1:f4}", _Sbottomextratimetrisell4, _Sbottomextratimetrisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.70 : Service stage Bottom Stresses with extra time dependent loss with temperature rise and 50% Live load


                #region STEP 6.71 : Service stage Checks with extra time dependent loss with temperature rise and 50% Live load

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.71 : Service stage Checks with extra time dependent loss with temperature rise and 50% Live load"));
                list.Add(string.Format("--------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top Stresses with extra time dependent loss with temperature rise and 50% Live load (From STEP 6.69)"));
                list.Add(string.Format("---------------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetrisell1 = {0:f3}, Stopextratimetrisell2 = {1:f3}, Stopextratimetrisell3 = {2:f3},", _Stopextratimetrisell1, _Stopextratimetrisell2, _Stopextratimetrisell3));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetrisell1 = {0:f3}, Stopextratimetrisell2 = {1:f3}", _Stopextratimetrisell4, _Stopextratimetrisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses with extra time dependent loss with temperature rise and 50% Live load (From STEP 6.70)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetrisell1 = {0:f3}, Sbottomextratimetrisell2 = {1:f3}, Sbottomextratimetrisell3 = {2:f3},", _Sbottomextratimetrisell1, _Sbottomextratimetrisell2, _Sbottomextratimetrisell3));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetrisell1 = {0:f3}, Sbottomextratimetrisell2 = {1:f3}", _Sbottomextratimetrisell4, _Sbottomextratimetrisell5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service Stage compressive stress "));
                list.Add(string.Format("----------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(" Scompservice = {0:f3} MPa (From Tab 2, User Input Data  B (26))", _Scompservice));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(" Compstress = {0:f3} x 1.15 {1:f3} MPa (From Tab 2, User Input Data  B (26))", _Scompservice, _comp_stress));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                list.Add(string.Format("Check at Support :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                #region Check at Support:

                //list.Add(string.Format("If((Stopextratimetrisell1/100) > -125 ) OK, Stopextratimetrisell1/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell1 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetrisell1/100) > 1.25 ) OK, Stopextratimetrisell1/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetrisell1, Math.Abs(_Stopextratimetrisell1 / 100)));
                }
                else if (Math.Abs(_Stopextratimetrisell1 / 100) <= -125)
                {
                    list.Add(string.Format("If((Stopextratimetrisell1/100) <= 1.25 ) NOT OK, Stopextratimetrisell1/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetrisell1, Math.Abs(_Stopextratimetrisell1 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetrisell1/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetrisell1/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell1 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetrisell1/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetrisell1/100={2:f3}/100={3:f3}, OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell1, Math.Abs(_Stopextratimetrisell1 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetrisell1/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetrisell1/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell1, Math.Abs(_Stopextratimetrisell1 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell1/100) > -125 ) OK, Sbottomextratimetrisell1/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell1 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell1/100) > 1.25 ) OK, Sbottomextratimetrisell1/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetrisell1, Math.Abs(_Sbottomextratimetrisell1 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetrisell1 / 100) <= 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell1/100) <= 1.25 ) NOT OK, Sbottomextratimetrisell1/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetrisell1, Math.Abs(_Sbottomextratimetrisell1 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell1/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetrisell1/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell1 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell1/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetrisell1/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell1, Math.Abs(_Sbottomextratimetrisell1 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell1/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetrisell1/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell1, Math.Abs(_Sbottomextratimetrisell1 / 100.0)));
                }

                #endregion Check at Support:
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/8 :"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                #region Check at Span/8

                //list.Add(string.Format("If((Stopextratimetrisell2/100) > -125 ) OK, Stopextratimetrisell2/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell2 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetrisell2/100) > 1.25 ) OK, Stopextratimetrisell2/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetrisell2, (_Stopextratimetrisell2 / 100)));
                }
                else if (Math.Abs(_Stopextratimetrisell2 / 100) <= 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetrisell2/100) <= 1.25 ) NOT OK, Stopextratimetrisell2/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetrisell2, (_Stopextratimetrisell2 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetrisell2/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetrisell2/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell2 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetrisell2/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetrisell2/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell2, Math.Abs(_Stopextratimetrisell2 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetrisell2/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetrisell2/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell2, Math.Abs(_Stopextratimetrisell2 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell2/100) > -125 ) OK, Sbottomextratimetrisell2/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell2 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell2/100) > -125 ) OK, Sbottomextratimetrisell2/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetrisell2, Math.Abs(_Sbottomextratimetrisell2 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetrisell2 / 100) <= 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell2/100) <= -125 ) NOT OK, Sbottomextratimetrisell2/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetrisell2, Math.Abs(_Sbottomextratimetrisell2 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell2/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetrisell2/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell2 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell2/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetrisell2/100={2:f3}/100={3:f3}, OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell2, Math.Abs(_Sbottomextratimetrisell2 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell2/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetrisell2/100={2:f3}/100={3:f3}, NOT OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell2, Math.Abs(_Sbottomextratimetrisell2 / 100.0)));
                }

                #endregion Check at Span/4
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Check at Span/4:"));
                list.Add(string.Format("----------------"));
                list.Add(string.Format(""));
                #region Check at Span/4

                //list.Add(string.Format("If((Stopextratimetrisell3/100) > -125 ) OK, Stopextratimetrisell3/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell3 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetrisell3/100) > 1.25 ) OK, Stopextratimetrisell3/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetrisell3, Math.Abs(_Stopextratimetrisell3 / 100)));
                }
                else if (Math.Abs(_Stopextratimetrisell3 / 100) <= 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetrisell3/100) <= -125 ) NOT OK, Stopextratimetrisell3/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetrisell3, Math.Abs(_Stopextratimetrisell3 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetrisell3/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetrisell3/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell3 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetrisell3/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetrisell3/100={2:f3}/100={3:f3}, OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell3, Math.Abs(_Stopextratimetrisell3 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetrisell3/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetrisell3/100={2:f3}/100={3:f3}, NOT OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell3, Math.Abs(_Stopextratimetrisell3 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell3/100) > -125 ) OK, Sbottomextratimetrisell3/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell3 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell3/100) > -125 ) OK, Sbottomextratimetrisell3/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetrisell3, Math.Abs(_Sbottomextratimetrisell3 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetrisell3 / 100) <= 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell3/100) <= -125 ) NOT OK, Sbottomextratimetrisell3/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetrisell3, Math.Abs(_Sbottomextratimetrisell3 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell3/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetrisell3/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell3 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell3/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetrisell3/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell3, Math.Abs(_Sbottomextratimetrisell3 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell3/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetrisell3/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell3, Math.Abs(_Sbottomextratimetrisell3 / 100.0)));
                }

                #endregion Check at Span/4
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Check at Span3/8 :"));
                list.Add(string.Format("------------------"));
                #region Check at Span3/8

                //list.Add(string.Format("If((Stopextratimetrisell4/100) > -125 ) OK, Stopextratimetrisell4/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell4 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetrisell4/100) > 1.25 ) OK, Stopextratimetrisell4/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetrisell4, Math.Abs(_Stopextratimetrisell4 / 100)));
                }
                else if (Math.Abs(_Stopextratimetrisell4 / 100) <= 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetrisell4/100) <= 1.25 ) NOT OK, Stopextratimetrisell4/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetrisell4, Math.Abs(_Stopextratimetrisell4 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetrisell4/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetrisell4/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell4 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetrisell4/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetrisell4/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell4, Math.Abs(_Stopextratimetrisell4 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetrisell4/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetrisell4/100={2:f3}/100={3:f3}, NOT OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell4, Math.Abs(_Stopextratimetrisell4 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell4/100) > -125 ) OK, Sbottomextratimetrisell4/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell4 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell4/100) > -125 ) OK, Sbottomextratimetrisell4/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetrisell4, Math.Abs(_Sbottomextratimetrisell4 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetrisell4 / 100) <= 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell4/100) <= -125 ) NOT OK, Sbottomextratimetrisell4/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetrisell4, Math.Abs(_Sbottomextratimetrisell4 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell4/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetrisell4/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell4 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell4/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetrisell4/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell4, Math.Abs(_Sbottomextratimetrisell4 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell4/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetrisell4/100={2:f3}/100={3:f3}, NOT OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell4, Math.Abs(_Sbottomextratimetrisell4 / 100.0)));
                }

                #endregion Check at Span3/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Check at Span/2:"));
                list.Add(string.Format(""));

                #region Check at Span/2

                //list.Add(string.Format("If((Stopextratimetrisell5/100) > -125 ) OK, Stopextratimetrisell5/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell5 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetrisell5/100) > 1.25 ) OK, Stopextratimetrisell5/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetrisell5, Math.Abs(_Stopextratimetrisell5 / 100)));
                }
                else if (Math.Abs(_Stopextratimetrisell5 / 100) <= 1.25)
                {
                    list.Add(string.Format("If((Stopextratimetrisell5/100) <= 1.25 ) NOT OK, Stopextratimetrisell5/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetrisell5, Math.Abs(_Stopextratimetrisell5 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetrisell5/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetrisell5/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetrisell5 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetrisell5/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetrisell5/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell5, Math.Abs(_Stopextratimetrisell5 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetrisell5/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetrisell5/100={2:f3}/100={3:f3}, NOT OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetrisell5, Math.Abs(_Stopextratimetrisell5 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell5/100) > -125 ) OK, Sbottomextratimetrisell5/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell5 / 100) > 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell5/100) > 1.25 ) OK, Sbottomextratimetrisell5/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetrisell5, Math.Abs(_Sbottomextratimetrisell5 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetrisell5 / 100) <= 1.25)
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell5/100) <= 1.25 ) NOT OK, Sbottomextratimetrisell5/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetrisell5, Math.Abs(_Sbottomextratimetrisell5 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetrisell5/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetrisell5/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetrisell5 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell5/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetrisell5/100={2:f3}/100={3:f3}, OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell5, Math.Abs(_Sbottomextratimetrisell5 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetrisell5/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetrisell5/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetrisell5, Math.Abs(_Sbottomextratimetrisell5 / 100.0)));
                }

                #endregion Check at Span/2
                #endregion STEP 6.71 : Service stage Checks with extra time dependent loss with temperature rise and 50% Live load


                #region STEP 6.72 : Service stage Top Stresses with extra time dependent loss with temperature fall and 50% Live load
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.72 : Service stage Top Stresses with extra time dependent loss with temperature fall and 50% Live load"));
                list.Add(string.Format("--------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top  Stresses  without extra time dependent loss with temperature fall& 50% Liveload (From STEP 6.58)"));
                list.Add(string.Format("------------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses "));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));

                list.Add(string.Format("Stopextratimetempfallll1 = {0:f4}, Stopextratimetempfallll2 = {1:f4}, Stopextratimetempfallll3 = {2:f4}", _Stopextratimetempfallll1, _Stopextratimetempfallll2, _Stopextratimetempfallll3));
                list.Add(string.Format("Stopextratimetempfallll4 = {0:f4}, Stopextratimetempfallll5 = {1:f4}", _Stopextratimetempfallll4, _Stopextratimetempfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses due to extra Losses in Prestress (From STEP 6.64)"));
                list.Add(string.Format("----------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextraloss1 = {0:f4}, Stopextraloss2 = {1:f4}, Stopextraloss3 = {2:f4}", _Stopextraloss1, _Stopextraloss2, _Stopextraloss3));
                list.Add(string.Format("Stopextraloss4 = {0:f4}, Stopextraloss5 = {1:f4}", _Stopextraloss4, _Stopextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top Stresses with extra time dependent loss with temperature fall and 50% Live load"));
                list.Add(string.Format("-------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Top Stresses"));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));
                double _Stopextratimetfallll1 = Math.Abs(_Stopextratimetempfallll1) + Math.Abs(_Stopextraloss1);
                double _Stopextratimetfallll2 = _Stopextratimetempfallll2 + _Stopextraloss2;
                double _Stopextratimetfallll3 = _Stopextratimetempfallll3 + _Stopextraloss3;
                double _Stopextratimetfallll4 = _Stopextratimetempfallll4 + _Stopextraloss4;
                double _Stopextratimetfallll5 = _Stopextratimetempfallll5 + _Stopextraloss5;
                list.Add(string.Format("Stopextratimetfallll1= Stopextratimetempfallll1+ Stopextraloss1 = {0:f4} + ({1:f3}) = {2:f3}", Math.Abs(_Stopextratimetempfallll1), Math.Abs(_Stopextraloss1), _Stopextratimetfallll1));
                list.Add(string.Format("Stopextratimetfallll2= Stopextratimetempfallll2+ Stopextraloss2 = {0:f4} + ({1:f3}) = {2:f3}", _Stopextratimetempfallll2, _Stopextraloss2, _Stopextratimetfallll2));
                list.Add(string.Format("Stopextratimetfallll3= Stopextratimetempfallll3+ Stopextraloss3 = {0:f4} + ({1:f3}) = {2:f3}", _Stopextratimetempfallll3, _Stopextraloss3, _Stopextratimetfallll3));
                list.Add(string.Format("Stopextratimetfallll4= Stopextratimetempfallll4+ Stopextraloss4 = {0:f4} + ({1:f3}) = {2:f3}", _Stopextratimetempfallll4, _Stopextraloss4, _Stopextratimetfallll4));
                list.Add(string.Format("Stopextratimetfallll5= Stopextratimetempfallll5+ Stopextraloss5 = {0:f4} + ({1:f3}) = {2:f3}", _Stopextratimetempfallll5, _Stopextraloss5, _Stopextratimetfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetfallll1 = {0:f4}, Stopextratimetfallll2 = {1:f4}, Stopextratimetfallll3 = {2:f4}", _Stopextratimetfallll1, _Stopextratimetfallll2, _Stopextratimetfallll3));
                list.Add(string.Format("Stopextratimetfallll4 = {0:f4}, Stopextratimetfallll5 = {1:f4}", _Stopextratimetfallll4, _Stopextratimetfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.72 : Service stage Top Stresses with extra time dependent loss without temperature load


                #region STEP 6.73 : Service stage Bottom Stresses with extra time dependent loss with temperature fall and 50% Live load
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.73 : Service stage Bottom Stresses with extra time dependent loss with temperature fall and 50% Live load"));
                list.Add(string.Format("----------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom  Stresses  without extra time dependent loss with temperature fall& 50% Liveload (From STEP 6.59)"));
                list.Add(string.Format("---------------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));

                list.Add(string.Format("Sbottomextratimetempfallll1 = {0:f4}, Sbottomextratimetempfallll2 = {1:f4}, Sbottomextratimetempfallll3 = {2:f4}", _Sbottomextratimetempfallll1, _Sbottomextratimetempfallll2, _Sbottomextratimetempfallll3));
                list.Add(string.Format("Sbottomextratimetempfallll4 = {0:f4}, Sbottomextratimetempfallll5 = {1:f4}", _Sbottomextratimetempfallll4, _Sbottomextratimetempfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses due to extra Losses in Prestress (From STEP 6.65)"));
                list.Add(string.Format("----------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("---------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextraloss1 = {0:f4}, Sbottomextraloss2 = {1:f4}, Sbottomextraloss3 = {2:f4}", _Sbottomextraloss1, _Sbottomextraloss2, _Sbottomextraloss3));
                list.Add(string.Format("Sbottomextraloss4 = {0:f4}, Sbottomextraloss5 = {1:f4}", _Sbottomextraloss4, _Sbottomextraloss5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses with extra time dependent loss with temperature fall and 50% Live load"));
                list.Add(string.Format("-------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Bottom Stresses"));
                list.Add(string.Format("-------------"));
                list.Add(string.Format(""));
                double _Sbottomextratimetfallll1 = _Sbottomextratimetempfallll1 + _Sbottomextraloss1;
                double _Sbottomextratimetfallll2 = _Sbottomextratimetempfallll2 + _Sbottomextraloss2;
                double _Sbottomextratimetfallll3 = _Sbottomextratimetempfallll3 + _Sbottomextraloss3;
                double _Sbottomextratimetfallll4 = _Sbottomextratimetempfallll4 + _Sbottomextraloss4;
                double _Sbottomextratimetfallll5 = _Sbottomextratimetempfallll5 + _Sbottomextraloss5;
                list.Add(string.Format("Sbottomextratimetfallll1= Sbottomextratimetempfallll1+ Sbottomextraloss1 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetempfallll1, _Sbottomextraloss1, _Sbottomextratimetfallll1));
                list.Add(string.Format("Sbottomextratimetfallll2= Sbottomextratimetempfallll2+ Sbottomextraloss2 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetempfallll2, _Sbottomextraloss2, _Sbottomextratimetfallll2));
                list.Add(string.Format("Sbottomextratimetfallll3= Sbottomextratimetempfallll3+ Sbottomextraloss3 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetempfallll3, _Sbottomextraloss3, _Sbottomextratimetfallll3));
                list.Add(string.Format("Sbottomextratimetfallll4= Sbottomextratimetempfallll4+ Sbottomextraloss4 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetempfallll4, _Sbottomextraloss4, _Sbottomextratimetfallll4));
                list.Add(string.Format("Sbottomextratimetfallll5= Sbottomextratimetempfallll5+ Sbottomextraloss5 = {0:f4} + ({1:f3}) = {2:f3}", _Sbottomextratimetempfallll5, _Sbottomextraloss5, _Sbottomextratimetfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetfallll1 = {0:f4}, Sbottomextratimetfallll2 = {1:f4}, Sbottomextratimetfallll3 = {2:f4}", _Sbottomextratimetfallll1, _Sbottomextratimetfallll2, _Sbottomextratimetfallll3));
                list.Add(string.Format("Sbottomextratimetfallll4 = {0:f4}, Sbottomextratimetfallll5 = {1:f4}", _Sbottomextratimetfallll4, _Sbottomextratimetfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.73 : Service stage Bottom Stresses with extra time dependent loss with temperature fall and 50% Live load


                #region STEP 6.74 : Service stage Checks with extra time dependent loss with temperature fall and 50% Live load

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.74 : Service stage Checks with extra time dependent loss with temperature fall and 50% Live load"));
                list.Add(string.Format("--------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Top Stresses with extra time dependent loss with temperature fall and 50% Live load (From STEP 6.72)"));
                list.Add(string.Format("---------------------------------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetfallll1 = {0:f3}, Stopextratimetfallll2 = {1:f3}, Stopextratimetfallll3 = {2:f3},", _Stopextratimetfallll1, _Stopextratimetfallll2, _Stopextratimetfallll3));
                list.Add(string.Format(""));
                list.Add(string.Format("Stopextratimetfallll1 = {0:f3}, Stopextratimetfallll2 = {1:f3}", _Stopextratimetfallll4, _Stopextratimetfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service stage Bottom Stresses with extra time dependent loss with temperature fall and 50% Live load (From STEP 6.73)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetfallll1 = {0:f3}, Sbottomextratimetfallll2 = {1:f3}, Sbottomextratimetfallll3 = {2:f3},", _Sbottomextratimetfallll1, _Sbottomextratimetfallll2, _Sbottomextratimetfallll3));
                list.Add(string.Format(""));
                list.Add(string.Format("Sbottomextratimetfallll1 = {0:f3}, Sbottomextratimetfallll2 = {1:f3}", _Sbottomextratimetfallll4, _Sbottomextratimetfallll5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Service Stage compressive stress "));
                list.Add(string.Format("----------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(" Scompservice = {0:f3} MPa (From Tab 2, User Input Data  B (26))", _Scompservice));
                list.Add(string.Format(""));
                list.Add(string.Format(" Modulas of Rupture = ModRup = {0:f3} MPa (From Tab 2, User Input Data  B (27))", -Modrup));
                list.Add(string.Format(""));
                list.Add(string.Format(" Compstress = {0:f3} x 1.15 {1:f3} MPa (From Tab 2, User Input Data  B (26))", _Scompservice, _comp_stress));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Check at Support :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));

                #region Check at Support:

                //list.Add(string.Format("If((Stopextratimetfallll1/100) > -Modrup ) OK, Stopextratimetfallll1/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll1 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetfallll1/100) > Modrup ) OK, Stopextratimetfallll1/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetfallll1, Math.Abs(_Stopextratimetfallll1 / 100)));
                }
                else if ((_Stopextratimetfallll1 / 100) <= -Modrup)
                {
                    list.Add(string.Format("If((Stopextratimetfallll1/100) <= Modrup ) NOT OK, Stopextratimetfallll1/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetfallll1, Math.Abs(_Stopextratimetfallll1 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetfallll1/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetfallll1/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll1 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetfallll1/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetfallll1/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll1, Math.Abs(_Stopextratimetfallll1 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetfallll1/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetfallll1/100={2:f3}/100={3:f3}, NOT OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll1, Math.Abs(_Stopextratimetfallll1 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll1/100) > -Modrup ) OK, Sbottomextratimetfallll1/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll1 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll1/100) > Modrup ) OK, Sbottomextratimetfallll1/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetfallll1, Math.Abs(_Sbottomextratimetfallll1 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetfallll1 / 100) <= Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll1/100) <= Modrup ) NOT OK, Sbottomextratimetfallll1/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetfallll1, Math.Abs(_Sbottomextratimetfallll1 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll1/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetfallll1/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll1 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll1/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetfallll1/100={2:f3}/100={3:f3}, OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll1, Math.Abs(_Sbottomextratimetfallll1 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll1/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetfallll1/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll1, Math.Abs(_Sbottomextratimetfallll1 / 100.0)));
                }

                #endregion Check at Support:
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check at Span/8 :"));
                list.Add(string.Format("-----------------"));
                list.Add(string.Format(""));
                #region Check at Span/8

                //list.Add(string.Format("If((Stopextratimetfallll2/100) > -Modrup ) OK, Stopextratimetfallll2/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll2 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetfallll2/100) > Modrup ) NOT OK, Stopextratimetfallll2/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetfallll2, Math.Abs(_Stopextratimetfallll2 / 100)));
                }
                else if (Math.Abs(_Stopextratimetfallll2 / 100) <= Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetfallll2/100) <= -Modrup ) OK, Stopextratimetfallll2/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetfallll2, Math.Abs(_Stopextratimetfallll2 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetfallll2/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetfallll2/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll2 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetfallll2/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetfallll2/100={2:f3}/100={3:f3}, OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll2, Math.Abs(_Stopextratimetfallll2 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetfallll2/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetfallll2/100={2:f3}/100={3:f3}, NOT OK,",
                      Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll2, Math.Abs(_Stopextratimetfallll2 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll2/100) > -Modrup ) OK, Sbottomextratimetfallll2/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll2 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll2/100) > Modrup ) OK, Sbottomextratimetfallll2/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetfallll2, Math.Abs(_Sbottomextratimetfallll2 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetfallll2 / 100) <= Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll2/100) <= Modrup ) NOT OK, Sbottomextratimetfallll2/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetfallll2, Math.Abs(_Sbottomextratimetfallll2 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll2/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetfallll2/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll2 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll2/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetfallll2/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll2, Math.Abs(_Sbottomextratimetfallll2 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll2/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetfallll2/100={2:f3}/100={3:f3}, NOT OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll2, Math.Abs(_Sbottomextratimetfallll2 / 100.0)));
                }

                #endregion Check at Span/4
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Check at Span/4:"));
                list.Add(string.Format("----------------"));
                list.Add(string.Format(""));
                #region Check at Span/4

                //list.Add(string.Format("If((Stopextratimetfallll3/100) > -Modrup ) OK, Stopextratimetfallll3/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll3 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetfallll3/100) > Modrup ) OK, Stopextratimetfallll3/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetfallll3, Math.Abs(_Stopextratimetfallll3 / 100)));
                }
                else if (Math.Abs(_Stopextratimetfallll3 / 100) <= Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetfallll3/100) <= Modrup ) NOT OK, Stopextratimetfallll3/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetfallll3, Math.Abs(_Stopextratimetfallll3 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetfallll3/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetfallll3/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll3 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetfallll3/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetfallll3/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll3, Math.Abs(_Stopextratimetfallll3 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetfallll3/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetfallll3/100={2:f3}/100={3:f3}, NOT OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll3, Math.Abs(_Stopextratimetfallll3 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll3/100) > -Modrup ) OK, Sbottomextratimetfallll3/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll3 / 100) > Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll3/100) > Modrup ) OK, Sbottomextratimetfallll3/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetfallll3, Math.Abs(_Sbottomextratimetfallll3 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetfallll3 / 100) <= Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll3/100) <= Modrup ) NOT OK, Sbottomextratimetfallll3/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetfallll3, Math.Abs(_Sbottomextratimetfallll3 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll3/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetfallll3/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll3 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll3/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetfallll3/100={2:f3}/100={3:f3}, OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll3, Math.Abs(_Sbottomextratimetfallll3 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll3/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetfallll3/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll3, Math.Abs(_Sbottomextratimetfallll3 / 100.0)));
                }

                #endregion Check at Span/4
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Check at Span3/8 :"));
                list.Add(string.Format("------------------"));
                #region Check at Span3/8

                //list.Add(string.Format("If((Stopextratimetfallll4/100) > -Modrup ) OK, Stopextratimetfallll4/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll4 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetfallll4/100) > Modrup ) OK, Stopextratimetfallll4/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetfallll4, Math.Abs(_Stopextratimetfallll4 / 100)));
                }
                else if (Math.Abs(_Stopextratimetfallll4 / 100) <= Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetfallll4/100) <= Modrup ) NOT OK, Stopextratimetfallll4/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetfallll4, Math.Abs(_Stopextratimetfallll4 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetfallll4/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetfallll4/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll4 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetfallll4/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetfallll4/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll4, Math.Abs(_Stopextratimetfallll4 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetfallll4/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetfallll4/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll4, Math.Abs(_Stopextratimetfallll4 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll4/100) > -Modrup ) OK, Sbottomextratimetfallll4/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll4 / 100) > Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll4/100) > -Modrup ) OK, Sbottomextratimetfallll4/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetfallll4, Math.Abs(_Sbottomextratimetfallll4 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetfallll4 / 100) <= Math.Abs(Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll4/100) <= -Modrup ) NOT OK, Sbottomextratimetfallll4/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetfallll4, Math.Abs(_Sbottomextratimetfallll4 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll4/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetfallll4/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll4 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll4/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetfallll4/100={2:f3}/100={3:f3}, OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll4, Math.Abs(_Sbottomextratimetfallll4 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll4/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetfallll4/100={2:f3}/100={3:f3}, NOT OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll4, Math.Abs(_Sbottomextratimetfallll4 / 100.0)));
                }

                #endregion Check at Span3/8
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("Check at Span/2:"));
                list.Add(string.Format(""));

                #region Check at Span/2

                //list.Add(string.Format("If((Stopextratimetfallll5/100) > -Modrup ) OK, Stopextratimetfallll5/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll5 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetfallll5/100) > Modrup ) OK, Stopextratimetfallll5/100= {0:f3}/100 = {1:f3}, OK,", _Stopextratimetfallll5, Math.Abs(_Stopextratimetfallll5 / 100)));
                }
                else if (Math.Abs(_Stopextratimetfallll5 / 100) <= Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Stopextratimetfallll5/100) <= Modrup ) NOT OK, Stopextratimetfallll5/100= {0:f3}/100 = {1:f3}, NOT OK,", _Stopextratimetfallll5, Math.Abs(_Stopextratimetfallll5 / 100)));
                }

                //list.Add(string.Format("If((Stopextratimetfallll5/100) < Scompservice = 13.46x1.15=15.48) OK, Stopextratimetfallll5/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Stopextratimetfallll5 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Stopextratimetfallll5/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Stopextratimetfallll5/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll5, Math.Abs(_Stopextratimetfallll5 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Stopextratimetfallll5/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Stopextratimetfallll5/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Stopextratimetfallll5, Math.Abs(_Stopextratimetfallll5 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll5/100) > -Modrup ) OK, Sbottomextratimetfallll5/100= 474.642/100 = 4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll5 / 100) > Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll5/100) > Modrup ) OK, Sbottomextratimetfallll5/100= {0:f3}/100 = {1:f3}, OK,", _Sbottomextratimetfallll5, Math.Abs(_Sbottomextratimetfallll5 / 100.0)));
                }
                else if (Math.Abs(_Sbottomextratimetfallll5 / 100) <= Math.Abs(-Modrup))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll5/100) <= -Modrup ) NOT OK, Sbottomextratimetfallll5/100= {0:f3}/100 = {1:f3}, NOT OK,", _Sbottomextratimetfallll5, Math.Abs(_Sbottomextratimetfallll5 / 100.0)));
                }

                //list.Add(string.Format("If((Sbottomextratimetfallll5/100) < Scompservice = 13.46x1.15=15.48) OK, Sbottomextratimetfallll5/100=474.642/100=4.75, OK,"));
                if (Math.Abs(_Sbottomextratimetfallll5 / 100) < Math.Abs(_comp_stress))
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll5/100) < Scompservice = {0:f3}x1.15={1:f3}) OK, Sbottomextratimetfallll5/100={2:f3}/100={3:f3}, OK,",
                        Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll5, Math.Abs(_Sbottomextratimetfallll5 / 100.0)));
                }
                else
                {
                    list.Add(string.Format("If((Sbottomextratimetfallll5/100) < Scompservice = {0:f3}x1.15={1:f3}) NOT OK, Sbottomextratimetfallll5/100={2:f3}/100={3:f3}, NOT OK,",
                       Math.Abs(_Scompservice), Math.Abs(_comp_stress), _Sbottomextratimetfallll5, Math.Abs(_Sbottomextratimetfallll5 / 100.0)));
                }

                #endregion Check at Span/2


                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("NOTE : TENSION IS ALLOWED IN TEMP. CASE IN DECK SLAB,  (STRESS<MODULUS OF RUPTURE) "));
                list.Add(string.Format("FOR WHICH UNTENSIONED STEEL IS PROVIDED"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 6.74 : Service stage Checks with extra time dependent loss with temperature fall and 50% Live load


                #region STEP 6.75 : SUMMARY OF LOSSES

                list.Add(string.Format(""));
                list.Add(string.Format("STEP 6.75 : SUMMARY OF LOSSES "));
                list.Add(string.Format("------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Elastic Shortening Loss = Eloss = {0:f3} Tons (From STEP 6.8)", _Eloss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Relaxation Loss = Retot = {0:f3} Tons (From STEP 6.14)", _Retot));
                list.Add(string.Format(""));
                list.Add(string.Format("Creep Loss at {0} days to infinity = Crloss56 = {1:f3} Ton (From STEP 6.41)", cwccb_day, _Crloss56));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Shrinkage Loss = Shloss56 = {0:f3} Ton (From STEP 6.41)", _Shloss56));
                list.Add(string.Format(""));

                double _total_loss = _Eloss + _Retot + _Crloss56 + _Shloss56;
                list.Add(string.Format("TOTAL LOSS = {0:f3}+{1:f3}+{2:f3}+{3:f3} = {4:f3}", _Eloss, _Retot, _Crloss56, _Shloss56, _total_loss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Initial Force after Friction & Slip loss"));
                list.Add(string.Format("----------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Prestressing Force = P = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3}", _P1, _P2, _P3, _P4, _P5));


                list.Add(string.Format("Length of Segments = Ls = {0:f3}", _L.ToString(", ")));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Initial Force after Friction & Slip loss"));
                list.Add(string.Format("-----------------------------------------"));
                list.Add(string.Format(""));
                double _Ifafsloss = ((_P1 + _P2) * (_L.F2 / 2) +
                    (_P2 + _P3) * (_L.F3 / 2)
                    + (_P3 + _P4) * (_L.F4 / 2)
                    + (_P4 + _P5) * (_L.F5 / 2)) / (_L.F2 + _L.F3 + _L.F4 + _L.F5);


                list.Add(string.Format("Ifafsloss = [(P1 + P2) * (L2 / 2)"));
                list.Add(string.Format("            + (P2 + P3) * (L3 / 2)"));
                list.Add(string.Format("            + (P3 + P4) * (L4 / 2)"));
                list.Add(string.Format("            + (P4 + P5) * (L5 / 2)] / (L2, L3, L4, L5)"));
                list.Add(string.Format(""));
                list.Add(string.Format("          = [({0:f3} + {1:f3}) * ({2:f3} / 2)", _P1, _P2, _L.F2));
                list.Add(string.Format("            +({0:f3} + {1:f3}) * ({2:f3} / 2)", _P2, _P3, _L.F3));
                list.Add(string.Format("            +({0:f3} + {1:f3}) * ({2:f3} / 2)", _P3, _P4, _L.F4));
                list.Add(string.Format("            +({0:f3} + {1:f3}) * ({2:f3} / 2)] ", _P4, _P5, _L.F5));
                list.Add(string.Format("            /({0:f3} + {1:f3}  + {2:f3}  + {3:f3} ) ", _L.F2, _L.F3, _L.F4, _L.F5));
                list.Add(string.Format(""));
                list.Add(string.Format("          =  {0:f3} Tons", _Ifafsloss));



                //list.Add(string.Format("= (18025.48+20365.93+23520.67+24650.27) / 23.876"));
                //list.Add(string.Format("= 86562.35 / 23.876"));
                //list.Add(string.Format("= 3625.50 Tons "));
                list.Add(string.Format(""));

                double _per_loss = (_total_loss * 100) / _Ifafsloss;
                list.Add(string.Format("Percentage  LOSS = (TOTAL LOSS) x 100 / (Initial Force after Friction & Slip loss)"));
                list.Add(string.Format("                 = {0:f3} x 100 / {1:f3}", _total_loss, _Ifafsloss));
                list.Add(string.Format("                 = {0:f3} %", _per_loss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("END of STEP 6 (DESIGN FOR FLEXURE)"));

                #endregion END of STEP 6 (DESIGN FOR FLEXURE)

                #region STEP 7 : DESIGN FOR ULTIMATE SHEAR

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7 : DESIGN FOR ULTIMATE SHEAR"));
                list.Add(string.Format("-----------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.1 : Ultimate Shear Capacity of Section Uncracked in Flexure {0}", (iApp.DesignStandard == eDesignStandard.IndianStandard ? "Ref. (Cl. 14.1.2, IRC : 18-2000)" : "")));
                list.Add(string.Format("--------------------------------------------------------------------{0}", (iApp.DesignStandard == eDesignStandard.IndianStandard ? "--------------------------------" : "")));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("(From STEP 2, TABLE 4)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Tw1 = Section_Tw.F2;
                double _Tw2 = Section_Tw.F3;
                double _Tw3 = Section_Tw.F4;
                double _Tw4 = Section_Tw.F5;
                double _Tw5 = Section_Tw.F6;
                list.Add(string.Format("Web Thicknesses = Tw = {0:f3},  {1:f3},  {2:f3},  {3:f3}, {4:f3}", _Tw1, _Tw2, _Tw3, _Tw4, _Tw5));
                list.Add(string.Format("Web Inclination = ϴ = {0:f3},  {1:f3},  {2:f3},  {3:f3}, {4:f3}", Section_Theta.F2, Section_Theta.F3, Section_Theta.F4, Section_Theta.F5, Section_Theta.F6));
                list.Add(string.Format("Cross Section Area  = A1={0:f3}, A2={1:f3}, A3={2:f3}, A4={3:f3}, A5={4:f3}", A.F2, A.F3, A.F4, A.F5, A.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double Ductdia = qd;
                Total_P.RemoveAt(Total_P.Count - 1);
                list.Add(string.Format("Dia of Prestressing Duct = Ductdia = {0} mm. (From Tab 2, User Input data B (16))", Ductdia));
                list.Add(string.Format("Total Px (Stage-1) =  {0}  Tons  (From STEP 4, TABLE 12)", Total_P.ToString(", ")));
                list.Add(string.Format("Percentage  LOSS = Perloss = {0:f4} % (From STEP 6.75)", _per_loss));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Calculations: "));
                list.Add(string.Format("At sections: 'D' from Support, L/8, L/4, 3L/8, L/2"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                #endregion STEP 7.1 : DESIGN FOR ULTIMATE SHEAR

                #region STEP 7.2 : DESIGN FOR ULTIMATE SHEAR
                list.Add(string.Format("STEP 7.2 : "));
                list.Add(string.Format(""));
                double _bo1 = 2 * Section_Tw.F2 / Math.Cos(theta.F2);
                double _bo2 = 2 * Section_Tw.F3 / Math.Cos(theta.F3);
                double _bo3 = 2 * Section_Tw.F4 / Math.Cos(theta.F4);
                double _bo4 = 2 * Section_Tw.F5 / Math.Cos(theta.F5);
                double _bo5 = 2 * Section_Tw.F6 / Math.Cos(theta.F6);
                list.Add(string.Format("Overall Width  bo1 = 2 x {0:f4} / cos({1:f4}) = {2:f4} m.", Section_Tw.F2, Section_Theta.F2, _bo1));
                list.Add(string.Format("               bo2 = 2 x {0:f4} / cos({1:f4}) = {2:f4} m.", Section_Tw.F3, Section_Theta.F3, _bo2));
                list.Add(string.Format("               bo3 = 2 x {0:f4} / cos({1:f4}) = {2:f4} m.", Section_Tw.F4, Section_Theta.F4, _bo3));
                list.Add(string.Format("               bo4 = 2 x {0:f4} / cos({1:f4}) = {2:f4} m.", Section_Tw.F5, Section_Theta.F5, _bo4));
                list.Add(string.Format("               bo5 = 2 x {0:f4} / cos({1:f4}) = {2:f4} m.", Section_Tw.F6, Section_Theta.F6, _bo5));
                list.Add(string.Format(""));

                list.Add(string.Format("Overall Depth = d = d1 = {0:f4}, d2 = {1:f4}, d3 = {2:f4}, d4 = {3:f4}, d5 = {4:f4} m. (From STEP 1, TABLE 2)",
                    Section_D.F2, Section_D.F3, Section_D.F4, Section_D.F5, Section_D.F6));
                //list.Add(string.Format("Area of Section = A1 = 6.008, A2 = 5.6081, A3=4.966, A4=4.966, A5= 4.966  Sq.m.        (From STEP 2, TABLE 4)"));
                list.Add(string.Format("Area of Section = A1 = {0:f3}, A2 = {1:f3}, A3 = {2:f3}, A4 = {3:f3}, A5 = {4:f3}", A.F2, A.F3, A.F4, A.F5, A.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.3 :"));
                list.Add(string.Format("-----------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _phi = Ductdia / 1000.0;
                list.Add(string.Format("Diameter of Duct Ф = Ductdia / 1000 = {0:f3}/1000 = {1:f3} m, (From Tab 2, User Input data B (16))", Ductdia, _phi));
                list.Add(string.Format(""));
                _b1 = _bo1 - (2.0 / 3.0) * _phi;
                _b2 = _bo2 - (2.0 / 3.0) * _phi;
                _b3 = _bo3 - (2.0 / 3.0) * _phi;
                _b4 = _bo4 - (2.0 / 3.0) * _phi;
                _b5 = _bo5 - (2.0 / 3.0) * _phi;
                list.Add(string.Format("Effective Width b1 =  bo1 - (2/3) x Ф = {0:f3}- (2/3) x {1:f3} = {2:f3} m.", _bo1, _phi, _b1));
                list.Add(string.Format("                b2 =  bo2 - (2/3) x Ф = {0:f3}- (2/3) x {1:f3} = {2:f3} m.", _bo2, _phi, _b2));
                list.Add(string.Format("                b3 =  bo3 - (2/3) x Ф = {0:f3}- (2/3) x {1:f3} = {2:f3} m.", _bo3, _phi, _b3));
                list.Add(string.Format("                b4 =  bo4 - (2/3) x Ф = {0:f3}- (2/3) x {1:f3} = {2:f3} m.", _bo4, _phi, _b4));
                list.Add(string.Format("                b5 =  bo5 - (2/3) x Ф = {0:f3}- (2/3) x {1:f3} = {2:f3} m.", _bo5, _phi, _b5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.4 : Maximum Principal Tensile Stress "));
                list.Add(string.Format("-----------------------------------------------"));
                list.Add(string.Format(""));

                double _ft = 0.24 * Sqrt(Fcu);
                list.Add(string.Format("Maximum Principal Tensile Stress,  ft = 0.24 x SQRT(Fcu) = 0.24 x SQRT({0:f3}) = {1:f3} MPa", Fcu, _ft));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.5:"));
                list.Add(string.Format("----------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Horizontal Component of Prestress after all losses"));
                double _Ph1 = Total_P.F2 * (1.0 - _per_loss / 100.0);
                double _Ph2 = Total_P.F3 * (1.0 - _per_loss / 100.0);
                double _Ph3 = Total_P.F4 * (1.0 - _per_loss / 100.0);
                double _Ph4 = Total_P.F5 * (1.0 - _per_loss / 100.0);
                double _Ph5 = Total_P.F6 * (1.0 - _per_loss / 100.0);
                list.Add(string.Format("Ph1 = P2 x (1 - Perloss/100) = {0:f3} x (1 - {1:f3}/100) = {2:f3} Tons", Total_P.F2, _per_loss, _Ph1));
                list.Add(string.Format("Ph2 = P3 x (1 - Perloss/100) = {0:f3} x (1 - {1:f3}/100) = {2:f3} Tons", Total_P.F3, _per_loss, _Ph2));
                list.Add(string.Format("Ph3 = P4 x (1 - Perloss/100) = {0:f3} x (1 - {1:f3}/100) = {2:f3} Tons", Total_P.F4, _per_loss, _Ph3));
                list.Add(string.Format("Ph4 = P5 x (1 - Perloss/100) = {0:f3} x (1 - {1:f3}/100) = {2:f3} Tons", Total_P.F5, _per_loss, _Ph4));
                list.Add(string.Format("Ph5 = P6 x (1 - Perloss/100) = {0:f3} x (1 - {1:f3}/100) = {2:f3} Tons", Total_P.F6, _per_loss, _Ph5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("(From STEP 4 ,TABLE 12)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Cg of cable from sofit, Yord  (metres),"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Yord1 = Total_h.F2;
                double _Yord2 = Total_h.F3;
                double _Yord3 = Total_h.F4;
                double _Yord4 = Total_h.F5;
                double _Yord5 = Total_h.F6;
                list.Add(string.Format("CG from Bottom   Yord1= {0:f3}, Yord2= {1:f3}, Yord3= {2:f3}, Yord4= {3:f3}, Yord5= {4:f3}", _Yord1, _Yord2, _Yord3, _Yord4, _Yord5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.6 : Compressive Stress due to prestress,  fcp (MPa)"));
                list.Add(string.Format("----------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Fcp1 = (_Ph1 * 1000.0) / (A.F2 * 1000000);
                double _Fcp2 = (_Ph1 * 1000.0) / (A.F3 * 1000000);
                double _Fcp3 = (_Ph1 * 1000.0) / (A.F4 * 1000000);
                double _Fcp4 = (_Ph1 * 1000.0) / (A.F5 * 1000000);
                double _Fcp5 = (_Ph1 * 1000.0) / (A.F6 * 1000000);
                list.Add(string.Format("Fcp1 =  Ph1 x 1000 / (A1 x 10^6) = {0:f3} x 1000 / ({1:f3} x 10^6) = {2:f3}", _Ph1, A.F2, _Fcp1));
                list.Add(string.Format("Fcp2 =  Ph2 x 1000 / (A2 x 10^6) = {0:f3} x 1000 / ({1:f3} x 10^6) = {2:f3}", _Ph2, A.F3, _Fcp2));
                list.Add(string.Format("Fcp3 =  Ph3 x 1000 / (A3 x 10^6) = {0:f3} x 1000 / ({1:f3} x 10^6) = {2:f3}", _Ph3, A.F4, _Fcp3));
                list.Add(string.Format("Fcp4 =  Ph4 x 1000 / (A4 x 10^6) = {0:f3} x 1000 / ({1:f3} x 10^6) = {2:f3}", _Ph4, A.F5, _Fcp4));
                list.Add(string.Format("Fcp5 =  Ph5 x 1000 / (A5 x 10^6) = {0:f3} x 1000 / ({1:f3} x 10^6) = {2:f3}", _Ph5, A.F6, _Fcp5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.7 : Effect of Vertical Prestress, Vpr (kN)"));
                list.Add(string.Format("-------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Vpr1 = 0.0;
                double _Vpr2 = 0.0;
                double _Vpr3 = 0.0;
                double _Vpr4 = 0.0;
                double _Vpr5 = 0.0;
                list.Add(string.Format("Vpr1 = {0:f3}, Vpr2={1:f3}, Vpr3={2:f3}, Vpr4={3:f3}, Vpr5={4:f3},", _Vpr1, _Vpr2, _Vpr3, _Vpr4, _Vpr5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.8 : Shear Capacity, Vco (kN)"));
                list.Add(string.Format("-----------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                double _Vco1 = (0.67 * (_b1 * 1000) * (Section_D.F2 * 1000) * Math.Pow((_ft * _ft + 0.8 * _Fcp1 * _ft), 0.5)) / 1000.0;



                list.Add(string.Format("Vco1 = (0.67 x (b1 x 1000) x (d x 1000) x (ft^2 + 0.8 x fcp x ft)^0.5) / 10^3"));
                list.Add(string.Format("     = 0.67 x ({0:f3} x 1000) x ({1:f3} x 1000) x ({2:f3}^2 + 0.8 x {3:f3} x {2:f3})^0.5 / 1000",
                    _b1, Section_D.F2, _ft, _Fcp1));
                list.Add(string.Format("     ={0:f3} kN", _Vco1));
                list.Add(string.Format(""));




                double _Vco2 = (0.67 * (_b2 * 1000) * (Section_D.F3 * 1000) * Math.Pow((_ft * _ft + 0.8 * _Fcp2 * _ft), 0.5)) / 1000.0;



                list.Add(string.Format("Vco2 = (0.67 x (b2 x 1000) x (d x 1000) x (ft^2 + 0.8 x fcp x ft)^0.5) / 10^3"));
                list.Add(string.Format("     = 0.67 x ({0:f3} x 1000) x ({1:f3} x 1000) x ({2:f3}^2 + 0.8 x {3:f3} x {2:f3})^0.5 / 1000",
                    _b2, Section_D.F3, _ft, _Fcp2));
                list.Add(string.Format("     ={0:f3} kN", _Vco2));
                list.Add(string.Format(""));




                double _Vco3 = (0.67 * (_b3 * 1000) * (Section_D.F4 * 1000) * Math.Pow((_ft * _ft + 0.8 * _Fcp3 * _ft), 0.5)) / 1000.0;



                list.Add(string.Format("Vco3 = (0.67 x (b3 x 1000) x (d x 1000) x (ft^2 + 0.8 x fcp x ft)^0.5) / 10^3"));
                list.Add(string.Format("     = 0.67 x ({0:f3} x 1000) x ({1:f3} x 1000) x ({2:f3}^2 + 0.8 x {3:f3} x {2:f3})^0.5 / 1000",
                    _b3, Section_D.F4, _ft, _Fcp3));
                list.Add(string.Format("     ={0:f3} kN", _Vco3));
                list.Add(string.Format(""));




                double _Vco4 = (0.67 * (_b4 * 1000) * (Section_D.F5 * 1000) * Math.Pow((_ft * _ft + 0.8 * _Fcp4 * _ft), 0.5)) / 1000.0;



                list.Add(string.Format("Vco4 = (0.67 x (b4 x 1000) x (d x 1000) x (ft^2 + 0.8 x fcp x ft)^0.5) / 10^3"));
                list.Add(string.Format("     = 0.67 x ({0:f3} x 1000) x ({1:f3} x 1000) x ({2:f3}^2 + 0.8 x {3:f3} x {2:f3})^0.5 / 1000",
                    _b4, Section_D.F5, _ft, _Fcp4));
                list.Add(string.Format("     ={0:f3} kN", _Vco4));
                list.Add(string.Format(""));




                double _Vco5 = (0.67 * (_b5 * 1000) * (Section_D.F6 * 1000) * Math.Pow((_ft * _ft + 0.8 * _Fcp5 * _ft), 0.5)) / 1000.0;



                list.Add(string.Format("Vco5 = (0.67 x (b5 x 1000) x (d x 1000) x (ft^2 + 0.8 x fcp x ft)^0.5) / 10^3"));
                list.Add(string.Format("     = 0.67 x ({0:f3} x 1000) x ({1:f3} x 1000) x ({2:f3}^2 + 0.8 x {3:f3} x {2:f3})^0.5 / 1000",
                    _b5, Section_D.F6, _ft, _Fcp5));
                list.Add(string.Format("     = {0:f3} kN", _Vco5));
                list.Add(string.Format(""));



                list.Add(string.Format("Vco1 = {0:f3} , Vco2 = {1:f3}, Vco3 = {2:f3}, Vco4 = {3:f3} , Vco5 = {4:f3}  kN ",
                                        _Vco1, _Vco2, _Vco3, _Vco4, _Vco5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.9 : Vcc = Vco + Vpr"));
                list.Add(string.Format("---------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Vcc1 = _Vco1 + _Vpr1;
                double _Vcc2 = _Vco2 + _Vpr2;
                double _Vcc3 = _Vco3 + _Vpr3;
                double _Vcc4 = _Vco4 + _Vpr4;
                double _Vcc5 = _Vco5 + _Vpr5;
                list.Add(string.Format("Vcc1 = Vco1 + Vpr1 = {0:f3} + {1:f3} = {2:f3}  kN", _Vco1, _Vpr1, _Vcc1));
                list.Add(string.Format("Vcc2 = Vco2 + Vpr2 ={0:f3} + {1:f3} = {2:f3}  kN", _Vco2, _Vpr2, _Vcc2));
                list.Add(string.Format("Vcc3 = Vco3 + Vpr3 ={0:f3} + {1:f3} = {2:f3}  kN", _Vco3, _Vpr3, _Vcc3));
                list.Add(string.Format("Vcc4 = Vco4 + Vpr4 ={0:f3} + {1:f3} = {2:f3}  kN", _Vco4, _Vpr4, _Vcc4));
                list.Add(string.Format("Vcc5 = Vco5 + Vpr5 ={0:f3} + {1:f3} = {2:f3}  kN", _Vco5, _Vpr5, _Vcc5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Vcc1 = {0:f3} , Vcc2 = {1:f3}, Vcc3 = {2:f3}, Vcc4 = {3:f3} , Vcc5 = {4:f3}  kN ",
                               _Vcc1, _Vcc2, _Vcc3, _Vcc4, _Vcc5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("STEP 7.10 : Ultimate Shear Capacity of Section cracked in Flexure"));
                list.Add(string.Format("-------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (iApp.DesignStandard == eDesignStandard.IndianStandard)
                    list.Add(string.Format("Ref. (Cl. 14.1.3, IRC:18-2000)"));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Effective Width, b (metres) (From STEP 7.3)"));

                list.Add(string.Format("b1 = {0:f4}, b2 = {1:f4}, b3 = {2:f4}, b4 = {3:f4}, b5 = {4:f4} m. (From STEP 1, TABLE 2)",
                    _b1, _b2, _b3, _b4, _b5));
                list.Add(string.Format(""));
                list.Add(string.Format("Overall Depth = d (metres) "));

                list.Add(string.Format("Overall Depth = d = d1 = {0:f4}, d2 = {1:f4}, d3 = {2:f4}, d4 = {3:f4}, d5 = {4:f4} m. (From STEP 1, TABLE 2)",
                    Section_D.F2, Section_D.F3, Section_D.F4, Section_D.F5, Section_D.F6));

                //list.Add(string.Format(" d1 = 2.5, d2 = 2.5, d3 = 2.5, d4 = 2.5, d5 = 2.5 m.         (From STEP 1,         TABLE 2)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Cg of cable from sofit,  = Yord  (metres),"));
                list.Add(string.Format(""));
                list.Add(string.Format("CG from Bottom   Yord1= {0:f3}, Yord2= {1:f3}, Yord3= {2:f3}, Yord4= {3:f3}, Yord5= {4:f3}", _Yord1, _Yord2, _Yord3, _Yord4, _Yord5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.11:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                double _D11 = Section_D.F2 - _Yord1;
                double _D12 = Section_D.F3 - _Yord2;
                double _D13 = Section_D.F4 - _Yord3;
                double _D14 = Section_D.F5 - _Yord4;
                double _D15 = Section_D.F6 - _Yord5;

                list.Add(string.Format("D1 = (D - Yord1) = {0:f3} - {1:f3} = {2:f3}  m.", Section_D.F2, _Yord1, _D11));
                list.Add(string.Format("D2 = (D - Yord2) = {0:f3} - {1:f3} = {2:f3}  m.", Section_D.F3, _Yord2, _D12));
                list.Add(string.Format("D3 = (D - Yord3) = {0:f3} - {1:f3} = {2:f3}  m.", Section_D.F4, _Yord3, _D13));
                list.Add(string.Format("D4 = (D - Yord4) = {0:f3} - {1:f3} = {2:f3}  m.", Section_D.F5, _Yord4, _D14));
                list.Add(string.Format("D5 = (D - Yord5) = {0:f3} - {1:f3} = {2:f3}  m.", Section_D.F6, _Yord5, _D15));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.12 :"));
                list.Add(string.Format("-----------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _DD1 = Section_D.F2 * 0.8;
                double _DD2 = Section_D.F3 * 0.8;
                double _DD3 = Section_D.F4 * 0.8;
                double _DD4 = Section_D.F5 * 0.8;
                double _DD5 = Section_D.F6 * 0.8;
                list.Add(string.Format("DD1 = 0.8 X D = 0.8 X {0:f3} = {1:f3} m.", Section_D.F2, _DD1));
                list.Add(string.Format("DD2 = 0.8 X D = 0.8 X {0:f3} = {1:f3} m.", Section_D.F3, _DD2));
                list.Add(string.Format("DD3 = 0.8 X D = 0.8 X {0:f3} = {1:f3} m.", Section_D.F4, _DD3));
                list.Add(string.Format("DD4 = 0.8 X D = 0.8 X {0:f3} = {1:f3} m.", Section_D.F5, _DD4));
                list.Add(string.Format("DD5 = 0.8 X D = 0.8 X {0:f3} = {1:f3} m.", Section_D.F6, _DD5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.13 : Depth = Db"));
                list.Add(string.Format("-----------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                double _Db1 = (_D11 > _DD1 ? _D11 : _DD1);
                double _Db2 = (_D12 > _DD2 ? _D12 : _DD2);
                double _Db3 = (_D13 > _DD3 ? _D13 : _DD3);
                double _Db4 = (_D14 > _DD4 ? _D14 : _DD4);
                double _Db5 = (_D15 > _DD5 ? _D15 : _DD5);
                list.Add(string.Format("Db1 = Larger of (D1 and DD1) = {0:f3} and {1:f3} = {2:f3} m.", _D11, _DD1, _Db1));
                list.Add(string.Format("Db2 = Larger of (D2 and DD2) = {0:f3} and {1:f3} = {2:f3} m.", _D12, _DD2, _Db2));
                list.Add(string.Format("Db3 = Larger of (D3 and DD3) = {0:f3} and {1:f3} = {2:f3} m.", _D13, _DD3, _Db3));
                list.Add(string.Format("Db4 = Larger of (D4 and DD4) = {0:f3} and {1:f3} = {2:f3} m.", _D14, _DD4, _Db4));
                list.Add(string.Format("Db5 = Larger of (D5 and DD5) = {0:f3} and {1:f3} = {2:f3} m.", _D15, _DD5, _Db5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Db1 = {0:f3}, Db2 = {1:f3},  Db3 = {2:f3},   Db4 = {3:f3},  Db5 = {4:f3} m.",
                    _Db1, _Db2, _Db3, _Db4, _Db5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.14 : Distance of extreme fibre from centroid, Yb"));
                list.Add(string.Format("-------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                _Yb1 = Yb.F2;
                list.Add(string.Format("Yb1 = {0:f3}, Yb2 = {1:f3},  Yb3 = {2:f3},   Yb4 = {3:f3},  Yb5 = {4:f3} m.",
                   _Yb1, _Yb2, _Yb3, _Yb4, _Yb5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Second Moment of Area, Ixx"));
                list.Add(string.Format(""));
                list.Add(string.Format("Ixx1 = {0:f3}, Ixx2 = {1:f3},  Ixx3 = {2:f3},   Ixx4 = {3:f3},  Ixx5 = {4:f3} sq.sq.m.",
                   Ixx.F2, Ixx.F3, Ixx.F4, Ixx.F5, Ixx.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.15 : Stress due to Prestress, fpt "));
                list.Add(string.Format("-----------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                _A1 = A.F2;
                list.Add(string.Format("fpt1 = Ph1/A1+ Ph1 x ( Yb1 - Yord1) x Yb1 / Ixx1 "));
                double _fpt1 = _Ph1 / _A1 + _Ph1 * (_Yb1 - _Yord1) * _Yb1 / Ixx.F2;
                list.Add(string.Format("     = {0:f3} / {1:f3} + {2:f3} x ({3:f3} - {4:f3}) x {3:f3} / {5:f3}",
                    _Ph1, _A1, _Ph1, _Yb1, _Yord1, Ixx.F2));
                list.Add(string.Format("     = {0:f3} kN/Sq.m.", _fpt1));
                list.Add(string.Format(""));
                list.Add(string.Format("fpt2 = Ph2 / A2+ Ph2 x ( Yb2 - Yord2) x Yb2 / Ixx2 "));

                double _fpt2 = _Ph2 / _A2 + _Ph2 * (_Yb2 - _Yord2) * _Yb2 / Ixx.F3;
                list.Add(string.Format("     = {0:f3} / {1:f3} + {2:f3} x ({3:f3} - {4:f3}) x {3:f3} / {5:f3}",
                    _Ph2, _A2, _Ph2, _Yb2, _Yord2, Ixx.F3));
                list.Add(string.Format("     = {0:f3} kN/Sq.m.", _fpt2));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                list.Add(string.Format("fpt3 = Ph3 / A3+ Ph3 x ( Yb3 - Yord3) x Yb3 / Ixx3 "));
                double _fpt3 = _Ph3 / _A3 + _Ph3 * (_Yb3 - _Yord3) * _Yb3 / Ixx.F4;
                list.Add(string.Format("     = {0:f3} / {1:f3} + {2:f3} x ({3:f3} - {4:f3}) x {3:f3} / {5:f3}",
                    _Ph3, _A3, _Ph3, _Yb3, _Yord3, Ixx.F4));
                list.Add(string.Format("     = {0:f3} kN/Sq.m.", _fpt3));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Fpt4 = Ph4 / A4+ Ph4 x ( Yb4 - Yord4) x Yb4 / Ixx4 "));
                double _fpt4 = _Ph4 / _A4 + _Ph4 * (_Yb4 - _Yord4) * _Yb4 / Ixx.F5;
                list.Add(string.Format("     = {0:f3} / {1:f3} + {2:f3} x ({3:f3} - {4:f3}) x {3:f3} / {5:f3}",
                    _Ph3, _A4, _Ph4, _Yb4, _Yord4, Ixx.F5));
                list.Add(string.Format("     = {0:f3} kN/Sq.m.", _fpt4));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Fpt5 = Ph5 / A5+ Ph5 x ( Yb5 - Yord5) x Yb5 / Ixx5 "));
                double _fpt5 = _Ph5 / _A5 + _Ph5 * (_Yb5 - _Yord5) * _Yb5 / Ixx.F6;
                list.Add(string.Format("     = {0:f3} / {1:f3} + {2:f3} x ({3:f3} - {4:f3}) x {3:f3} / {5:f3}",
                    _Ph5, _A5, _Ph5, _Yb5, _Yord5, Ixx.F6));
                list.Add(string.Format("     = {0:f3} kN/Sq.m.", _fpt5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double fck = Fcu;
                list.Add(string.Format("STEP 7.16 : Cracking Moment, Mt = (0.37*(fck)0.5+0.8*fpt) x Ixx / Yb"));
                list.Add(string.Format("-------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Mt1 = (0.37 * Math.Pow(fck, 0.5) + 0.8 * _fpt1 / 1000) * (Ixx.F2 * 1000.0) / _Yb1;
                double _Mt2 = (0.37 * Math.Pow(fck, 0.5) + 0.8 * _fpt2 / 1000) * (Ixx.F3 * 1000.0) / _Yb2;
                double _Mt3 = (0.37 * Math.Pow(fck, 0.5) + 0.8 * _fpt3 / 1000) * (Ixx.F4 * 1000.0) / _Yb3;
                double _Mt4 = (0.37 * Math.Pow(fck, 0.5) + 0.8 * _fpt4 / 1000) * (Ixx.F5 * 1000.0) / _Yb4;
                double _Mt5 = (0.37 * Math.Pow(fck, 0.5) + 0.8 * _fpt5 / 1000) * (Ixx.F6 * 1000.0) / _Yb5;

                list.Add(string.Format(""));
                list.Add(string.Format("Mt1  = (0.37 x (fck)^0.5 + 0.8 x fpt1) x Ixx1 / Yb1 "));
                list.Add(string.Format("     = (0.37 x ({0:f3})^0.5 + 0.8 x {1:f3} /1000) x {2:f3} x 1000/ {3:f3}", fck, _fpt1, Ixx.F2, _Yb1));
                list.Add(string.Format("     = {0:f3} ", _Mt1));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Mt2  = (0.37 x (fck)^0.5 + 0.8 x fpt2) x Ixx2 / Yb2 "));
                list.Add(string.Format("     = (0.37 x ({0:f3})^0.5 + 0.8 x {1:f3} /1000) x {2:f3} x 1000/ {3:f3}",
                    fck, _fpt2, Ixx.F3, _Yb2));
                list.Add(string.Format("     = {0:f3} ", _Mt2));
                list.Add(string.Format(""));



                list.Add(string.Format(""));
                list.Add(string.Format("Mt3  = (0.37 x (fck)^0.5 + 0.8 x fpt3) x Ixx3 / Yb3 "));
                list.Add(string.Format("     = (0.37 x ({0:f3})^0.5 + 0.8 x {1:f3} /1000) x {2:f3} x 1000/ {3:f3}",
                    fck, _fpt3, Ixx.F4, _Yb3));
                list.Add(string.Format("     = {0:f3} ", _Mt3));
                list.Add(string.Format(""));


                list.Add(string.Format(""));
                list.Add(string.Format("Mt4  = (0.37 x (fck)^0.5 + 0.8 x fpt4) x Ixx4 / Yb4 "));
                list.Add(string.Format("     = (0.37 x ({0:f3})^0.5 + 0.8 x {1:f3} /1000) x {2:f3} x 1000/ {3:f3}",
                    fck, _fpt4, Ixx.F5, _Yb4));
                list.Add(string.Format("     = {0:f3} ", _Mt4));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                list.Add(string.Format("Mt5  = (0.37 x (fck)^0.5 + 0.8 x fpt5) x Ixx5 / Yb5 "));
                list.Add(string.Format("     = (0.37 x ({0:f3})^0.5 + 0.8 x {1:f3} /1000) x {2:f3} x 1000/ {3:f3}",
                    fck, _fpt5, Ixx.F6, _Yb5));
                list.Add(string.Format("     = {0:f3} ", _Mt5));
                list.Add(string.Format(""));

                list.Add(string.Format("Ultimate Shear, Vu = Mt1 = {0:f3}, Mt2={1:f3}, Mt3={2:f3}, Mt4={3:f3}, Mt5={4:f3}", _Mt1, _Mt2, _Mt3, _Mt4, _Mt5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.17 : Ultimate Applied Shear Force, Vult,"));
                list.Add(string.Format("--------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Design SF   V_ult = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} Tons (From STEP 3, TABLE 8)",
                    V_ult.F2, V_ult.F3, V_ult.F4, V_ult.F5, V_ult.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Vult1 = V_ult.F2 * 10;
                double _Vult2 = V_ult.F3 * 10;
                double _Vult3 = V_ult.F4 * 10;
                double _Vult4 = V_ult.F5 * 10;
                double _Vult5 = V_ult.F6 * 10;
                list.Add(string.Format("At Section ‘D’ away from Support,  Vult1  = V_ult1 x 10 = {0:f3} x 10 = {1:f3} kN", V_ult.F2, _Vult1));
                list.Add(string.Format("At Section Span/8,                 Vult2  = V_ult2 x 10 = {0:f3} x 10 = {1:f3} kN", V_ult.F3, _Vult2));
                list.Add(string.Format("At Section Span/4,                 Vult3  = V_ult3 x 10 = {0:f3} x 10 = {1:f3} kN", V_ult.F4, _Vult3));
                list.Add(string.Format("At Section Span3/8,                Vult4  = V_ult4 x 10 = {0:f3} x 10 = {1:f3} kN", V_ult.F5, _Vult4));
                list.Add(string.Format("At Section Span/2,                 Vult5  = V_ult5 x 10 = {0:f3} x 10 = {1:f3} kN", V_ult.F6, _Vult5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Vult1 = {0:f3}, Vult2= {1:f3}, Vult3= {2:f3}, Vult4= {3:f3}, Vult5= {4:f3} kN", _Vult1, _Vult2, _Vult3, _Vult4, _Vult5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.18 : Bending Moment corresponding to Ult. Shear Force, Mult"));
                list.Add(string.Format("-------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-----"));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Design BM  M_ult = {0:f3}, {1:f3}, {2:f3}, {3:f3}, {4:f3} Ton-m (From STEP 3, TABLE 8)",
                    M_ult.F2, M_ult.F3, M_ult.F4, M_ult.F5, M_ult.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Mult1 = M_ult.F2 * 10;
                double _Mult2 = M_ult.F3 * 10;
                double _Mult3 = M_ult.F4 * 10;
                double _Mult4 = M_ult.F5 * 10;
                double _Mult5 = M_ult.F6 * 10;
                list.Add(string.Format("At Section ‘D’ away from Support,  Mult1  = M_ult1 x 10 = {0:f3} x 10 = {1:f3} kN-m", M_ult.F2, _Mult1));
                list.Add(string.Format("At Section Span/8,                 Mult2  = M_ult2 x 10 = {0:f3} x 10 = {1:f3} kN-m", M_ult.F3, _Mult2));
                list.Add(string.Format("At Section Span/4,                 Mult3  = M_ult3 x 10 = {0:f3} x 10 = {1:f3} kN-m", M_ult.F4, _Mult3));
                list.Add(string.Format("At Section Span3/8,                Mult4  = M_ult4 x 10 = {0:f3} x 10 = {1:f3} kN-m", M_ult.F5, _Mult4));
                list.Add(string.Format("At Section Span/2,                 Mult5  = M_ult5 x 10 = {0:f3} x 10 = {1:f3} kN-m", M_ult.F6, _Mult5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Mult1 = {0:f3}, Mult2= {1:f3}, Mult3= {2:f3}, Mult4= {3:f3}, Mult5= {4:f3} kN", _Mult1, _Mult2, _Mult3, _Mult4, _Mult5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.19 : Shear Capacity, Vcr = 0.037*b*db*(fck)0.5+Mt/M*V"));
                list.Add(string.Format("------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Effective Width, b (metres) (From STEP 7.3)"));
                list.Add(string.Format(""));
                list.Add(string.Format("b1 = {0:f4}, b2 = {1:f4}, b3 = {2:f4}, b4 = {3:f4}, b5 = {4:f4} m. (From STEP 1, TABLE 2)",
                 _b1, _b2, _b3, _b4, _b5));
                list.Add(string.Format(""));
                list.Add(string.Format("Depth = Db (From STEP 7.13)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Db1 = {0:f3}, Db2 = {1:f3},  Db3 = {2:f3},   Db4 = {3:f3},  Db5 = {4:f3} m.",
                   _Db1, _Db2, _Db3, _Db4, _Db5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Cracking Moment, Mt (From STEP 7.16)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Mt1 = {0:f3}, Mt2={1:f3}, Mt3={2:f3}, Mt4={3:f3}, Mt5={4:f3}", _Mt1, _Mt2, _Mt3, _Mt4, _Mt5));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Ult. Applied Shear Force, Vult, (From STEP 7.17)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Vult1 = {0:f3}, Vult2= {1:f3}, Vult3= {2:f3}, Vult4= {3:f3}, Vult5= {4:f3} kN", _Vult1, _Vult2, _Vult3, _Vult4, _Vult5));
                list.Add(string.Format(""));
                list.Add(string.Format("Bending Moment corresponding to Ult. Shear Force, Mult"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Mult1 = {0:f3}, Mult2= {1:f3}, Mult3= {2:f3}, Mult4= {3:f3}, Mult5= {4:f3} kN", _Mult1, _Mult2, _Mult3, _Mult4, _Mult5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Shear Capacity, Vcr = 0.037*b*db*(fck)0.5+Mt/M*V"));
                list.Add(string.Format(""));
                //list.Add(string.Format("IF(ABS(C33)=0,"Very Large", Else,"));

                double _Vcr1 = (0.037 * (_b1 * 1000) * (_Db1 * 1000) * Math.Pow(fck, 0.5) / 1000.0 + _Mt1 * _Vult1 / Math.Abs(_Mult1));

                list.Add(string.Format("Vcr1 = (0.037 x (b1 x 1000)x(Db1 x 1000)x(fck^0.5)/1000 + Mt1 x Vult1/ABS(Mult1))"));
                list.Add(string.Format("     = (0.037 x ({0:f3} x 1000) x ({1:f3} x1000)x({2:f3}^0.5))/1000 + ({3:f3} x {4:f3}/ABS({5:f3}))",
                    _b1, _Db1, fck, _Mt1, _Vult1, _Mult1));
                list.Add(string.Format("     = {0:f3}  kN", _Vcr1));
                list.Add(string.Format(""));





                double _Vcr2 = (0.037 * (_b2 * 1000) * (_Db2 * 1000) * Math.Pow(fck, 0.5) / 1000.0 + _Mt2 * _Vult2 / Math.Abs(_Mult2));

                list.Add(string.Format("Vcr2 = (0.037 x (b2 x 1000)x(Db2 x 1000)x(fck^0.5)/1000 + Mt2 x Vult2/ABS(Mult2))"));
                list.Add(string.Format("     = (0.037 x ({0:f3} x 1000) x ({1:f3} x1000)x({2:f3}^0.5))/1000 + ({3:f3} x {4:f3}/ABS({5:f3}))",
                    _b2, _Db2, fck, _Mt2, _Vult2, _Mult2));
                list.Add(string.Format("     = {0:f3}  kN", _Vcr2));
                list.Add(string.Format(""));





                double _Vcr3 = (0.037 * (_b3 * 1000) * (_Db3 * 1000) * Math.Pow(fck, 0.5) / 1000.0 + _Mt3 * _Vult3 / Math.Abs(_Mult3));

                list.Add(string.Format("Vcr3 = (0.037 x (b3 x 1000)x(Db3 x 1000)x(fck^0.5)/1000 + Mt3 x Vult3/ABS(Mult3))"));
                list.Add(string.Format("     = (0.037 x ({0:f3} x 1000) x ({1:f3} x1000)x({2:f3}^0.5))/1000 + ({3:f3} x {4:f3}/ABS({5:f3}))",
                    _b3, _Db3, fck, _Mt3, _Vult3, _Mult3));
                list.Add(string.Format("     = {0:f3}  kN", _Vcr3));
                list.Add(string.Format(""));






                double _Vcr4 = (0.037 * (_b4 * 1000) * (_Db4 * 1000) * Math.Pow(fck, 0.5) / 1000.0 + _Mt4 * _Vult4 / Math.Abs(_Mult4));

                list.Add(string.Format("Vcr4 = (0.037 x (b4 x 1000)x(Db4 x 1000)x(fck^0.5)/1000 + Mt4 x Vult4/ABS(Mult4))"));
                list.Add(string.Format("     = (0.037 x ({0:f3} x 1000) x ({1:f3} x1000)x({2:f3}^0.5))/1000 + ({3:f3} x {4:f3}/ABS({5:f3}))",
                    _b4, _Db4, fck, _Mt4, _Vult4, _Mult4));
                list.Add(string.Format("     = {0:f3}  kN", _Vcr4));
                list.Add(string.Format(""));




                double _Vcr5 = (0.037 * (_b5 * 1000) * (_Db5 * 1000) * Math.Pow(fck, 0.5) / 1000.0 + _Mt5 * _Vult5 / Math.Abs(_Mult5));

                list.Add(string.Format("Vcr5 = (0.037 x (b5 x 1000)x(Db5 x 1000)x(fck^0.5)/1000 + Mt5 x Vult5/ABS(Mult5))"));
                list.Add(string.Format("     = (0.037 x ({0:f3} x 1000) x ({1:f3} x1000)x({2:f3}^0.5))/1000 + ({3:f3} x {4:f3}/ABS({5:f3}))",
                    _b5, _Db5, fck, _Mt5, _Vult5, _Mult5));
                list.Add(string.Format("     = {0:f3}  kN", _Vcr5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.20 : Design Shear Capacity, Vc"));
                list.Add(string.Format("-------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("-------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Vcc1 = {0:f3}, Vcc2= {1:f3}, Vcc3= {2:f3}, Vcc4= {3:f3}, Vcc5= {4:f3} kN", _Vcc1, _Vcc2, _Vcc3, _Vcc4, _Vcc5));
                list.Add(string.Format(""));
                list.Add(string.Format("Vcr1 = {0:f3}, Vcr2= {1:f3}, Vcr3= {2:f3}, Vcr4= {3:f3}, Vcr5= {4:f3} kN", _Vcr1, _Vcr2, _Vcr3, _Vcr4, _Vcr5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _Vc1 = Math.Min(_Vcc1, _Vcr1);
                double _Vc2 = Math.Min(_Vcc2, _Vcr2);
                double _Vc3 = Math.Min(_Vcc3, _Vcr3);
                double _Vc4 = Math.Min(_Vcc4, _Vcr4);
                double _Vc5 = Math.Min(_Vcc5, _Vcr5);

                list.Add(string.Format("Vc1 = Min(Vcc1 & Vcr1) = Min({0:f3} & {1:f3}) = {2:f3} kN ", _Vcc1, _Vcr1, _Vc1));
                list.Add(string.Format("Vc2 = Min(Vcc2 & Vcr2) = Min({0:f3} & {1:f3}) = {2:f3} kN ", _Vcc2, _Vcr2, _Vc2));
                list.Add(string.Format("Vc3 = Min(Vcc3 & Vcr3) = Min({0:f3} & {1:f3}) = {2:f3} kN ", _Vcc3, _Vcr3, _Vc3));
                list.Add(string.Format("Vc4 = Min(Vcc4 & Vcr4) = Min({0:f3} & {1:f3}) = {2:f3} kN ", _Vcc4, _Vcr4, _Vc4));
                list.Add(string.Format("Vc5 = Min(Vcc5 & Vcr5) = Min({0:f3} & {1:f3}) = {2:f3} kN ", _Vcc5, _Vcr5, _Vc5));


                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.21 : Check for Limiting Shear for Girder "));
                list.Add(string.Format("-----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));



                if (iApp.DesignStandard == eDesignStandard.IndianStandard)
                    list.Add(string.Format("Ref. (Cl. 14.1.5 of IRC: 18-2000) "));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Shear, Vu"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Vult1 = {0:f3}, Vult2= {1:f3}, Vult3= {2:f3}, Vult4= {3:f3}, Vult5= {4:f3} kN  ( From STEP 7.17)", _Vult1, _Vult2, _Vult3, _Vult4, _Vult5));
                list.Add(string.Format(""));
                list.Add(string.Format("Vco1 = {0:f3}, Vco2= {1:f3}, Vco3= {2:f3}, Vco4= {3:f3}, Vco5= {4:f3} kN  ( From STEP 7.8)", _Vco1, _Vco2, _Vco3, _Vco4, _Vco5));
                list.Add(string.Format(""));
                list.Add(string.Format("Vcr1 = {0:f3}, Vcr2= {1:f3}, Vcr3= {2:f3}, Vcr4= {3:f3}, Vcr5= {4:f3} kN  ( From STEP 7.20)", _Vcr1, _Vcr2, _Vcr3, _Vcr4, _Vcr5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Effect of Vertical Prestress, Vpr (kN) (From  STEP 7.7)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Vpr1 = {0:f3}, Vpr2= {1:f3}, Vpr3= {2:f3}, Vpr4= {3:f3}, Vpr5= {4:f3} kN  ( From STEP 7.20)", _Vpr1, _Vpr2, _Vpr3, _Vpr4, _Vpr5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                double _Vlim1 = 0.0;

                if (_Vco1 < _Vcr1)
                {
                    _Vlim1 = (_Vult1 - _Vpr1);
                    list.Add(string.Format("If(Vco1 < Vcr1) Limiting Shear  Vlim1 = Vult1 -Vpr1 = {0:f3} - {1:f3} = {2:f3}  kN, Else Limiting Shear = Vult1", _Vult1, _Vpr1, _Vlim1));
                }
                else
                {
                    _Vlim1 = _Vult1;
                    list.Add(string.Format("If(Vco1 < Vcr1) Limiting Shear  Vlim1 = Vult1 -Vpr1 , Else Limiting Shear  Vlim1 = Vult1 = {0:f3}", _Vlim1));
                }
                list.Add(string.Format(""));
                double _Vlim2 = 0.0;
                if (_Vco2 < _Vcr2)
                {
                    _Vlim2 = (_Vult2 - _Vpr2);
                    list.Add(string.Format("If(Vco2 < Vcr2) Limiting Shear  Vlim2 = Vult2 -Vpr2 = {0:f3} - {1:f3} = {2:f3}  kN, Else Limiting Shear = Vult2", _Vult2, _Vpr2, _Vlim2));
                }
                else
                {
                    _Vlim2 = _Vult2;
                    list.Add(string.Format("If(Vco2 < Vcr2) Limiting Shear  Vlim1 = Vult2 -Vpr2 , Else Limiting Shear  Vlim2 = Vult2 = {0:f3}", _Vlim2));
                }

                list.Add(string.Format(""));
                double _Vlim3 = 0.0;
                if (_Vco3 < _Vcr3)
                {
                    _Vlim3 = (_Vult3 - _Vpr3);
                    list.Add(string.Format("If(Vco3 < Vcr3) Limiting Shear  Vlim3 = Vult3 -Vpr3 = {0:f3} - {1:f3} = {2:f3}  kN, Else Limiting Shear = Vult3", _Vult3, _Vpr3, _Vlim3));
                }
                else
                {
                    _Vlim3 = _Vult3;
                    list.Add(string.Format("If(Vco3 < Vcr3) Limiting Shear  Vlim3 = Vult3 -Vpr3 , Else Limiting Shear  Vlim3 = Vult3 = {0:f3}", _Vlim3));
                }


                list.Add(string.Format(""));
                double _Vlim4 = 0.0;
                if (_Vco4 < _Vcr4)
                {
                    _Vlim4 = (_Vult4 - _Vpr4);
                    list.Add(string.Format("If(Vco4 < Vcr4) Limiting Shear  Vlim4 = Vult4 -Vpr4 = {0:f3} - {1:f3} = {2:f3}  kN, Else Limiting Shear = Vult4", _Vult4, _Vpr4, _Vlim4));
                }
                else
                {
                    _Vlim4 = _Vult4;
                    list.Add(string.Format("If(Vco4 < Vcr4) Limiting Shear  Vlim4 = Vult4 -Vpr4 , Else Limiting Shear  Vlim4 = Vult4 = {0:f3}", _Vlim4));
                }

                list.Add(string.Format(""));
                double _Vlim5 = 0.0;
                if (_Vco5 < _Vcr5)
                {
                    _Vlim5 = (_Vult5 - _Vpr5);
                    list.Add(string.Format("If(Vco5 < Vcr5) Limiting Shear  Vlim5 = Vult5 -Vpr5 = {0:f3} - {1:f3} = {2:f3}  kN, Else Limiting Shear = Vult5", _Vult5, _Vpr5, _Vlim5));
                }
                else
                {
                    _Vlim5 = _Vult5;
                    list.Add(string.Format("If(Vco5 < Vcr5) Limiting Shear  Vlim5 = Vult5 -Vpr5 , Else Limiting Shear  Vlim5 = Vult5 = {0:f3}", _Vlim5));
                }


                list.Add(string.Format(""));
                list.Add(string.Format(""));


                list.Add(string.Format("Vlim1 = {0:f3}, Vlim2= {1:f3}, Vlim3= {2:f3}, Vlim4= {3:f3}, Vlim5= {4:f3} kN ", _Vlim1, _Vlim2, _Vlim3, _Vlim4, _Vlim5));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.22 : Ultimate Shear Stresst = Vu / (b x db) / 1000"));
                list.Add(string.Format("-----------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Vlim1 = {0:f3}, Vlim2= {1:f3}, Vlim3= {2:f3}, Vlim4= {3:f3}, Vlim5= {4:f3} kN ", _Vlim1, _Vlim2, _Vlim3, _Vlim4, _Vlim5));

                list.Add(string.Format("b1 = {0:f4}, b2 = {1:f4}, b3 = {2:f4}, b4 = {3:f4}, b5 = {4:f4} m. (From STEP 1, TABLE 2)",
                 _b1, _b2, _b3, _b4, _b5));
                list.Add(string.Format(""));
                list.Add(string.Format("Depth = Db (From STEP 7.13)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Db1 = {0:f3}, Db2 = {1:f3},  Db3 = {2:f3},   Db4 = {3:f3},  Db5 = {4:f3} m.",
                   _Db1, _Db2, _Db3, _Db4, _Db5));
                list.Add(string.Format(""));


                double _t1 = _Vlim1 / (_Db1 * _b1 * 1000);
                double _t2 = _Vlim2 / (_Db2 * _b2 * 1000);
                double _t3 = _Vlim3 / (_Db3 * _b3 * 1000);
                double _t4 = _Vlim4 / (_Db4 * _b4 * 1000);
                double _t5 = _Vlim5 / (_Db5 * _b5 * 1000);
                list.Add(string.Format(""));
                list.Add(string.Format("t1  = Vlim1 / (Db1 x b1 x 1000) = {0:f3} / ({1:f3} x {2:f3} x 1000) = {3:f3} MPa", _Vlim1, _Db1, _b1, _t1));
                list.Add(string.Format("t2  = Vlim2 / (Db2 x b2 x 1000) = {0:f3} / ({1:f3} x {2:f3} x 1000) = {3:f3} MPa", _Vlim2, _Db2, _b2, _t2));
                list.Add(string.Format("t3  = Vlim3 / (Db3 x b3 x 1000) = {0:f3} / ({1:f3} x {2:f3} x 1000) = {3:f3} MPa", _Vlim3, _Db3, _b3, _t3));
                list.Add(string.Format("t4  = Vlim4 / (Db4 x b4 x 1000) = {0:f3} / ({1:f3} x {2:f3} x 1000) = {3:f3} MPa", _Vlim4, _Db4, _b4, _t4));
                list.Add(string.Format("t5  = Vlim5 / (Db5 x b5 x 1000) = {0:f3} / ({1:f3} x {2:f3} x 1000) = {3:f3} MPa", _Vlim5, _Db5, _b5, _t5));
                list.Add(string.Format(""));
                list.Add(string.Format("t1 = {0:f3}, t2 = {1:f3},  t3 = {2:f3},   t4 = {3:f3},  t5 = {4:f3} m. (From STEP 7.23)",
              _t1, _t2, _t3, _t4, _t5));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.23 : Check Status"));
                list.Add(string.Format("------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("t1 = {0:f3}, t2 = {1:f3},  t3 = {2:f3},   t4 = {3:f3},  t5 = {4:f3} m. (From STEP 7.23)", _t1, _t2, _t3, _t4, _t5));
                list.Add(string.Format(""));
                list.Add(string.Format("Permissible shear stress = tv = {0:f3} MPa (From Tab2, User Input Data B (29))", tv));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                if (_t1 < tv)
                    list.Add(string.Format("t1 < tv , {0:f3} < {1:f3}) OK", _t1, tv));
                else
                    list.Add(string.Format("t1 > tv , {0:f3} > {1:f3}) NOT OK", _t1, tv));


                if (_t2 < tv)
                    list.Add(string.Format("t2 < tv , {0:f3} < {1:f3}) OK", _t2, tv));
                else
                    list.Add(string.Format("t2 > tv , {0:f3} > {1:f3}) NOT OK", _t2, tv));


                if (_t3 < tv)
                    list.Add(string.Format("t3 < tv , {0:f3} < {1:f3}) OK", _t3, tv));
                else
                    list.Add(string.Format("t3 > tv , {0:f3} > {1:f3}) NOT OK", _t3, tv));


                if (_t4 < tv)
                    list.Add(string.Format("t4 < tv , {0:f3} < {1:f3}) OK", _t4, tv));
                else
                    list.Add(string.Format("t4 > tv , {0:f3} > {1:f3}) NOT OK", _t4, tv));


                if (_t5 < tv)
                    list.Add(string.Format("t5 < tv , {0:f3} < {1:f3}) OK", _t5, tv));
                else
                    list.Add(string.Format("t5 > tv , {0:f3} > {1:f3}) NOT OK", _t5, tv));


                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.24 : Provision of Shear Reinforcement "));
                list.Add(string.Format("---------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (iApp.DesignStandard == eDesignStandard.IndianStandard)
                    list.Add(string.Format("Ref. (Cl. 14.1.4, IRC: 18-2000)"));

                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Design Shear Capacity, Vc (From STEP 7.20)"));
                list.Add(string.Format(""));

                list.Add(string.Format("Vc1 = {0:f3}, Vc2 = {1:f3},  Vc3 = {2:f3},   Vc4 = {3:f3},  Vc5 = {4:f3} m. (From STEP 7.23)", _Vc1, _Vc2, _Vc3, _Vc4, _Vc5));

                //list.Add(string.Format("Vc1 = 3198.98, Vc2=1967.89, Vc3=968.56, Vc4=589.34, Vcr5=347.07  kN"));
                list.Add(string.Format(""));
                list.Add(string.Format("Limiting Shear (From STEP 7.21)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Vlim1 = {0:f3}, Vlim2= {1:f3}, Vlim3= {2:f3}, Vlim4= {3:f3}, Vlim5= {4:f3} kN ", _Vlim1, _Vlim2, _Vlim3, _Vlim4, _Vlim5));
                list.Add(string.Format(""));
                list.Add(string.Format("Is V less than Vc/2 ? "));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                if (_Vlim1 < (_Vc1 / 2))
                    list.Add(string.Format("IF(Vlim1 < Vc1 / 2) So,  NO"));
                else
                    list.Add(string.Format("IF(Vlim1 > Vc1 / 2) So,  YES"));



                list.Add(string.Format(""));
                if (_Vlim2 < (_Vc2 / 2))
                    list.Add(string.Format("IF(Vlim2 < Vc2 / 2) So,  NO"));
                else
                    list.Add(string.Format("IF(Vlim2 > Vc2 / 2) So,  YES"));



                list.Add(string.Format(""));
                if (_Vlim3 < (_Vc3 / 2))
                    list.Add(string.Format("IF(Vlim3 < Vc3 / 2) So,  NO"));
                else
                    list.Add(string.Format("IF(Vlim3 > Vc3 / 2) So,  YES"));



                list.Add(string.Format(""));
                if (_Vlim4 < (_Vc4 / 2))
                    list.Add(string.Format("IF(Vlim4 < Vc4 / 2) So,  NO"));
                else
                    list.Add(string.Format("IF(Vlim4 > Vc4 / 2) So,  YES"));



                list.Add(string.Format(""));
                if (_Vlim5 < (_Vc5 / 2))
                    list.Add(string.Format("IF(Vlim5 < Vc5 / 2) So,  NO"));
                else
                    list.Add(string.Format("IF(Vlim5 > Vc5 / 2) So,  YES"));



                //list.Add(string.Format("IF(Vlim1 < Vc1 / 2) So  'No",     (Else 'yes')"));
                //list.Add(string.Format("IF(Vlim2 < Vc2 / 2) So  'No",     (Else 'yes')"));
                //list.Add(string.Format("IF(Vlim3 < Vc3 / 2) So  'No",     (Else 'yes')"));
                //list.Add(string.Format("IF(Vlim4 < Vc4 / 2) So  'No",     (Else 'yes')"));
                //list.Add(string.Format("IF(Vlim5 < Vc5 / 2) So  'No",     (Else 'yes')"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.25 : V-Vc (in kN)"));
                list.Add(string.Format("------------------------"));
                list.Add(string.Format(""));

                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Design Shear Capacity, Vc (From STEP 7.20)"));
                list.Add(string.Format(""));

                list.Add(string.Format("Vc1 = {0:f3}, Vc2 = {1:f3},  Vc3 = {2:f3},   Vc4 = {3:f3},  Vc5 = {4:f3} m. (From STEP 7.23)", _Vc1, _Vc2, _Vc3, _Vc4, _Vc5));

                //list.Add(string.Format("Vc1 = 3198.98, Vc2=1967.89, Vc3=968.56, Vc4=589.34, Vcr5=347.07  kN"));
                list.Add(string.Format(""));
                list.Add(string.Format("Limiting Shear (From STEP 7.21)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Vlim1 = {0:f3}, Vlim2= {1:f3}, Vlim3= {2:f3}, Vlim4= {3:f3}, Vlim5= {4:f3} kN ", _Vlim1, _Vlim2, _Vlim3, _Vlim4, _Vlim5));
                list.Add(string.Format(""));

                list.Add(string.Format("Vlim1 - Vc1 = {0:f3} - {1:f3} = {2:f3}", _Vlim1, _Vc1, (_Vlim1 - _Vc1)));
                list.Add(string.Format("Vlim2 - Vc2 = {0:f3} - {1:f3} = {2:f3}", _Vlim2, _Vc2, (_Vlim2 - _Vc2)));
                list.Add(string.Format("Vlim3 - Vc3 = {0:f3} - {1:f3} = {2:f3}", _Vlim3, _Vc3, (_Vlim3 - _Vc3)));
                list.Add(string.Format("Vlim4 - Vc4 = {0:f3} - {1:f3} = {2:f3}", _Vlim4, _Vc4, (_Vlim4 - _Vc4)));
                list.Add(string.Format("Vlim5 - Vc5 = {0:f3} - {1:f3} = {2:f3}", _Vlim5, _Vc5, (_Vlim5 - _Vc5)));
                list.Add(string.Format(""));
                list.Add(string.Format(""));


                #endregion STEP 7.25 : Minimum Shear Reinforcement required, Asv / Sv = (0.4 x b x 10^6) / (0.87 x fyv)


                #region STEP 7.26 : Minimum Shear Reinforcement required, Asv / Sv = (0.4 x b x 10^6) / (0.87 x fyv)

                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.26 : Minimum Shear Reinforcement required, Asv / Sv = (0.4 x b x 10^6) / (0.87 x fyv)"));
                list.Add(string.Format("--------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Overall Width (From  STEP 7.2)"));
                list.Add(string.Format(""));
                list.Add(string.Format("bo1 = {0:f3},  bo2 = {1:f3}, bo3 = {2:f3}, bo4 = {3:f3}, bo5 = {4:f3} m.", _bo1, _bo2, _bo3, _bo4, _bo5));
                list.Add(string.Format(""));
                list.Add(string.Format("fy = {0} (From  Tab1, User Input data (9))", Tab1_Fy));
                list.Add(string.Format(""));

                double _ast1_by_sv = (0.4 * _bo1 * 1000.0 * 1000.0) / (0.87 * Tab1_Fy);
                double _ast2_by_sv = (0.4 * _bo2 * 1000.0 * 1000.0) / (0.87 * Tab1_Fy);
                double _ast3_by_sv = (0.4 * _bo3 * 1000.0 * 1000.0) / (0.87 * Tab1_Fy);
                double _ast4_by_sv = (0.4 * _bo4 * 1000.0 * 1000.0) / (0.87 * Tab1_Fy);
                double _ast5_by_sv = (0.4 * _bo5 * 1000.0 * 1000.0) / (0.87 * Tab1_Fy);

                list.Add(string.Format("Ast1 / Sv = 0.4 x bo1 x 1000 x 1000 / (0.87 x fy) = 0.4 x {0:f3} x 1000 x 1000/ (0.87 x {1:f3}) = {2:f3} Sq.mm./mm.", _bo1, Tab1_Fy, _ast1_by_sv));
                list.Add(string.Format("Ast2 / Sv = 0.4 x bo2 x 1000 x 1000 / (0.87 x fy) = 0.4 x {0:f3} x 1000 x 1000/ (0.87 x {1:f3}) = {2:f3} Sq.mm./mm.", _bo2, Tab1_Fy, _ast2_by_sv));
                list.Add(string.Format("Ast3/  Sv = 0.4 x bo3 x 1000 x 1000 / (0.87 x fy) = 0.4 x {0:f3} x 1000 x 1000/ (0.87 x {1:f3}) = {2:f3} Sq.mm./mm.", _bo3, Tab1_Fy, _ast3_by_sv));
                list.Add(string.Format("Ast4 / Sv = 0.4 x bo4 x 1000 x 1000 / (0.87 x fy) = 0.4 x {0:f3} x 1000 x 1000/ (0.87 x {1:f3}) = {2:f3} Sq.mm./mm.", _bo4, Tab1_Fy, _ast4_by_sv));
                list.Add(string.Format("Ast5 / Sv = 0.4 x bo5 x 1000 x 1000 / (0.87 x fy) = 0.4 x {0:f3} x 1000 x 1000/ (0.87 x {1:f3}) = {2:f3} Sq.mm./mm.", _bo5, Tab1_Fy, _ast5_by_sv));
                list.Add(string.Format(""));
                list.Add(string.Format("Ast1 / Sv = {0:f3}, Ast2 / Sv = {1:f3}, Ast3/  Sv = {2:f3}, Ast4 /  Sv = {3:f3}, Ast5 /  Sv = {4:f3}",
                    _ast1_by_sv, _ast2_by_sv, _ast3_by_sv, _ast4_by_sv, _ast5_by_sv));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.27: Design Shear Reinforcement due to ultimate loads,  Asv/Sv = (V-Vc)/(0.87*fyv*dt)"));
                list.Add(string.Format("-------------------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("V-Vc (in kN)    (From  STEP 7.25)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Vlim1 - Vc1 = {0:f3}, Vlim2- Vc2= {1:f3}, Vlim3- Vc3= {2:f3}, Vlim4- Vc4= {3:f3}, Vlim5- Vc5= {4:f3} kN",
                                            (_Vlim1 - _Vc1),
                                            (_Vlim2 - _Vc2),
                                            (_Vlim3 - _Vc3),
                                            (_Vlim4 - _Vc4),
                                            (_Vlim5 - _Vc5)));
                list.Add(string.Format(""));
                list.Add(string.Format("Grade of Reinforcement Steel = fy = {0}  (From  Tab1, User Input data (9))", Tab1_Fy));
                list.Add(string.Format(""));
                list.Add(string.Format("Overall Depth = D (From STEP 1, TABLE 2)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                list.Add(string.Format("d1 = {0:f3}, d2 =  {1:f3}, d3 =  {2:f3}, d4 =  {3:f3}, d5 =  {4:f3} m. ",
                    Section_D.F2, Section_D.F3, Section_D.F4, Section_D.F5, Section_D.F6));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _ast1_by_sv1 = (_Vlim1 - _Vc1) * 1000.0 / (0.87 * Tab1_Fy * (Section_D.F2 - 0.1));
                double _ast2_by_sv2 = (_Vlim2 - _Vc2) * 1000.0 / (0.87 * Tab1_Fy * (Section_D.F3 - 0.1));
                double _ast3_by_sv3 = (_Vlim3 - _Vc3) * 1000.0 / (0.87 * Tab1_Fy * (Section_D.F4 - 0.1));
                double _ast4_by_sv4 = (_Vlim4 - _Vc4) * 1000.0 / (0.87 * Tab1_Fy * (Section_D.F5 - 0.1));
                double _ast5_by_sv5 = (_Vlim5 - _Vc5) * 1000.0 / (0.87 * Tab1_Fy * (Section_D.F6 - 0.1));


                list.Add(string.Format("Asv1/Sv1  = (Vlim1-Vc1)x1000/(0.87 x fy x (d1-0.1))=({0:f3} x 1000)/(0.87 x {1:f3} x ({2:f3} - 0.1)= {3:f3} Sq.mm/mm", (_Vlim1 - _Vc1), Tab1_Fy, Section_D.F2, _ast1_by_sv1));
                list.Add(string.Format("Asv2/Sv2  = (Vlim2-Vc2)x1000/(0.87 x fy x (d2-0.1))=({0:f3} x 1000)/(0.87 x {1:f3} x ({2:f3} - 0.1)= {3:f3} Sq.mm/mm", (_Vlim2 - _Vc2), Tab1_Fy, Section_D.F3, _ast2_by_sv2));
                list.Add(string.Format("Asv3/Sv3  = (Vlim3-Vc3)x1000/(0.87 x fy x (d3-0.1))=({0:f3} x 1000)/(0.87 x {1:f3} x ({2:f3} - 0.1)= {3:f3} Sq.mm/mm", (_Vlim3 - _Vc3), Tab1_Fy, Section_D.F4, _ast3_by_sv3));
                list.Add(string.Format("Asv4/Sv4  = (Vlim4-Vc4)x1000/(0.87 x fy x (d4-0.1))=({0:f3} x 1000)/(0.87 x {1:f3} x ({2:f3} - 0.1)= {3:f3} Sq.mm/mm", (_Vlim4 - _Vc4), Tab1_Fy, Section_D.F5, _ast4_by_sv4));
                list.Add(string.Format("Asv5/Sv5  = (Vlim5-Vc5)x1000/(0.87 x fy x (d5-0.1))=({0:f3} x 1000)/(0.87 x {1:f3} x ({2:f3} - 0.1)= {3:f3} Sq.mm/mm", (_Vlim5 - _Vc5), Tab1_Fy, Section_D.F6, _ast5_by_sv5));
                list.Add(string.Format(""));
                list.Add(string.Format("Asv1/Sv1 = {0:f3}, Asv2/Sv2 = {1:f3}, Asv3/Sv3 = {2:f3}, Asv4/Sv4 = {3:f3}, Asv5/Sv5 = {4:f3}", _ast1_by_sv1, _ast2_by_sv2, _ast3_by_sv3, _ast4_by_sv4, _ast5_by_sv5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.28 : REINFORCEMENT REQUIRED FOR TORSION"));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("(From STEP 3,   TABLE 8)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Design Torsional Moment = TM"));
                list.Add(string.Format(""));
                double _TM1 = T_ult.F2;
                double _TM2 = T_ult.F3;
                double _TM3 = T_ult.F4;
                double _TM4 = T_ult.F5;
                double _TM5 = T_ult.F6;

                list.Add(string.Format("TM1 = {0:f3}, TM2 = {1:f3}, TM3 = {2:f3}, TM4 = {3:f3}, TM5 = {4:f3} Tons", _TM1, _TM2, _TM3, _TM4, _TM5));
                list.Add(string.Format(""));
                list.Add(string.Format("TM1 = {0:f3}, TM2 = {1:f3}, TM3 = {2:f3}, TM4 = {3:f3}, TM5 = {4:f3} kN", (_TM1 = _TM1 * 10), _TM2 = _TM2 * 10, _TM3 = _TM3 * 10, _TM4 = _TM4 * 10, _TM5 = _TM5 * 10));
                list.Add(string.Format(""));

                double _Ao = 0.5 * (5 + 4.3) * 2.3;
                list.Add(string.Format("Area enclosed on C/L of Box, Ao = 0.5x(5+4.3)x2.3 = {0:f3} Sq.m.", _Ao));
                list.Add(string.Format(""));
                list.Add(string.Format("Ao1 = {0:f3}, Ao2 = {0:f3}, Ao3 = {0:f3}, Ao4 = {0:f3}, Ao5 = {0:f3} Sq.m., ", _Ao));
                list.Add(string.Format(""));

                double _Po = 5 + (2.3 * 2) + 4.3;
                list.Add(string.Format("Perimeter of Ao, Po = 5+(2.3x2)+4.3 = {0:f3} m.", _Po));
                list.Add(string.Format(""));
                list.Add(string.Format("Po1 = {0:f3} m., Po2 = {0:f3} m., Po3 = {0:f3} m., Po4 = {0:f3} m., Po5 = {0:f3} m.", _Po));
                list.Add(string.Format(""));
                list.Add(string.Format("Deck Thickness, Tdeck,"));
                list.Add(string.Format(""));
                list.Add(string.Format("Td1 = {0:f3} m., Td2 = {1:f3} m., Td3 = {2:f3} m., Td4 = {3:f3} m., Td5 = {4:f3} m., ", Section_Td.F2, Section_Td.F3, Section_Td.F4, Section_Td.F5, Section_Td.F6));
                list.Add(string.Format(""));
                list.Add(string.Format("Sofit  Thickness, Tsofit,"));
                list.Add(string.Format(""));
                list.Add(string.Format("Ts1 = {0:f3} m., Ts2 = {1:f3} m., Ts3 = {2:f3} m., Ts4 = {3:f3} m., Ts5 = {4:f3} m., ", Section_Ts.F2, Section_Ts.F3, Section_Ts.F4, Section_Ts.F5, Section_Ts.F6));
                list.Add(string.Format(""));
                list.Add(string.Format("Overall Width (From STEP 7.2)"));
                list.Add(string.Format(""));
                list.Add(string.Format("bo1 = {0:f3},  bo2 = {0:f3}, bo3 = {0:f3}, bo4 = {0:f3}, bo5 = {0:f3} m.", _bo1, _bo2, _bo3, _bo4, _bo5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Shear Stress due to torsion in Web,"));
                list.Add(string.Format(""));
                double _Torsionweb1 = (_TM1 * 1000000.0) / (_Ao * 1000000.0 * _bo1 * 1000.0);
                double _Torsionweb2 = (_TM2 * 1000000.0) / (_Ao * 1000000.0 * _bo2 * 1000.0);
                double _Torsionweb3 = (_TM3 * 1000000.0) / (_Ao * 1000000.0 * _bo3 * 1000.0);
                double _Torsionweb4 = (_TM4 * 1000000.0) / (_Ao * 1000000.0 * _bo4 * 1000.0);
                double _Torsionweb5 = (_TM5 * 1000000.0) / (_Ao * 1000000.0 * _bo5 * 1000.0);
                list.Add(string.Format("Torsionweb1 = TM1x10^6/( Ao1x10^6xbo1x1000) = {0:f3} x 10^6/({1:f3} x 10^6 x {2:f3} x1000) = {3:f3} MPa", _TM1, _Ao, _bo1, _Torsionweb1));
                list.Add(string.Format("Torsionweb2 = TM2x10^6/( Ao2x10^6xbo2x1000) = {0:f3} x 10^6/({1:f3} x 10^6 x {2:f3} x1000) = {3:f3} MPa", _TM2, _Ao, _bo2, _Torsionweb2));
                list.Add(string.Format("Torsionweb3 = TM3x10^6/( Ao3x10^6xbo3x1000) = {0:f3} x 10^6/({1:f3} x 10^6 x {2:f3} x1000) = {3:f3} MPa", _TM3, _Ao, _bo3, _Torsionweb3));
                list.Add(string.Format("Torsionweb4 = TM4x10^6/( Ao4x10^6xbo4x1000) = {0:f3} x 10^6/({1:f3} x 10^6 x {2:f3} x1000) = {3:f3} MPa", _TM4, _Ao, _bo4, _Torsionweb4));
                list.Add(string.Format("Torsionweb5 = TM5x10^6/( Ao5x10^6xbo5x1000) = {0:f3} x 10^6/({1:f3} x 10^6 x {2:f3} x1000) = {3:f3} MPa", _TM5, _Ao, _bo5, _Torsionweb5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Shear Stress due to torsion in deck,"));
                list.Add(string.Format(""));

                double _Torsiondeck1 = (_TM1 * 1000000) / (_Ao * 1000000 * Section_Td.F2 * 1000 * 2);
                double _Torsiondeck2 = (_TM2 * 1000000) / (_Ao * 1000000 * Section_Td.F3 * 1000 * 2);
                double _Torsiondeck3 = (_TM3 * 1000000) / (_Ao * 1000000 * Section_Td.F4 * 1000 * 2);
                double _Torsiondeck4 = (_TM4 * 1000000) / (_Ao * 1000000 * Section_Td.F5 * 1000 * 2);
                double _Torsiondeck5 = (_TM5 * 1000000) / (_Ao * 1000000 * Section_Td.F6 * 1000 * 2);
                list.Add(string.Format("Torsiondeck1 = TM1x10^6/( Ao1x10^6xTd1x1000x2)"));
                list.Add(string.Format("            = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM1, _Ao, Section_Td.F2));
                list.Add(string.Format("            = {0:f3} MPa  ", _Torsiondeck1));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsiondeck2 = TM2x10^6/( Ao2x10^6xTd2x1000x2) "));
                list.Add(string.Format("            = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM2, _Ao, Section_Td.F3));
                list.Add(string.Format("            = {0:f3} MPa  ", _Torsiondeck2));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsiondeck3 = TM3x10^6/( Ao3x10^6xTd3x1000x2) "));
                list.Add(string.Format("            = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM3, _Ao, Section_Td.F4));
                list.Add(string.Format("            = {0:f3} MPa  ", _Torsiondeck3));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsiondeck4 = TM4x10^6/( Ao4x10^6xTd4x1000x2) "));
                list.Add(string.Format("            = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM4, _Ao, Section_Td.F5));
                list.Add(string.Format("            = {0:f3} MPa  ", _Torsiondeck4));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsiondeck5 = TM5x10^6/( Ao5x10^6xTd5x1000x2) "));
                list.Add(string.Format("            = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM5, _Ao, Section_Td.F6));
                list.Add(string.Format("            = {0:f3} MPa  ", _Torsiondeck5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Shear Stress due to torsion in  sofit,"));
                list.Add(string.Format(""));

                double _Torsionsofit1 = (_TM1 * 1000000) / (_Ao * 1000000 * Section_Ts.F2 * 1000 * 2);
                double _Torsionsofit2 = (_TM2 * 1000000) / (_Ao * 1000000 * Section_Ts.F3 * 1000 * 2);
                double _Torsionsofit3 = (_TM3 * 1000000) / (_Ao * 1000000 * Section_Ts.F4 * 1000 * 2);
                double _Torsionsofit4 = (_TM4 * 1000000) / (_Ao * 1000000 * Section_Ts.F5 * 1000 * 2);
                double _Torsionsofit5 = (_TM5 * 1000000) / (_Ao * 1000000 * Section_Ts.F6 * 1000 * 2);
                list.Add(string.Format("Torsionsofit1 = TM1x10^6/( Ao1x10^6xTs1x1000x2)"));
                list.Add(string.Format("             = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM1, _Ao, Section_Ts.F2));
                list.Add(string.Format("             = {0:f3} MPa  ", _Torsionsofit1));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsionsofit2 = TM2x10^6/( Ao2x10^6xTs2x1000x2) "));
                list.Add(string.Format("             = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM2, _Ao, Section_Ts.F3));
                list.Add(string.Format("             = {0:f3} MPa  ", _Torsionsofit2));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsionsofit3 = TM3x10^6/( Ao3x10^6xTs3x1000x2) "));
                list.Add(string.Format("             = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM3, _Ao, Section_Ts.F4));
                list.Add(string.Format("             = {0:f3} MPa  ", _Torsionsofit3));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsionsofit4 = TM4x10^6/( Ao4x10^6xTs4x1000x2) "));
                list.Add(string.Format("             = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM4, _Ao, Section_Ts.F5));
                list.Add(string.Format("             = {0:f3} MPa  ", _Torsionsofit4));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsionsofit5 = TM5x10^6/( Ao5x10^6xTs5x1000x2) "));
                list.Add(string.Format("             = {0:f3} x 10^6/( {1:f3} x 10^6 x {2:f3} x 1000 x 2)", _TM5, _Ao, Section_Ts.F6));
                list.Add(string.Format("             = {0:f3} MPa  ", _Torsionsofit5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.29 : Check Requirements"));
                list.Add(string.Format("------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsionweb1 = {0:f3}, Torsionweb2 = {1:f3}, Torsionweb3 = {2:f3}, Torsionweb4 = {3:f3}, Torsionweb5 = {4:f3} MPa", _Torsionweb1, _Torsionweb2, _Torsionweb3, _Torsionweb4, _Torsionweb5));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsionsofit1 = {0:f3}, Torsionsofit2 = {1:f3}, Torsionsofit3 = {2:f3}, Torsionsofit4 = {3:f3}, Torsionsofit5 = {4:f3} MPa", _Torsionsofit1, _Torsionsofit2, _Torsionsofit3, _Torsionsofit4, _Torsionsofit5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Permissible direct  shear stress = ttv = {0:f3} MPa (From Tab2, User Inpu data B(30))", ttv));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                if (Math.Max(_Torsionweb1, _Torsionsofit1) >= ttv)
                    list.Add(string.Format("IF(Maximum of (Torsionweb1  and  Torsionsofit1) = {0:f3}  >=  ttv = {1:f3}) So  'Reinforcement is required',", Math.Max(_Torsionweb1, _Torsionsofit1), ttv));
                else
                    list.Add(string.Format("IF(Maximum of (Torsionweb1  and  Torsionsofit1) = {0:f3}  <  ttv = {1:f3}) So  'Reinforcement is NOT required',", Math.Max(_Torsionweb1, _Torsionsofit1), ttv));

                if (Math.Max(_Torsionweb2, _Torsionsofit2) >= ttv)
                    list.Add(string.Format("IF(Maximum of (Torsionweb2  and  Torsionsofit2) = {0:f3}  >=  ttv = {1:f3}) So  'Reinforcement is required',", Math.Max(_Torsionweb2, _Torsionsofit2), ttv));
                else
                    list.Add(string.Format("IF(Maximum of (Torsionweb2  and  Torsionsofit2) = {0:f3}  <  ttv = {1:f3}) So  'Reinforcement is NOT required',", Math.Max(_Torsionweb2, _Torsionsofit2), ttv));

                if (Math.Max(_Torsionweb3, _Torsionsofit3) >= ttv)
                    list.Add(string.Format("IF(Maximum of (Torsionweb3  and  Torsionsofit3) = {0:f3}  >=  ttv = {1:f3}) So  'Reinforcement is required',", Math.Max(_Torsionweb3, _Torsionsofit3), ttv));
                else
                    list.Add(string.Format("IF(Maximum of (Torsionweb3  and  Torsionsofit3) = {0:f3}  <  ttv = {1:f3}) So  'Reinforcement is NOT required',", Math.Max(_Torsionweb3, _Torsionsofit3), ttv));

                if (Math.Max(_Torsionweb4, _Torsionsofit4) >= ttv)
                    list.Add(string.Format("IF(Maximum of (Torsionweb4  and  Torsionsofit4) = {0:f3}  >=  ttv = {1:f3}) So  'Reinforcement is required',", Math.Max(_Torsionweb4, _Torsionsofit4), ttv));
                else
                    list.Add(string.Format("IF(Maximum of (Torsionweb4  and  Torsionsofit4) = {0:f3}  <  ttv = {1:f3}) So  'Reinforcement is NOT required',", Math.Max(_Torsionweb4, _Torsionsofit4), ttv));

                if (Math.Max(_Torsionweb5, _Torsionsofit5) >= ttv)
                    list.Add(string.Format("IF(Maximum of (Torsionweb5  and  Torsionsofit5) = {0:f3}  >=  ttv = {1:f3}) So  'Reinforcement is required',", Math.Max(_Torsionweb5, _Torsionsofit5), ttv));
                else
                    list.Add(string.Format("IF(Maximum of (Torsionweb5  and  Torsionsofit5) = {0:f3}  <  ttv = {1:f3}) So  'Reinforcement is NOT required',", Math.Max(_Torsionweb5, _Torsionsofit5), ttv));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.30 : Asv/Sv for torsion / web"));
                list.Add(string.Format("------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _asvt1_by_svt1 = (_TM1 * 1000000.0) / (_Ao * 0.87 * Tab1_Fy * 1000 * 2);
                double _asvt2_by_svt2 = (_TM2 * 1000000.0) / (_Ao * 0.87 * Tab1_Fy * 1000 * 2);
                double _asvt3_by_svt3 = (_TM3 * 1000000.0) / (_Ao * 0.87 * Tab1_Fy * 1000 * 2);
                list.Add(string.Format("Asvt1/Svt1 = TM1 x 10^6  / (Ao1 x 0.87 x fy x 1000 x 2)"));
                list.Add(string.Format("           = {0:f3} x 10^6/({1:f3} x 0.87 x {2} x 1000x2)", _TM1, _Ao, Tab1_Fy));
                list.Add(string.Format("           = {0:f3} Sq.mm/mm.", _asvt1_by_svt1));
                list.Add(string.Format(""));
                list.Add(string.Format("Asvt2/Svt2 = TM2 x 10^6  / (Ao2 x 0.87 x fy x 1000 x 2)"));
                list.Add(string.Format("           = {0:f3} x 10^6/({1:f3} x 0.87 x {2} x 1000x2)", _TM2, _Ao, Tab1_Fy));
                list.Add(string.Format("           = {0:f3} Sq.mm/mm.", _asvt2_by_svt2));
                list.Add(string.Format(""));
                list.Add(string.Format("Asvt3/Svt3 = TM3 x 10^6  / (Ao3 x 0.87 x fy x 1000 x 2)"));
                list.Add(string.Format("           = {0:f3} x 10^6/({1:f3} x 0.87 x {2} x 1000x2)", _TM3, _Ao, Tab1_Fy));
                list.Add(string.Format("           = {0:f3} Sq.mm/mm.", _asvt3_by_svt3));
                list.Add(string.Format(""));
                list.Add(string.Format("Asvt4/Svt4 = 0.0 (NOT Required)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Asvt5/Svt5 = 0.0 (NOT Required)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.31 : Total Reinforcements for Torsion in Deck (From STEP 7.30)"));
                list.Add(string.Format("---------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Astorsiondeck1 = {0:f3} Sq.mm/mm.", _asvt1_by_svt1));
                list.Add(string.Format("Astorsiondeck2 = {0:f3} Sq.mm/mm.", _asvt2_by_svt2));
                list.Add(string.Format("Astorsiondeck3 = {0:f3} Sq.mm/mm.", _asvt3_by_svt3));
                list.Add(string.Format("Astorsiondeck4 = 0.0 Sq.mm/mm."));
                list.Add(string.Format("Astorsiondeck5 = 0.0 Sq.mm/mm."));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.32 : Total Reinforcements for Torsion in Web (From STEP 7.30)"));
                list.Add(string.Format("--------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Astorsionweb1 = {0:f3} Sq.mm/mm.", _asvt1_by_svt1));
                list.Add(string.Format("Astorsionweb2 = {0:f3} Sq.mm/mm.", _asvt2_by_svt2));
                list.Add(string.Format("Astorsionweb3 = {0:f3} Sq.mm/mm.", _asvt3_by_svt3));
                list.Add(string.Format("Astorsionweb4 = 0.0 Sq.mm/mm."));
                list.Add(string.Format("Astorsionweb5 = 0.0 Sq.mm/mm."));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.33 : Total Reinforcements for Torsion in Sofit (From STEP 7.30)"));
                list.Add(string.Format("-----------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Astorsionsofit1 = {0:f3} Sq.mm/mm.", _asvt1_by_svt1));
                list.Add(string.Format("Astorsionsofit2 = {0:f3} Sq.mm/mm.", _asvt2_by_svt2));
                list.Add(string.Format("Astorsionsofit3 = {0:f3} Sq.mm/mm.", _asvt3_by_svt3));
                list.Add(string.Format("Astorsionsofit4 = 0.0 Sq.mm/mm."));
                list.Add(string.Format("Astorsionsofit5 = 0.0 Sq.mm/mm."));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.34 : EFFECT OF COMBINED TORSION & SHEAR"));
                list.Add(string.Format("----------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Shear Stress in Web:"));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Shear Stress due to torsion in Web (From  STEP 7.28)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Torsionweb1 = {0:f3} MPa, Torsionweb2 = {1:f3} MPa, Torsionweb3 = {2:f3} MPa, Torsionweb4 = {3:f3} MPa, Torsionweb5 = {4:f3} MPa", _Torsionweb1, _Torsionweb2, _Torsionweb3, _Torsionweb4, _Torsionweb5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Shear Stress (From STEP 7.22)"));
                list.Add(string.Format(""));
                list.Add(string.Format("t1  = {0:f3}, t2  = {1:f3}, t3 = {2:f3}, t4 = {3:f3}, t5 = {4:f3} MPa", _t1, _t2, _t3, _t4, _t5));
                list.Add(string.Format(""));
                double _Totshearweb1 = (_Torsionweb1 + _t1);
                double _Totshearweb2 = (_Torsionweb2 + _t2);
                double _Totshearweb3 = (_Torsionweb3 + _t3);
                double _Totshearweb4 = (_Torsionweb4 + _t4);
                double _Totshearweb5 = (_Torsionweb5 + _t5);
                list.Add(string.Format("Totshearweb1 = (Torsionweb1 + t1) = {0:f3} + {1:f3} = {2:f3} MPa", _Torsionweb1, _t1, _Totshearweb1));
                list.Add(string.Format("Totshearweb2 = (Torsionweb2 + t2) = {0:f3} + {1:f3} = {2:f3} MPa", _Torsionweb2, _t2, _Totshearweb2));
                list.Add(string.Format("Totshearweb3 = (Torsionweb3 + t3) = {0:f3} + {1:f3} = {2:f3} MPa", _Torsionweb3, _t3, _Totshearweb3));
                list.Add(string.Format("Totshearweb4 = (Torsionweb4 + t4) = {0:f3} + {1:f3} = {2:f3} MPa", _Torsionweb4, _t4, _Totshearweb4));
                list.Add(string.Format("Totshearweb5 = (Torsionweb5 + t5) = {0:f3} + {1:f3} = {2:f3} MPa", _Torsionweb5, _t5, _Totshearweb5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Check for Status :"));
                list.Add(string.Format("------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Perm. shear stress in combined shear & torsion = ttu = {0:f3} MPa (From Tab2, User Input Data B (31))", ttu));
                list.Add(string.Format(""));

                if (_Totshearweb1 < ttu)
                    list.Add(string.Format("IF(Totshearweb1 = {0:f3}  <  ttu = {0:f3}), So, OK", _Totshearweb1, ttu));
                else
                    list.Add(string.Format("IF(Totshearweb1 = {0:f3}  >=  ttu = {0:f3}), So, NOT OK", _Totshearweb1, ttu));


                if (_Totshearweb2 < ttu)
                    list.Add(string.Format("IF(Totshearweb2 = {0:f3}  <  ttu = {0:f3}), So, OK", _Totshearweb2, ttu));
                else
                    list.Add(string.Format("IF(Totshearweb2 = {0:f3}  >=  ttu = {0:f3}), So, NOT OK", _Totshearweb2, ttu));



                if (_Totshearweb3 < ttu)
                    list.Add(string.Format("IF(Totshearweb3 = {0:f3}  <  ttu = {0:f3}), So, OK", _Totshearweb3, ttu));
                else
                    list.Add(string.Format("IF(Totshearweb3 = {0:f3}  >=  ttu = {0:f3}), So, NOT OK", _Totshearweb3, ttu));



                if (_Totshearweb4 < ttu)
                    list.Add(string.Format("IF(Totshearweb4 = {0:f3}  <  ttu = {0:f3}), So, OK", _Totshearweb4, ttu));
                else
                    list.Add(string.Format("IF(Totshearweb4 = {0:f3}  >=  ttu = {0:f3}), So, NOT OK", _Totshearweb4, ttu));



                if (_Totshearweb5 < ttu)
                    list.Add(string.Format("IF(Totshearweb5 = {0:f3}  <  ttu = {0:f3}), So, OK", _Totshearweb5, ttu));
                else
                    list.Add(string.Format("IF(Totshearweb5 = {0:f3}  >=  ttu = {0:f3}), So, NOT OK", _Totshearweb5, ttu));




                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Asv/Sv/web due to torsion & shear:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Design Shear Reinforcement due to ultimate loads (From  STEP 7.27)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Asv1/Sv1 = {0:f3}, Asv2/Sv2 = {1:f3}, Asv3/Sv3 = {2:f3}, Asv4/Sv4 = {3:f3}, Asv5/Sv5 = {4:f3}", _ast1_by_sv1, _ast2_by_sv2, _ast3_by_sv3, _ast4_by_sv4, _ast5_by_sv5));
                list.Add(string.Format(""));
                list.Add(string.Format("Asv/Sv for torsion / web (From  STEP 7.30)"));
                list.Add(string.Format(""));
                list.Add(string.Format("Asvt1/Svt1 = {0:f3}, Asvt2/Svt2 = {1:f3}, Asvt3/Svt3 = {2:f3}, Asvt4/Svt4 = 0.0, Asvt5/Svt5= 0.0", _asvt1_by_svt1, _asvt2_by_svt2, _asvt3_by_svt3));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Asv/Sv/web due to torsion & shear:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Totswebtorsh1 = (_ast1_by_sv1) / 2.0 + _asvt1_by_svt1;
                double _Totswebtorsh2 = (_ast2_by_sv2) / 2.0 + _asvt2_by_svt2;
                double _Totswebtorsh3 = (_ast3_by_sv3) / 2.0 + _asvt3_by_svt3;
                double _Totswebtorsh4 = (_ast4_by_sv4) / 2.0;
                double _Totswebtorsh5 = (_ast5_by_sv5) / 2.0;
                list.Add(string.Format("Totswebtorsh1 = (Asv1/Sv1)/2  + (Asvt1/Svt1) = {0:f3} /2 + {1:f3} = {2:f3} Sq. mm. / mm.", _ast1_by_sv1, _asvt1_by_svt1, _Totswebtorsh1));
                list.Add(string.Format("Totswebtorsh2 = (Asv2/Sv2)/2  + (Asvt2/Svt2) = {0:f3} /2 + {1:f3} = {2:f3} Sq. mm. / mm.", _ast2_by_sv2, _asvt2_by_svt2, _Totswebtorsh2));
                list.Add(string.Format("Totswebtorsh3 = (Asv3/Sv3)/2  + (Asvt3/Svt3) = {0:f3} /2 + {1:f3} = {2:f3} Sq. mm. / mm.", _ast3_by_sv3, _asvt3_by_svt3, _Totswebtorsh3));
                list.Add(string.Format("Totswebtorsh4 = (Asv4/Sv4)/2  + (Asvt4/Svt4) = {0:f3} /2 + {1:f3} = {2:f3} Sq. mm. / mm.", _ast4_by_sv4, 0.0, _Totswebtorsh4));
                list.Add(string.Format("Totswebtorsh5 = (Asv5/Sv5)/2  + (Asvt5/Svt5) = {0:f3} /2 + {1:f3} = {2:f3} Sq. mm. / mm.", _ast5_by_sv5, 0.0, _Totswebtorsh5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Minimum Asv/Sv/web:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Minimum Shear Reinforcement required, (From  STEP 7.26)"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Ast1/Sv = {0:f3}, Ast2/Sv =  {1:f3}, Ast3/Sv =  {2:f3}, Ast4/Sv =  {3:f3}, Ast5/Sv =  {4:f3}", _ast1_by_sv, _ast2_by_sv, _ast3_by_sv, _ast4_by_sv, _ast5_by_sv));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Minimum Asv/Sv/web :"));
                list.Add(string.Format("----------------"));
                list.Add(string.Format(""));

                double _Astminweb1 = (_ast1_by_sv) / 2.0;
                double _Astminweb2 = (_ast2_by_sv) / 2.0;
                double _Astminweb3 = (_ast3_by_sv) / 2.0;
                double _Astminweb4 = (_ast4_by_sv) / 2.0;
                double _Astminweb5 = (_ast5_by_sv) / 2.0;
                list.Add(string.Format("Astminweb1 = (Ast1/Sv)/2 = {0:f3} / 2 = {1:f3} Sq.mm./mm.", _ast1_by_sv, _Astminweb1));
                list.Add(string.Format("Astminweb2 = (Ast2/Sv)/2 = {0:f3} / 2 = {1:f3} Sq.mm./mm.", _ast2_by_sv, _Astminweb2));
                list.Add(string.Format("Astminweb3 = (Ast3/Sv)/2 = {0:f3} / 2 = {1:f3} Sq.mm./mm.", _ast3_by_sv, _Astminweb3));
                list.Add(string.Format("Astminweb4 = (Ast4/Sv)/2 = {0:f3} / 2 = {1:f3} Sq.mm./mm.", _ast4_by_sv, _Astminweb4));
                list.Add(string.Format("Astminweb5 = (Ast5/Sv)/2 = {0:f3} / 2 = {1:f3} Sq.mm./mm.", _ast5_by_sv, _Astminweb5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Asv/Sv/web required:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Astwebreq1 = Maximum of (Totswebtorsh1={0:f3}  and  Astminweb1={1:f3}) = {2:f3}  Sq.mm.", _Totswebtorsh1, _Astminweb1, Math.Max(_Totswebtorsh1, _Astminweb1)));
                list.Add(string.Format("Astwebreq2 = Maximum of (Totswebtorsh2={0:f3}  and  Astminweb2={1:f3}) = {2:f3}  Sq.mm.", _Totswebtorsh2, _Astminweb2, Math.Max(_Totswebtorsh2, _Astminweb2)));
                list.Add(string.Format("Astwebreq3 = Maximum of (Totswebtorsh3={0:f3}  and  Astminweb3={1:f3}) = {2:f3}  Sq.mm.", _Totswebtorsh3, _Astminweb3, Math.Max(_Totswebtorsh3, _Astminweb3)));
                list.Add(string.Format("Astwebreq4 = Maximum of (Totswebtorsh4={0:f3}  and  Astminweb4={1:f3}) = {2:f3}  Sq.mm.", _Totswebtorsh4, _Astminweb4, Math.Max(_Totswebtorsh4, _Astminweb4)));
                list.Add(string.Format("Astwebreq5 = Maximum of (Totswebtorsh5={0:f3}  and  Astminweb5={1:f3}) = {2:f3}  Sq.mm.", _Totswebtorsh5, _Astminweb5, Math.Max(_Totswebtorsh5, _Astminweb5)));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.35 : Check for Ultimate Moment of Mid span Section (Which is more critical)"));
                list.Add(string.Format("----------------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("1. Failure by Yield of Steel:"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Total number of Cables at Mid span (L/2) = {0:f3} (From STEP 4, TABLE 12)", Cable_Nos_At_L2.SUM));
                list.Add(string.Format("Number of Strands = Ns = {0} (From Tab2, User Input data B(2))", Ns));
                list.Add(string.Format("Nominal Area = A = {0} Sq.mm (From Tab2, User Input data B(3))", NA));
                list.Add(string.Format(""));
                double _As = Cable_Nos_At_L2.SUM * Ns * NA;
                list.Add(string.Format("Area of high tensile steel, As, (mm2) =  {0:f3} x {1} x {2} = {3:f3} Sq.mm", Cable_Nos_At_L2.SUM, Ns, NA, _As));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("D5 = {0:f3} m. (From  STEP 7.11)", _D15));
                list.Add(string.Format(""));
                list.Add(string.Format("Distance of cg of tendons from compression fibre, "));
                list.Add(string.Format(""));
                double _Db = _D15 * 1000.0;
                list.Add(string.Format("Db = {0:f3}  x 1000 = {1:f3}  mm.", _D15, _Db));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Tensile Strength [Fu] = {0} N/Sq.mm. (Mpa) (From Tab2, User Input data B(6))", Fu));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate tensile strength of steel, fp = fu = {0} MPa", Fu));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Moment capacity of steel = Msult "));
                list.Add(string.Format(""));
                double _Msult = 0.9 * _Db * _As * Fu / 1000000;
                list.Add(string.Format("Msult = 0.9 x db x As x fp/10^6 = 0.9 x {0:f3}  x {1:f3}  x {2:f3} / 10^6 = {3:f3} kN-m", _Db, _As, Fu, _Msult));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("2. Failure by Crushing of Concrete :"));
                list.Add(string.Format("-------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));

                double _b = _bo5 * 1000.0;
                list.Add(string.Format("Width of web = b = Overall Width at L/2  = bo5 = {0:f3} x 1000 = {1:f3} mm. (From  STEP 7.2)", _bo5, _b));
                list.Add(string.Format(""));
                double _Bf = Dw * 1000.0;
                list.Add(string.Format("Width of flange = Bf = Width of deck = Dw = {0:f0}  mm. (From Tab1, User Input data (6))", _Bf));
                list.Add(string.Format(""));

                double _t = ds * 1000;
                list.Add(string.Format("Thickness of flange = t = ds = {0:f0} mm. (From Tab1, User Input data (17))", _t));
                list.Add(string.Format(""));
                list.Add(string.Format("D5 = {0:f3}  m. (From  STEP 7.11) ", _D15));
                list.Add(string.Format(""));
                list.Add(string.Format("Db = {0:f3}  x 1000 = {1:f3}  mm.", _D15, _Db));
                list.Add(string.Format(""));
                list.Add(string.Format("fck = {0} MPa (Concrete Grade M 40)", fck));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Moment capacity of concrete = Mcult "));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Mcult = 0.176*b*db^2*fck + 2/3*0.8*(Bf-b)*(db-t/2)*t*fck"));

                double _Mcult = (0.176 * _b * (_Db * _Db) * fck + (2.0 / 3.0) * 0.8 * (_Bf - _b) * (_Db - (_t / 2)) * _t * fck) / 1000000.0;

                list.Add(string.Format("        = 0.176 x {0:f3} x {1:f3}^2 x {2:f3} + (2/3) x 0.8 x ({3:f3}- {0:f3}) x ({1:f3} -{4:f3} /2) x {4:f3} x {2:f3}",
                    _b, _Db, fck, _Bf, _t));
                //list.Add(string.Format("        =( 0.176 x 651.0 x 2327.0^2 x 40 +(2/3) x 0.8 x (9750- 651.0) x(2327.0 -225/2) x 225 x 40)/10^6"));
                //list.Add(string.Format("        = (2.482 x 10^10  +  9.672 x 10^10) / 10^6"));
                list.Add(string.Format("        = {0:f3} kN-m", _Mcult));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("3. Ultimate Moment Capacity of Section"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Data :"));
                list.Add(string.Format("------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Moment capacity of steel = Msult = {0:f3}  kN-m", _Msult));
                list.Add(string.Format("Ultimate Moment capacity of concrete = Mcult = {0:f3}  kN-m", _Mcult));
                list.Add(string.Format(""));
                list.Add(string.Format("Ultimate Moment Capacity of Section = Minimum of (Msult  and  Mcult) = {0:f3}  kN-m", Math.Min(_Msult, _Mcult)));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("4. Applied Ultimate Moment"));
                list.Add(string.Format(""));
                list.Add(string.Format("Mult = {0:f3} Ton-m. (From  STEP 3, TABLE 8)", _Mult5));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("STEP 7.36 : Calculation of Transverse steel in Web"));
                list.Add(string.Format("---------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("ZONE I : Support to L/8"));
                list.Add(string.Format("-------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                double _Astwebreq1 = Math.Max(_Totswebtorsh1, _Astminweb1);
                double _Astwebreq2 = Math.Max(_Totswebtorsh2, _Astminweb2);
                double _Astwebreq3 = Math.Max(_Totswebtorsh3, _Astminweb3);
                double _Astwebreq4 = Math.Max(_Totswebtorsh4, _Astminweb4);
                double _Astwebreq5 = Math.Max(_Totswebtorsh5, _Astminweb5);
                list.Add(string.Format("Outer Face:"));
                list.Add(string.Format(""));
                list.Add(string.Format("For Torsion & Shear = Astwebreq1 = {0:f3} / 2 = {1:f3} Sq.mm. (From  STEP 7.34)", _Astwebreq1, _Astwebreq1 / 2.0));
                list.Add(string.Format(""));
                list.Add(string.Format("For Flexure = {0}  Sq.mm.", Area_Zone1_Outer));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Ast = {0:f3}  Sq.mm.", ((_Astwebreq1 / 2.0) + Area_Zone1_Outer)));
                list.Add(string.Format(""));
                list.Add(string.Format("Inner Face:"));
                list.Add(string.Format(""));
                list.Add(string.Format("For Torsion & Shear = Astwebreq1 = {0:f3} / 2 = {1:f3} Sq.mm. (From  STEP 7.34)", _Astwebreq1, _Astwebreq1 / 2.0));
                list.Add(string.Format(""));
                list.Add(string.Format("For Flexure = {0}  Sq.mm.", Area_Zone1_Inner));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Ast = {0:f3}  Sq.mm.", ((_Astwebreq1 / 2.0) + Area_Zone1_Inner)));
                list.Add(string.Format(""));
                list.Add(string.Format("Provided  25T @ 200 +20T @ 200c/c in both face of Zone I"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("ZONE II : L/8 to L/4"));
                list.Add(string.Format(""));

                _Astwebreq1 = Math.Max(_Astwebreq2, _Astwebreq3);
                list.Add(string.Format("Maximum of (Astwebreq2 = {0:f3} and  Astwebreq3 = {1:f3}) = {2:f3} ", _Astwebreq2, _Astwebreq3, _Astwebreq1));
                list.Add(string.Format(""));
                list.Add(string.Format("Outer Face:"));
                list.Add(string.Format(""));
                list.Add(string.Format("For Torsion & Shear = {0:f3} / 2 = {1:f3} Sq.mm. (From  STEP 7.34)", _Astwebreq1, _Astwebreq1 / 2.0));
                list.Add(string.Format(""));
                list.Add(string.Format("For Flexure = {0}  Sq.mm.", Area_Zone2_Outer));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Ast = {0:f3}  Sq.mm.", ((_Astwebreq1 / 2.0) + Area_Zone2_Outer)));
                list.Add(string.Format(""));
                list.Add(string.Format("Inner Face:"));
                list.Add(string.Format(""));
                list.Add(string.Format("For Torsion & Shear = {0:f3} / 2 = {1:f3} Sq.mm. (From  STEP 7.34)", _Astwebreq1, _Astwebreq1 / 2.0));
                list.Add(string.Format(""));
                list.Add(string.Format("For Flexure = {0}  Sq.mm.", Area_Zone2_Inner));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Ast = {0:f3}  Sq.mm.", ((_Astwebreq1 / 2.0) + Area_Zone2_Inner)));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Provided 20T @ 100c/c in both face of Zone II"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("ZONE III : L/4 to L/2"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                _Astwebreq1 = Math.Max(_Astwebreq4, _Astwebreq5);
                list.Add(string.Format("Maximum of (Astwebreq4 = {0:f3} and  Astwebreq5 = {1:f3}) = {2:f3} ", _Astwebreq4, _Astwebreq5, _Astwebreq1));
                list.Add(string.Format(""));
                list.Add(string.Format("Outer Face:"));
                list.Add(string.Format(""));
                list.Add(string.Format("For Torsion & Shear = {0:f3} / 2 = {1:f3} Sq.mm. (From  STEP 7.34)", _Astwebreq1, _Astwebreq1 / 2.0));
                list.Add(string.Format(""));
                list.Add(string.Format("For Flexure = {0}  Sq.mm.", Area_Zone3_Outer));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Ast = {0:f3}  Sq.mm.", ((_Astwebreq1 / 2.0) + Area_Zone3_Outer)));
                list.Add(string.Format(""));
                list.Add(string.Format("Inner Face:"));
                list.Add(string.Format(""));
                list.Add(string.Format("For Torsion & Shear = {0:f3} / 2 = {1:f3} Sq.mm. (From  STEP 7.34)", _Astwebreq1, _Astwebreq1 / 2.0));
                list.Add(string.Format(""));
                list.Add(string.Format("For Flexure = {0}  Sq.mm.", Area_Zone3_Inner));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Ast = {0:f3}  Sq.mm.", ((_Astwebreq1 / 2.0) + Area_Zone3_Inner)));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Provided  16T @ 200c/c + 20T @ 200c/c in both face of Zone III"));
                list.Add(string.Format(""));
                //list.Add(string.Format("END  of  STEP 7  (DESIGN FOR ULTIMATE SHEAR)"));
                list.Add(string.Format(""));
                #endregion STEP 7




                #region END OF REPORT
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------------------------------"));
                list.Add(string.Format("---------------------       END OF REPORT        --------------------------"));
                list.Add(string.Format("---------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("---------------------------------------------------------------------------"));
                list.Add(string.Format("---------            Thank you for using ASTRA Pro          ---------------"));
                list.Add(string.Format("---------------------------------------------------------------------------"));
                list.Add(string.Format(""));
                #endregion

                if (false)
                {
                    #region Discontinued Report
                    list.Add(string.Format(""));
                    list.Add(string.Format(""));
                    list.Add(string.Format("---------------------------------------------------------------------------"));
                    list.Add(string.Format("                         Report is Discontinued from here.....             "));
                    list.Add(string.Format("---------------------------------------------------------------------------"));
                    #endregion
                }
                #endregion Chiranjit [2012 09 14]

            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : \n\r\n\r" + ex.Message);
            }
            finally
            {
                File.WriteAllLines(filename, list.ToArray());
                list.Clear();
                list = null;
            }
        }

        private double Sqrt(double val)
        {
            return Math.Sqrt(val);
        }

        public string FilePath
        {
            set
            {
                //this.Text = "DESIGN OF RCC DECK SLAB : " + value;
                user_path = value;

                //file_path = GetAstraDirectoryPath(user_path);
                file_path = Path.Combine(user_path, "Design of PSC Box Girder");
                if (!Directory.Exists(file_path))
                    Directory.CreateDirectory(file_path);

                system_path = Path.Combine(file_path, "AstraSys");
                if (!Directory.Exists(system_path))
                    Directory.CreateDirectory(system_path);

                rep_file_name = Path.Combine(file_path, "DESIGN_OF_PSC_BOX_GIRDER.TXT");
                user_input_file = Path.Combine(system_path, "PSC_BOX_GIRDER.FIL");
            }
        }

    }
    //Chiranjit [2012 11 01]
    public class PSC_Box_Section_Data
    {
        public PSC_Force_Data Area { get; set; }
        public PSC_Force_Data Ixx { get; set; }
        public PSC_Force_Data Iyy { get; set; }
        public PSC_Force_Data Izz { get; set; }

        public PSC_Box_Section_Data(PSC_Force_Data A, PSC_Force_Data Ix, PSC_Force_Data Iy, PSC_Force_Data Iz)
        {
            Area = A;
            Ixx = Ix;
            Iyy = Iy;
            Izz = Iz;
        }
        //A += list_A[i];
        //   Yt += list_Yt[i];
        //   A_Yt += list_A_Yt[i];
        //   A_YT_Yt += list_A_YT_Yt[i];
        //   Iself += list_Iself[i];
        //   Iself_A_Yt_Yt += list_Iself_A_Yt_Yt[i];
        //   Iyy += list_Iyy[i];
    }
    //Chiranjit [2012 09 28]
    public class PSC_Box_Forces
    {
        public PSC_Force_Data FRC_DL_Moment { get; set; }
        public PSC_Force_Data FRC_SIDL_Moment { get; set; }
        public PSC_Force_Data FRC_LL_Moment { get; set; }
        public PSC_Force_Data FRC_Total_Moment
        {
            get
            {
                return (FRC_DL_Moment + FRC_SIDL_Moment + FRC_LL_Moment);
            }
        }

        public PSC_Force_Data FRC_DL_Shear { get; set; }
        public PSC_Force_Data FRC_SIDL_Shear { get; set; }
        public PSC_Force_Data FRC_LL_Shear { get; set; }
        public PSC_Force_Data FRC_Total_Shear
        {
            get
            {
                return (FRC_DL_Shear + FRC_SIDL_Shear + FRC_LL_Shear);
            }
        }
        public PSC_Force_Data FRC_DL_Torsion { get; set; }
        public PSC_Force_Data FRC_SIDL_Torsion { get; set; }
        public PSC_Force_Data FRC_LL_Torsion { get; set; }
        public PSC_Force_Data FRC_Total_Torsion
        {
            get
            {
                return (FRC_DL_Torsion + FRC_SIDL_Torsion + FRC_LL_Torsion);
            }
        }
        public PSC_Box_Forces()
        {
            FRC_DL_Moment = new PSC_Force_Data(6);
            FRC_SIDL_Moment = new PSC_Force_Data(6);
            FRC_LL_Moment = new PSC_Force_Data(6);

            FRC_DL_Shear = new PSC_Force_Data(6);
            FRC_SIDL_Shear = new PSC_Force_Data(6);
            FRC_LL_Shear = new PSC_Force_Data(6);

            FRC_DL_Torsion = new PSC_Force_Data(6);
            FRC_SIDL_Torsion = new PSC_Force_Data(6);
            FRC_LL_Torsion = new PSC_Force_Data(6);
        }

        public void Set_Absolute()
        {
            FRC_DL_Moment.Set_Absolute();
            FRC_SIDL_Moment.Set_Absolute();
            FRC_LL_Moment.Set_Absolute();
            FRC_DL_Shear.Set_Absolute();
            FRC_SIDL_Shear.Set_Absolute();
            FRC_LL_Shear.Set_Absolute();
            FRC_DL_Torsion.Set_Absolute();
            FRC_SIDL_Torsion.Set_Absolute();
            FRC_LL_Torsion.Set_Absolute();
            FRC_LL_Torsion.Set_Absolute();
        }
    }
}
//Chiranjit [2011 10 17]  distance from end to support
